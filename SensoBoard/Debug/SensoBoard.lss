
SensoBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041cc  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004041cc  004041cc  0000c1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000478  20000000  004041d4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  20000478  0040464c  00010478  2**2
                  ALLOC
  4 .stack        00003000  20000528  004046fc  00010478  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000104a2  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c80e  00000000  00000000  00010513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002745  00000000  00000000  0001cd21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004907  00000000  00000000  0001f466  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ca8  00000000  00000000  00023d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ae0  00000000  00000000  00024a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011f48  00000000  00000000  000254f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e805  00000000  00000000  0003743d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00045b28  00000000  00000000  00045c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029d0  00000000  00000000  0008b76c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003528 	.word	0x20003528
  400004:	0040124d 	.word	0x0040124d
  400008:	00401245 	.word	0x00401245
  40000c:	00401245 	.word	0x00401245
  400010:	00401245 	.word	0x00401245
  400014:	00401245 	.word	0x00401245
  400018:	00401245 	.word	0x00401245
	...
  40002c:	00401245 	.word	0x00401245
  400030:	00401245 	.word	0x00401245
  400034:	00000000 	.word	0x00000000
  400038:	00401245 	.word	0x00401245
  40003c:	00401245 	.word	0x00401245
  400040:	00401245 	.word	0x00401245
  400044:	00401245 	.word	0x00401245
  400048:	00401245 	.word	0x00401245
  40004c:	00401245 	.word	0x00401245
  400050:	00401245 	.word	0x00401245
  400054:	00401245 	.word	0x00401245
  400058:	00401245 	.word	0x00401245
  40005c:	00000000 	.word	0x00000000
  400060:	00401245 	.word	0x00401245
  400064:	00401245 	.word	0x00401245
  400068:	00401245 	.word	0x00401245
  40006c:	00400771 	.word	0x00400771
  400070:	00400789 	.word	0x00400789
  400074:	004007a1 	.word	0x004007a1
  400078:	00401245 	.word	0x00401245
  40007c:	00401245 	.word	0x00401245
  400080:	00401245 	.word	0x00401245
  400084:	00401245 	.word	0x00401245
  400088:	00000000 	.word	0x00000000
  40008c:	00401245 	.word	0x00401245
  400090:	00401245 	.word	0x00401245
  400094:	00401245 	.word	0x00401245
  400098:	00401245 	.word	0x00401245
  40009c:	00401245 	.word	0x00401245
  4000a0:	00401245 	.word	0x00401245
  4000a4:	00401245 	.word	0x00401245
  4000a8:	00401245 	.word	0x00401245
  4000ac:	00401245 	.word	0x00401245
  4000b0:	00401245 	.word	0x00401245
  4000b4:	00401245 	.word	0x00401245
  4000b8:	00401245 	.word	0x00401245
  4000bc:	00401245 	.word	0x00401245

004000c0 <deregister_tm_clones>:
  4000c0:	b508      	push	{r3, lr}
  4000c2:	4805      	ldr	r0, [pc, #20]	; (4000d8 <deregister_tm_clones+0x18>)
  4000c4:	4b05      	ldr	r3, [pc, #20]	; (4000dc <deregister_tm_clones+0x1c>)
  4000c6:	1a1b      	subs	r3, r3, r0
  4000c8:	2b06      	cmp	r3, #6
  4000ca:	d800      	bhi.n	4000ce <deregister_tm_clones+0xe>
  4000cc:	bd08      	pop	{r3, pc}
  4000ce:	4b04      	ldr	r3, [pc, #16]	; (4000e0 <deregister_tm_clones+0x20>)
  4000d0:	2b00      	cmp	r3, #0
  4000d2:	d0fb      	beq.n	4000cc <deregister_tm_clones+0xc>
  4000d4:	4798      	blx	r3
  4000d6:	e7f9      	b.n	4000cc <deregister_tm_clones+0xc>
  4000d8:	004041d4 	.word	0x004041d4
  4000dc:	004041d7 	.word	0x004041d7
  4000e0:	00000000 	.word	0x00000000

004000e4 <register_tm_clones>:
  4000e4:	b508      	push	{r3, lr}
  4000e6:	4807      	ldr	r0, [pc, #28]	; (400104 <register_tm_clones+0x20>)
  4000e8:	4b07      	ldr	r3, [pc, #28]	; (400108 <register_tm_clones+0x24>)
  4000ea:	1a1b      	subs	r3, r3, r0
  4000ec:	109b      	asrs	r3, r3, #2
  4000ee:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4000f2:	1059      	asrs	r1, r3, #1
  4000f4:	d100      	bne.n	4000f8 <register_tm_clones+0x14>
  4000f6:	bd08      	pop	{r3, pc}
  4000f8:	4a04      	ldr	r2, [pc, #16]	; (40010c <register_tm_clones+0x28>)
  4000fa:	2a00      	cmp	r2, #0
  4000fc:	d0fb      	beq.n	4000f6 <register_tm_clones+0x12>
  4000fe:	4790      	blx	r2
  400100:	e7f9      	b.n	4000f6 <register_tm_clones+0x12>
  400102:	bf00      	nop
  400104:	004041d4 	.word	0x004041d4
  400108:	004041d4 	.word	0x004041d4
  40010c:	00000000 	.word	0x00000000

00400110 <__do_global_dtors_aux>:
  400110:	b510      	push	{r4, lr}
  400112:	4c06      	ldr	r4, [pc, #24]	; (40012c <__do_global_dtors_aux+0x1c>)
  400114:	7823      	ldrb	r3, [r4, #0]
  400116:	b943      	cbnz	r3, 40012a <__do_global_dtors_aux+0x1a>
  400118:	f7ff ffd2 	bl	4000c0 <deregister_tm_clones>
  40011c:	4b04      	ldr	r3, [pc, #16]	; (400130 <__do_global_dtors_aux+0x20>)
  40011e:	b113      	cbz	r3, 400126 <__do_global_dtors_aux+0x16>
  400120:	4804      	ldr	r0, [pc, #16]	; (400134 <__do_global_dtors_aux+0x24>)
  400122:	f3af 8000 	nop.w
  400126:	2301      	movs	r3, #1
  400128:	7023      	strb	r3, [r4, #0]
  40012a:	bd10      	pop	{r4, pc}
  40012c:	20000478 	.word	0x20000478
  400130:	00000000 	.word	0x00000000
  400134:	004041d4 	.word	0x004041d4

00400138 <frame_dummy>:
  400138:	b508      	push	{r3, lr}
  40013a:	4b08      	ldr	r3, [pc, #32]	; (40015c <frame_dummy+0x24>)
  40013c:	b11b      	cbz	r3, 400146 <frame_dummy+0xe>
  40013e:	4808      	ldr	r0, [pc, #32]	; (400160 <frame_dummy+0x28>)
  400140:	4908      	ldr	r1, [pc, #32]	; (400164 <frame_dummy+0x2c>)
  400142:	f3af 8000 	nop.w
  400146:	4808      	ldr	r0, [pc, #32]	; (400168 <frame_dummy+0x30>)
  400148:	6803      	ldr	r3, [r0, #0]
  40014a:	b113      	cbz	r3, 400152 <frame_dummy+0x1a>
  40014c:	4b07      	ldr	r3, [pc, #28]	; (40016c <frame_dummy+0x34>)
  40014e:	b103      	cbz	r3, 400152 <frame_dummy+0x1a>
  400150:	4798      	blx	r3
  400152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400156:	f7ff bfc5 	b.w	4000e4 <register_tm_clones>
  40015a:	bf00      	nop
  40015c:	00000000 	.word	0x00000000
  400160:	004041d4 	.word	0x004041d4
  400164:	2000047c 	.word	0x2000047c
  400168:	004041d4 	.word	0x004041d4
  40016c:	00000000 	.word	0x00000000

00400170 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400170:	b580      	push	{r7, lr}
  400172:	b082      	sub	sp, #8
  400174:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  400176:	2300      	movs	r3, #0
  400178:	71fb      	strb	r3, [r7, #7]
  40017a:	e00c      	b.n	400196 <sd_mmc_init+0x26>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40017c:	79fa      	ldrb	r2, [r7, #7]
  40017e:	490b      	ldr	r1, [pc, #44]	; (4001ac <sd_mmc_init+0x3c>)
  400180:	4613      	mov	r3, r2
  400182:	00db      	lsls	r3, r3, #3
  400184:	4413      	add	r3, r2
  400186:	009b      	lsls	r3, r3, #2
  400188:	440b      	add	r3, r1
  40018a:	3308      	adds	r3, #8
  40018c:	2204      	movs	r2, #4
  40018e:	719a      	strb	r2, [r3, #6]
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  400190:	79fb      	ldrb	r3, [r7, #7]
  400192:	3301      	adds	r3, #1
  400194:	71fb      	strb	r3, [r7, #7]
  400196:	79fb      	ldrb	r3, [r7, #7]
  400198:	2b00      	cmp	r3, #0
  40019a:	d0ef      	beq.n	40017c <sd_mmc_init+0xc>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40019c:	4b04      	ldr	r3, [pc, #16]	; (4001b0 <sd_mmc_init+0x40>)
  40019e:	22ff      	movs	r2, #255	; 0xff
  4001a0:	701a      	strb	r2, [r3, #0]
	driver_init();
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sd_mmc_init+0x44>)
  4001a4:	4798      	blx	r3
}
  4001a6:	3708      	adds	r7, #8
  4001a8:	46bd      	mov	sp, r7
  4001aa:	bd80      	pop	{r7, pc}
  4001ac:	2000001c 	.word	0x2000001c
  4001b0:	20000494 	.word	0x20000494
  4001b4:	004001f9 	.word	0x004001f9

004001b8 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  4001b8:	b480      	push	{r7}
  4001ba:	b083      	sub	sp, #12
  4001bc:	af00      	add	r7, sp, #0
  4001be:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001c0:	687b      	ldr	r3, [r7, #4]
  4001c2:	2201      	movs	r2, #1
  4001c4:	601a      	str	r2, [r3, #0]
}
  4001c6:	370c      	adds	r7, #12
  4001c8:	46bd      	mov	sp, r7
  4001ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001ce:	4770      	bx	lr

004001d0 <spi_is_enabled>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
  4001d0:	b480      	push	{r7}
  4001d2:	b083      	sub	sp, #12
  4001d4:	af00      	add	r7, sp, #0
  4001d6:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  4001d8:	687b      	ldr	r3, [r7, #4]
  4001da:	691b      	ldr	r3, [r3, #16]
  4001dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4001e0:	2b00      	cmp	r3, #0
  4001e2:	d001      	beq.n	4001e8 <spi_is_enabled+0x18>
		return 1;
  4001e4:	2301      	movs	r3, #1
  4001e6:	e000      	b.n	4001ea <spi_is_enabled+0x1a>
	} else {
		return 0;
  4001e8:	2300      	movs	r3, #0
	}
}
  4001ea:	4618      	mov	r0, r3
  4001ec:	370c      	adds	r7, #12
  4001ee:	46bd      	mov	sp, r7
  4001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001f4:	4770      	bx	lr
  4001f6:	bf00      	nop

004001f8 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
  4001f8:	b580      	push	{r7, lr}
  4001fa:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <sd_mmc_spi_init+0x24>)
  4001fe:	2200      	movs	r2, #0
  400200:	701a      	strb	r2, [r3, #0]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  400202:	4807      	ldr	r0, [pc, #28]	; (400220 <sd_mmc_spi_init+0x28>)
  400204:	4b07      	ldr	r3, [pc, #28]	; (400224 <sd_mmc_spi_init+0x2c>)
  400206:	4798      	blx	r3
  400208:	4603      	mov	r3, r0
  40020a:	2b00      	cmp	r3, #0
  40020c:	d105      	bne.n	40021a <sd_mmc_spi_init+0x22>
		spi_master_init(SD_MMC_SPI);
  40020e:	4804      	ldr	r0, [pc, #16]	; (400220 <sd_mmc_spi_init+0x28>)
  400210:	4b05      	ldr	r3, [pc, #20]	; (400228 <sd_mmc_spi_init+0x30>)
  400212:	4798      	blx	r3
		spi_enable(SD_MMC_SPI);
  400214:	4802      	ldr	r0, [pc, #8]	; (400220 <sd_mmc_spi_init+0x28>)
  400216:	4b05      	ldr	r3, [pc, #20]	; (40022c <sd_mmc_spi_init+0x34>)
  400218:	4798      	blx	r3
	}
#endif
}
  40021a:	bd80      	pop	{r7, pc}
  40021c:	20000495 	.word	0x20000495
  400220:	40008000 	.word	0x40008000
  400224:	004001d1 	.word	0x004001d1
  400228:	004002e9 	.word	0x004002e9
  40022c:	004001b9 	.word	0x004001b9

00400230 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	2280      	movs	r2, #128	; 0x80
  40023c:	601a      	str	r2, [r3, #0]
}
  40023e:	370c      	adds	r7, #12
  400240:	46bd      	mov	sp, r7
  400242:	f85d 7b04 	ldr.w	r7, [sp], #4
  400246:	4770      	bx	lr

00400248 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  400248:	b480      	push	{r7}
  40024a:	b083      	sub	sp, #12
  40024c:	af00      	add	r7, sp, #0
  40024e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	685b      	ldr	r3, [r3, #4]
  400254:	f043 0201 	orr.w	r2, r3, #1
  400258:	687b      	ldr	r3, [r7, #4]
  40025a:	605a      	str	r2, [r3, #4]
}
  40025c:	370c      	adds	r7, #12
  40025e:	46bd      	mov	sp, r7
  400260:	f85d 7b04 	ldr.w	r7, [sp], #4
  400264:	4770      	bx	lr
  400266:	bf00      	nop

00400268 <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
  400268:	b480      	push	{r7}
  40026a:	b083      	sub	sp, #12
  40026c:	af00      	add	r7, sp, #0
  40026e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400270:	687b      	ldr	r3, [r7, #4]
  400272:	685b      	ldr	r3, [r3, #4]
  400274:	f023 0202 	bic.w	r2, r3, #2
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	605a      	str	r2, [r3, #4]
}
  40027c:	370c      	adds	r7, #12
  40027e:	46bd      	mov	sp, r7
  400280:	f85d 7b04 	ldr.w	r7, [sp], #4
  400284:	4770      	bx	lr
  400286:	bf00      	nop

00400288 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
  400288:	b480      	push	{r7}
  40028a:	b083      	sub	sp, #12
  40028c:	af00      	add	r7, sp, #0
  40028e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	685b      	ldr	r3, [r3, #4]
  400294:	f023 0204 	bic.w	r2, r3, #4
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	605a      	str	r2, [r3, #4]
}
  40029c:	370c      	adds	r7, #12
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop

004002a8 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4002a8:	b480      	push	{r7}
  4002aa:	b083      	sub	sp, #12
  4002ac:	af00      	add	r7, sp, #0
  4002ae:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4002b0:	687b      	ldr	r3, [r7, #4]
  4002b2:	685b      	ldr	r3, [r3, #4]
  4002b4:	f043 0210 	orr.w	r2, r3, #16
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	605a      	str	r2, [r3, #4]
}
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002c4:	4770      	bx	lr
  4002c6:	bf00      	nop

004002c8 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  4002c8:	b480      	push	{r7}
  4002ca:	b083      	sub	sp, #12
  4002cc:	af00      	add	r7, sp, #0
  4002ce:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4002d0:	687b      	ldr	r3, [r7, #4]
  4002d2:	685b      	ldr	r3, [r3, #4]
  4002d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  4002d8:	687b      	ldr	r3, [r7, #4]
  4002da:	605a      	str	r2, [r3, #4]
}
  4002dc:	370c      	adds	r7, #12
  4002de:	46bd      	mov	sp, r7
  4002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002e4:	4770      	bx	lr
  4002e6:	bf00      	nop

004002e8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4002e8:	b580      	push	{r7, lr}
  4002ea:	b082      	sub	sp, #8
  4002ec:	af00      	add	r7, sp, #0
  4002ee:	6078      	str	r0, [r7, #4]
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4002f0:	6878      	ldr	r0, [r7, #4]
  4002f2:	4b0f      	ldr	r3, [pc, #60]	; (400330 <spi_master_init+0x48>)
  4002f4:	4798      	blx	r3
#endif
	spi_reset(p_spi);
  4002f6:	6878      	ldr	r0, [r7, #4]
  4002f8:	4b0e      	ldr	r3, [pc, #56]	; (400334 <spi_master_init+0x4c>)
  4002fa:	4798      	blx	r3
	spi_set_master_mode(p_spi);
  4002fc:	6878      	ldr	r0, [r7, #4]
  4002fe:	4b0e      	ldr	r3, [pc, #56]	; (400338 <spi_master_init+0x50>)
  400300:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
  400302:	6878      	ldr	r0, [r7, #4]
  400304:	4b0d      	ldr	r3, [pc, #52]	; (40033c <spi_master_init+0x54>)
  400306:	4798      	blx	r3
	spi_disable_loopback(p_spi);
  400308:	6878      	ldr	r0, [r7, #4]
  40030a:	4b0d      	ldr	r3, [pc, #52]	; (400340 <spi_master_init+0x58>)
  40030c:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40030e:	6878      	ldr	r0, [r7, #4]
  400310:	2100      	movs	r1, #0
  400312:	4b0c      	ldr	r3, [pc, #48]	; (400344 <spi_master_init+0x5c>)
  400314:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
  400316:	6878      	ldr	r0, [r7, #4]
  400318:	4b0b      	ldr	r3, [pc, #44]	; (400348 <spi_master_init+0x60>)
  40031a:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
  40031c:	6878      	ldr	r0, [r7, #4]
  40031e:	4b0b      	ldr	r3, [pc, #44]	; (40034c <spi_master_init+0x64>)
  400320:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400322:	6878      	ldr	r0, [r7, #4]
  400324:	2100      	movs	r1, #0
  400326:	4b0a      	ldr	r3, [pc, #40]	; (400350 <spi_master_init+0x68>)
  400328:	4798      	blx	r3
}
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	004007d1 	.word	0x004007d1
  400334:	00400231 	.word	0x00400231
  400338:	00400249 	.word	0x00400249
  40033c:	004002a9 	.word	0x004002a9
  400340:	004002c9 	.word	0x004002c9
  400344:	004007e9 	.word	0x004007e9
  400348:	00400269 	.word	0x00400269
  40034c:	00400289 	.word	0x00400289
  400350:	0040081d 	.word	0x0040081d

00400354 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400354:	b480      	push	{r7}
  400356:	b085      	sub	sp, #20
  400358:	af00      	add	r7, sp, #0
  40035a:	60f8      	str	r0, [r7, #12]
  40035c:	60b9      	str	r1, [r7, #8]
  40035e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400360:	687b      	ldr	r3, [r7, #4]
  400362:	2b00      	cmp	r3, #0
  400364:	d003      	beq.n	40036e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400366:	68fb      	ldr	r3, [r7, #12]
  400368:	68ba      	ldr	r2, [r7, #8]
  40036a:	665a      	str	r2, [r3, #100]	; 0x64
  40036c:	e002      	b.n	400374 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40036e:	68fb      	ldr	r3, [r7, #12]
  400370:	68ba      	ldr	r2, [r7, #8]
  400372:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400374:	3714      	adds	r7, #20
  400376:	46bd      	mov	sp, r7
  400378:	f85d 7b04 	ldr.w	r7, [sp], #4
  40037c:	4770      	bx	lr
  40037e:	bf00      	nop

00400380 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400380:	b480      	push	{r7}
  400382:	b083      	sub	sp, #12
  400384:	af00      	add	r7, sp, #0
  400386:	6078      	str	r0, [r7, #4]
  400388:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40038a:	687b      	ldr	r3, [r7, #4]
  40038c:	683a      	ldr	r2, [r7, #0]
  40038e:	631a      	str	r2, [r3, #48]	; 0x30
}
  400390:	370c      	adds	r7, #12
  400392:	46bd      	mov	sp, r7
  400394:	f85d 7b04 	ldr.w	r7, [sp], #4
  400398:	4770      	bx	lr
  40039a:	bf00      	nop

0040039c <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  40039c:	b480      	push	{r7}
  40039e:	b083      	sub	sp, #12
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  4003a6:	687b      	ldr	r3, [r7, #4]
  4003a8:	683a      	ldr	r2, [r7, #0]
  4003aa:	635a      	str	r2, [r3, #52]	; 0x34
}
  4003ac:	370c      	adds	r7, #12
  4003ae:	46bd      	mov	sp, r7
  4003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003b4:	4770      	bx	lr
  4003b6:	bf00      	nop

004003b8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4003b8:	b480      	push	{r7}
  4003ba:	b087      	sub	sp, #28
  4003bc:	af00      	add	r7, sp, #0
  4003be:	60f8      	str	r0, [r7, #12]
  4003c0:	60b9      	str	r1, [r7, #8]
  4003c2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4003c4:	68fb      	ldr	r3, [r7, #12]
  4003c6:	687a      	ldr	r2, [r7, #4]
  4003c8:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  4003ca:	68bb      	ldr	r3, [r7, #8]
  4003cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4003d0:	d04a      	beq.n	400468 <pio_set_peripheral+0xb0>
  4003d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4003d6:	d808      	bhi.n	4003ea <pio_set_peripheral+0x32>
  4003d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4003dc:	d016      	beq.n	40040c <pio_set_peripheral+0x54>
  4003de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4003e2:	d02c      	beq.n	40043e <pio_set_peripheral+0x86>
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d069      	beq.n	4004bc <pio_set_peripheral+0x104>
  4003e8:	e064      	b.n	4004b4 <pio_set_peripheral+0xfc>
  4003ea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4003ee:	d065      	beq.n	4004bc <pio_set_peripheral+0x104>
  4003f0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4003f4:	d803      	bhi.n	4003fe <pio_set_peripheral+0x46>
  4003f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4003fa:	d04a      	beq.n	400492 <pio_set_peripheral+0xda>
  4003fc:	e05a      	b.n	4004b4 <pio_set_peripheral+0xfc>
  4003fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400402:	d05b      	beq.n	4004bc <pio_set_peripheral+0x104>
  400404:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400408:	d058      	beq.n	4004bc <pio_set_peripheral+0x104>
  40040a:	e053      	b.n	4004b4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40040c:	68fb      	ldr	r3, [r7, #12]
  40040e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400410:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400412:	68fb      	ldr	r3, [r7, #12]
  400414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400416:	687b      	ldr	r3, [r7, #4]
  400418:	43d9      	mvns	r1, r3
  40041a:	697b      	ldr	r3, [r7, #20]
  40041c:	400b      	ands	r3, r1
  40041e:	401a      	ands	r2, r3
  400420:	68fb      	ldr	r3, [r7, #12]
  400422:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400424:	68fb      	ldr	r3, [r7, #12]
  400426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400428:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40042a:	68fb      	ldr	r3, [r7, #12]
  40042c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40042e:	687b      	ldr	r3, [r7, #4]
  400430:	43d9      	mvns	r1, r3
  400432:	697b      	ldr	r3, [r7, #20]
  400434:	400b      	ands	r3, r1
  400436:	401a      	ands	r2, r3
  400438:	68fb      	ldr	r3, [r7, #12]
  40043a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40043c:	e03a      	b.n	4004b4 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40043e:	68fb      	ldr	r3, [r7, #12]
  400440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400442:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400444:	687a      	ldr	r2, [r7, #4]
  400446:	697b      	ldr	r3, [r7, #20]
  400448:	431a      	orrs	r2, r3
  40044a:	68fb      	ldr	r3, [r7, #12]
  40044c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40044e:	68fb      	ldr	r3, [r7, #12]
  400450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400452:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400454:	68fb      	ldr	r3, [r7, #12]
  400456:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400458:	687b      	ldr	r3, [r7, #4]
  40045a:	43d9      	mvns	r1, r3
  40045c:	697b      	ldr	r3, [r7, #20]
  40045e:	400b      	ands	r3, r1
  400460:	401a      	ands	r2, r3
  400462:	68fb      	ldr	r3, [r7, #12]
  400464:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400466:	e025      	b.n	4004b4 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400468:	68fb      	ldr	r3, [r7, #12]
  40046a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40046c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400472:	687b      	ldr	r3, [r7, #4]
  400474:	43d9      	mvns	r1, r3
  400476:	697b      	ldr	r3, [r7, #20]
  400478:	400b      	ands	r3, r1
  40047a:	401a      	ands	r2, r3
  40047c:	68fb      	ldr	r3, [r7, #12]
  40047e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400480:	68fb      	ldr	r3, [r7, #12]
  400482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400484:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400486:	687a      	ldr	r2, [r7, #4]
  400488:	697b      	ldr	r3, [r7, #20]
  40048a:	431a      	orrs	r2, r3
  40048c:	68fb      	ldr	r3, [r7, #12]
  40048e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400490:	e010      	b.n	4004b4 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400492:	68fb      	ldr	r3, [r7, #12]
  400494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400496:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400498:	687a      	ldr	r2, [r7, #4]
  40049a:	697b      	ldr	r3, [r7, #20]
  40049c:	431a      	orrs	r2, r3
  40049e:	68fb      	ldr	r3, [r7, #12]
  4004a0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004a2:	68fb      	ldr	r3, [r7, #12]
  4004a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4004a6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004a8:	687a      	ldr	r2, [r7, #4]
  4004aa:	697b      	ldr	r3, [r7, #20]
  4004ac:	431a      	orrs	r2, r3
  4004ae:	68fb      	ldr	r3, [r7, #12]
  4004b0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4004b2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	687a      	ldr	r2, [r7, #4]
  4004b8:	605a      	str	r2, [r3, #4]
  4004ba:	e000      	b.n	4004be <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  4004bc:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  4004be:	371c      	adds	r7, #28
  4004c0:	46bd      	mov	sp, r7
  4004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004c6:	4770      	bx	lr

004004c8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4004c8:	b580      	push	{r7, lr}
  4004ca:	b084      	sub	sp, #16
  4004cc:	af00      	add	r7, sp, #0
  4004ce:	60f8      	str	r0, [r7, #12]
  4004d0:	60b9      	str	r1, [r7, #8]
  4004d2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4004d4:	68f8      	ldr	r0, [r7, #12]
  4004d6:	68b9      	ldr	r1, [r7, #8]
  4004d8:	4b18      	ldr	r3, [pc, #96]	; (40053c <pio_set_input+0x74>)
  4004da:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4004dc:	687b      	ldr	r3, [r7, #4]
  4004de:	f003 0301 	and.w	r3, r3, #1
  4004e2:	68f8      	ldr	r0, [r7, #12]
  4004e4:	68b9      	ldr	r1, [r7, #8]
  4004e6:	461a      	mov	r2, r3
  4004e8:	4b15      	ldr	r3, [pc, #84]	; (400540 <pio_set_input+0x78>)
  4004ea:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4004ec:	687b      	ldr	r3, [r7, #4]
  4004ee:	f003 030a 	and.w	r3, r3, #10
  4004f2:	2b00      	cmp	r3, #0
  4004f4:	d003      	beq.n	4004fe <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4004f6:	68fb      	ldr	r3, [r7, #12]
  4004f8:	68ba      	ldr	r2, [r7, #8]
  4004fa:	621a      	str	r2, [r3, #32]
  4004fc:	e002      	b.n	400504 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4004fe:	68fb      	ldr	r3, [r7, #12]
  400500:	68ba      	ldr	r2, [r7, #8]
  400502:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400504:	687b      	ldr	r3, [r7, #4]
  400506:	f003 0302 	and.w	r3, r3, #2
  40050a:	2b00      	cmp	r3, #0
  40050c:	d004      	beq.n	400518 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400516:	e008      	b.n	40052a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400518:	687b      	ldr	r3, [r7, #4]
  40051a:	f003 0308 	and.w	r3, r3, #8
  40051e:	2b00      	cmp	r3, #0
  400520:	d003      	beq.n	40052a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400522:	68fb      	ldr	r3, [r7, #12]
  400524:	68ba      	ldr	r2, [r7, #8]
  400526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40052a:	68fb      	ldr	r3, [r7, #12]
  40052c:	68ba      	ldr	r2, [r7, #8]
  40052e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400530:	68fb      	ldr	r3, [r7, #12]
  400532:	68ba      	ldr	r2, [r7, #8]
  400534:	601a      	str	r2, [r3, #0]
}
  400536:	3710      	adds	r7, #16
  400538:	46bd      	mov	sp, r7
  40053a:	bd80      	pop	{r7, pc}
  40053c:	00400671 	.word	0x00400671
  400540:	00400355 	.word	0x00400355

00400544 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400544:	b580      	push	{r7, lr}
  400546:	b084      	sub	sp, #16
  400548:	af00      	add	r7, sp, #0
  40054a:	60f8      	str	r0, [r7, #12]
  40054c:	60b9      	str	r1, [r7, #8]
  40054e:	607a      	str	r2, [r7, #4]
  400550:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400552:	68f8      	ldr	r0, [r7, #12]
  400554:	68b9      	ldr	r1, [r7, #8]
  400556:	4b12      	ldr	r3, [pc, #72]	; (4005a0 <pio_set_output+0x5c>)
  400558:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40055a:	68f8      	ldr	r0, [r7, #12]
  40055c:	68b9      	ldr	r1, [r7, #8]
  40055e:	69ba      	ldr	r2, [r7, #24]
  400560:	4b10      	ldr	r3, [pc, #64]	; (4005a4 <pio_set_output+0x60>)
  400562:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400564:	683b      	ldr	r3, [r7, #0]
  400566:	2b00      	cmp	r3, #0
  400568:	d003      	beq.n	400572 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40056a:	68fb      	ldr	r3, [r7, #12]
  40056c:	68ba      	ldr	r2, [r7, #8]
  40056e:	651a      	str	r2, [r3, #80]	; 0x50
  400570:	e002      	b.n	400578 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400572:	68fb      	ldr	r3, [r7, #12]
  400574:	68ba      	ldr	r2, [r7, #8]
  400576:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400578:	687b      	ldr	r3, [r7, #4]
  40057a:	2b00      	cmp	r3, #0
  40057c:	d003      	beq.n	400586 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40057e:	68fb      	ldr	r3, [r7, #12]
  400580:	68ba      	ldr	r2, [r7, #8]
  400582:	631a      	str	r2, [r3, #48]	; 0x30
  400584:	e002      	b.n	40058c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	68ba      	ldr	r2, [r7, #8]
  400590:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400592:	68fb      	ldr	r3, [r7, #12]
  400594:	68ba      	ldr	r2, [r7, #8]
  400596:	601a      	str	r2, [r3, #0]
}
  400598:	3710      	adds	r7, #16
  40059a:	46bd      	mov	sp, r7
  40059c:	bd80      	pop	{r7, pc}
  40059e:	bf00      	nop
  4005a0:	00400671 	.word	0x00400671
  4005a4:	00400355 	.word	0x00400355

004005a8 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4005a8:	b590      	push	{r4, r7, lr}
  4005aa:	b087      	sub	sp, #28
  4005ac:	af02      	add	r7, sp, #8
  4005ae:	60f8      	str	r0, [r7, #12]
  4005b0:	60b9      	str	r1, [r7, #8]
  4005b2:	607a      	str	r2, [r7, #4]
  4005b4:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  4005b6:	68bb      	ldr	r3, [r7, #8]
  4005b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005bc:	d016      	beq.n	4005ec <pio_configure+0x44>
  4005be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005c2:	d809      	bhi.n	4005d8 <pio_configure+0x30>
  4005c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005c8:	d010      	beq.n	4005ec <pio_configure+0x44>
  4005ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005ce:	d00d      	beq.n	4005ec <pio_configure+0x44>
  4005d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005d4:	d00a      	beq.n	4005ec <pio_configure+0x44>
  4005d6:	e03b      	b.n	400650 <pio_configure+0xa8>
  4005d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005dc:	d01a      	beq.n	400614 <pio_configure+0x6c>
  4005de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005e2:	d017      	beq.n	400614 <pio_configure+0x6c>
  4005e4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005e8:	d00e      	beq.n	400608 <pio_configure+0x60>
  4005ea:	e031      	b.n	400650 <pio_configure+0xa8>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4005ec:	68f8      	ldr	r0, [r7, #12]
  4005ee:	68b9      	ldr	r1, [r7, #8]
  4005f0:	687a      	ldr	r2, [r7, #4]
  4005f2:	4b1b      	ldr	r3, [pc, #108]	; (400660 <pio_configure+0xb8>)
  4005f4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4005f6:	683b      	ldr	r3, [r7, #0]
  4005f8:	f003 0301 	and.w	r3, r3, #1
  4005fc:	68f8      	ldr	r0, [r7, #12]
  4005fe:	6879      	ldr	r1, [r7, #4]
  400600:	461a      	mov	r2, r3
  400602:	4b18      	ldr	r3, [pc, #96]	; (400664 <pio_configure+0xbc>)
  400604:	4798      	blx	r3
		break;
  400606:	e025      	b.n	400654 <pio_configure+0xac>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400608:	68f8      	ldr	r0, [r7, #12]
  40060a:	6879      	ldr	r1, [r7, #4]
  40060c:	683a      	ldr	r2, [r7, #0]
  40060e:	4b16      	ldr	r3, [pc, #88]	; (400668 <pio_configure+0xc0>)
  400610:	4798      	blx	r3
		break;
  400612:	e01f      	b.n	400654 <pio_configure+0xac>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400614:	68bb      	ldr	r3, [r7, #8]
  400616:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40061a:	bf14      	ite	ne
  40061c:	2300      	movne	r3, #0
  40061e:	2301      	moveq	r3, #1
  400620:	b2db      	uxtb	r3, r3
  400622:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  400624:	683b      	ldr	r3, [r7, #0]
  400626:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40062a:	2b00      	cmp	r3, #0
  40062c:	bf0c      	ite	eq
  40062e:	2300      	moveq	r3, #0
  400630:	2301      	movne	r3, #1
  400632:	b2db      	uxtb	r3, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  400634:	6839      	ldr	r1, [r7, #0]
  400636:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40063a:	2900      	cmp	r1, #0
  40063c:	bf0c      	ite	eq
  40063e:	2100      	moveq	r1, #0
  400640:	2101      	movne	r1, #1
  400642:	b2c9      	uxtb	r1, r1
  400644:	9100      	str	r1, [sp, #0]
  400646:	68f8      	ldr	r0, [r7, #12]
  400648:	6879      	ldr	r1, [r7, #4]
  40064a:	4c08      	ldr	r4, [pc, #32]	; (40066c <pio_configure+0xc4>)
  40064c:	47a0      	blx	r4
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
  40064e:	e001      	b.n	400654 <pio_configure+0xac>

	default:
		return 0;
  400650:	2300      	movs	r3, #0
  400652:	e000      	b.n	400656 <pio_configure+0xae>
	}

	return 1;
  400654:	2301      	movs	r3, #1
}
  400656:	4618      	mov	r0, r3
  400658:	3714      	adds	r7, #20
  40065a:	46bd      	mov	sp, r7
  40065c:	bd90      	pop	{r4, r7, pc}
  40065e:	bf00      	nop
  400660:	004003b9 	.word	0x004003b9
  400664:	00400355 	.word	0x00400355
  400668:	004004c9 	.word	0x004004c9
  40066c:	00400545 	.word	0x00400545

00400670 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400670:	b480      	push	{r7}
  400672:	b083      	sub	sp, #12
  400674:	af00      	add	r7, sp, #0
  400676:	6078      	str	r0, [r7, #4]
  400678:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40067a:	687b      	ldr	r3, [r7, #4]
  40067c:	683a      	ldr	r2, [r7, #0]
  40067e:	645a      	str	r2, [r3, #68]	; 0x44
}
  400680:	370c      	adds	r7, #12
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop

0040068c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40068c:	b480      	push	{r7}
  40068e:	b083      	sub	sp, #12
  400690:	af00      	add	r7, sp, #0
  400692:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400698:	4618      	mov	r0, r3
  40069a:	370c      	adds	r7, #12
  40069c:	46bd      	mov	sp, r7
  40069e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006a2:	4770      	bx	lr

004006a4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4006a4:	b480      	push	{r7}
  4006a6:	b083      	sub	sp, #12
  4006a8:	af00      	add	r7, sp, #0
  4006aa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4006ac:	687b      	ldr	r3, [r7, #4]
  4006ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4006b0:	4618      	mov	r0, r3
  4006b2:	370c      	adds	r7, #12
  4006b4:	46bd      	mov	sp, r7
  4006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ba:	4770      	bx	lr

004006bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006bc:	b580      	push	{r7, lr}
  4006be:	b084      	sub	sp, #16
  4006c0:	af00      	add	r7, sp, #0
  4006c2:	6078      	str	r0, [r7, #4]
  4006c4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006c6:	6878      	ldr	r0, [r7, #4]
  4006c8:	4b26      	ldr	r3, [pc, #152]	; (400764 <pio_handler_process+0xa8>)
  4006ca:	4798      	blx	r3
  4006cc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4006ce:	6878      	ldr	r0, [r7, #4]
  4006d0:	4b25      	ldr	r3, [pc, #148]	; (400768 <pio_handler_process+0xac>)
  4006d2:	4798      	blx	r3
  4006d4:	4603      	mov	r3, r0
  4006d6:	68fa      	ldr	r2, [r7, #12]
  4006d8:	4013      	ands	r3, r2
  4006da:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4006dc:	68fb      	ldr	r3, [r7, #12]
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d03c      	beq.n	40075c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4006e2:	2300      	movs	r3, #0
  4006e4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4006e6:	e036      	b.n	400756 <pio_handler_process+0x9a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4006e8:	4a20      	ldr	r2, [pc, #128]	; (40076c <pio_handler_process+0xb0>)
  4006ea:	68bb      	ldr	r3, [r7, #8]
  4006ec:	011b      	lsls	r3, r3, #4
  4006ee:	4413      	add	r3, r2
  4006f0:	681a      	ldr	r2, [r3, #0]
  4006f2:	683b      	ldr	r3, [r7, #0]
  4006f4:	429a      	cmp	r2, r3
  4006f6:	d127      	bne.n	400748 <pio_handler_process+0x8c>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006f8:	4a1c      	ldr	r2, [pc, #112]	; (40076c <pio_handler_process+0xb0>)
  4006fa:	68bb      	ldr	r3, [r7, #8]
  4006fc:	011b      	lsls	r3, r3, #4
  4006fe:	4413      	add	r3, r2
  400700:	3304      	adds	r3, #4
  400702:	681a      	ldr	r2, [r3, #0]
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	4013      	ands	r3, r2
  400708:	2b00      	cmp	r3, #0
  40070a:	d01d      	beq.n	400748 <pio_handler_process+0x8c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40070c:	4a17      	ldr	r2, [pc, #92]	; (40076c <pio_handler_process+0xb0>)
  40070e:	68bb      	ldr	r3, [r7, #8]
  400710:	011b      	lsls	r3, r3, #4
  400712:	4413      	add	r3, r2
  400714:	330c      	adds	r3, #12
  400716:	681b      	ldr	r3, [r3, #0]
  400718:	4914      	ldr	r1, [pc, #80]	; (40076c <pio_handler_process+0xb0>)
  40071a:	68ba      	ldr	r2, [r7, #8]
  40071c:	0112      	lsls	r2, r2, #4
  40071e:	440a      	add	r2, r1
  400720:	6811      	ldr	r1, [r2, #0]
  400722:	4812      	ldr	r0, [pc, #72]	; (40076c <pio_handler_process+0xb0>)
  400724:	68ba      	ldr	r2, [r7, #8]
  400726:	0112      	lsls	r2, r2, #4
  400728:	4402      	add	r2, r0
  40072a:	3204      	adds	r2, #4
  40072c:	6812      	ldr	r2, [r2, #0]
  40072e:	4608      	mov	r0, r1
  400730:	4611      	mov	r1, r2
  400732:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400734:	4a0d      	ldr	r2, [pc, #52]	; (40076c <pio_handler_process+0xb0>)
  400736:	68bb      	ldr	r3, [r7, #8]
  400738:	011b      	lsls	r3, r3, #4
  40073a:	4413      	add	r3, r2
  40073c:	3304      	adds	r3, #4
  40073e:	681b      	ldr	r3, [r3, #0]
  400740:	43db      	mvns	r3, r3
  400742:	68fa      	ldr	r2, [r7, #12]
  400744:	4013      	ands	r3, r2
  400746:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400748:	68bb      	ldr	r3, [r7, #8]
  40074a:	3301      	adds	r3, #1
  40074c:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40074e:	68bb      	ldr	r3, [r7, #8]
  400750:	2b06      	cmp	r3, #6
  400752:	d900      	bls.n	400756 <pio_handler_process+0x9a>
				break;
  400754:	e002      	b.n	40075c <pio_handler_process+0xa0>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400756:	68fb      	ldr	r3, [r7, #12]
  400758:	2b00      	cmp	r3, #0
  40075a:	d1c5      	bne.n	4006e8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  40075c:	3710      	adds	r7, #16
  40075e:	46bd      	mov	sp, r7
  400760:	bd80      	pop	{r7, pc}
  400762:	bf00      	nop
  400764:	0040068d 	.word	0x0040068d
  400768:	004006a5 	.word	0x004006a5
  40076c:	20000498 	.word	0x20000498

00400770 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400770:	b580      	push	{r7, lr}
  400772:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400774:	4802      	ldr	r0, [pc, #8]	; (400780 <PIOA_Handler+0x10>)
  400776:	210b      	movs	r1, #11
  400778:	4b02      	ldr	r3, [pc, #8]	; (400784 <PIOA_Handler+0x14>)
  40077a:	4798      	blx	r3
}
  40077c:	bd80      	pop	{r7, pc}
  40077e:	bf00      	nop
  400780:	400e0e00 	.word	0x400e0e00
  400784:	004006bd 	.word	0x004006bd

00400788 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400788:	b580      	push	{r7, lr}
  40078a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40078c:	4802      	ldr	r0, [pc, #8]	; (400798 <PIOB_Handler+0x10>)
  40078e:	210c      	movs	r1, #12
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <PIOB_Handler+0x14>)
  400792:	4798      	blx	r3
}
  400794:	bd80      	pop	{r7, pc}
  400796:	bf00      	nop
  400798:	400e1000 	.word	0x400e1000
  40079c:	004006bd 	.word	0x004006bd

004007a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007a0:	b580      	push	{r7, lr}
  4007a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4007a4:	4802      	ldr	r0, [pc, #8]	; (4007b0 <PIOC_Handler+0x10>)
  4007a6:	210d      	movs	r1, #13
  4007a8:	4b02      	ldr	r3, [pc, #8]	; (4007b4 <PIOC_Handler+0x14>)
  4007aa:	4798      	blx	r3
}
  4007ac:	bd80      	pop	{r7, pc}
  4007ae:	bf00      	nop
  4007b0:	400e1200 	.word	0x400e1200
  4007b4:	004006bd 	.word	0x004006bd

004007b8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4007b8:	b580      	push	{r7, lr}
  4007ba:	b082      	sub	sp, #8
  4007bc:	af00      	add	r7, sp, #0
  4007be:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4007c0:	6878      	ldr	r0, [r7, #4]
  4007c2:	4b02      	ldr	r3, [pc, #8]	; (4007cc <sysclk_enable_peripheral_clock+0x14>)
  4007c4:	4798      	blx	r3
}
  4007c6:	3708      	adds	r7, #8
  4007c8:	46bd      	mov	sp, r7
  4007ca:	bd80      	pop	{r7, pc}
  4007cc:	00400ec5 	.word	0x00400ec5

004007d0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4007d0:	b580      	push	{r7, lr}
  4007d2:	b082      	sub	sp, #8
  4007d4:	af00      	add	r7, sp, #0
  4007d6:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
  4007d8:	2015      	movs	r0, #21
  4007da:	4b02      	ldr	r3, [pc, #8]	; (4007e4 <spi_enable_clock+0x14>)
  4007dc:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4007de:	3708      	adds	r7, #8
  4007e0:	46bd      	mov	sp, r7
  4007e2:	bd80      	pop	{r7, pc}
  4007e4:	004007b9 	.word	0x004007b9

004007e8 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4007e8:	b480      	push	{r7}
  4007ea:	b083      	sub	sp, #12
  4007ec:	af00      	add	r7, sp, #0
  4007ee:	6078      	str	r0, [r7, #4]
  4007f0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4007f2:	687b      	ldr	r3, [r7, #4]
  4007f4:	685b      	ldr	r3, [r3, #4]
  4007f6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4007fe:	687b      	ldr	r3, [r7, #4]
  400800:	685a      	ldr	r2, [r3, #4]
  400802:	683b      	ldr	r3, [r7, #0]
  400804:	041b      	lsls	r3, r3, #16
  400806:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40080a:	431a      	orrs	r2, r3
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	605a      	str	r2, [r3, #4]
}
  400810:	370c      	adds	r7, #12
  400812:	46bd      	mov	sp, r7
  400814:	f85d 7b04 	ldr.w	r7, [sp], #4
  400818:	4770      	bx	lr
  40081a:	bf00      	nop

0040081c <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
  40081c:	b480      	push	{r7}
  40081e:	b083      	sub	sp, #12
  400820:	af00      	add	r7, sp, #0
  400822:	6078      	str	r0, [r7, #4]
  400824:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400826:	687b      	ldr	r3, [r7, #4]
  400828:	685b      	ldr	r3, [r3, #4]
  40082a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  40082e:	687b      	ldr	r3, [r7, #4]
  400830:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400832:	687b      	ldr	r3, [r7, #4]
  400834:	685a      	ldr	r2, [r3, #4]
  400836:	683b      	ldr	r3, [r7, #0]
  400838:	061b      	lsls	r3, r3, #24
  40083a:	431a      	orrs	r2, r3
  40083c:	687b      	ldr	r3, [r7, #4]
  40083e:	605a      	str	r2, [r3, #4]
}
  400840:	370c      	adds	r7, #12
  400842:	46bd      	mov	sp, r7
  400844:	f85d 7b04 	ldr.w	r7, [sp], #4
  400848:	4770      	bx	lr
  40084a:	bf00      	nop

0040084c <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  40084c:	b480      	push	{r7}
  40084e:	b083      	sub	sp, #12
  400850:	af00      	add	r7, sp, #0
  400852:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400854:	687b      	ldr	r3, [r7, #4]
  400856:	2208      	movs	r2, #8
  400858:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40085a:	687b      	ldr	r3, [r7, #4]
  40085c:	2220      	movs	r2, #32
  40085e:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	2204      	movs	r2, #4
  400864:	601a      	str	r2, [r3, #0]
}
  400866:	370c      	adds	r7, #12
  400868:	46bd      	mov	sp, r7
  40086a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40086e:	4770      	bx	lr

00400870 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400870:	b580      	push	{r7, lr}
  400872:	b084      	sub	sp, #16
  400874:	af00      	add	r7, sp, #0
  400876:	6078      	str	r0, [r7, #4]
  400878:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  40087a:	2300      	movs	r3, #0
  40087c:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40087e:	687b      	ldr	r3, [r7, #4]
  400880:	f04f 32ff 	mov.w	r2, #4294967295
  400884:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400886:	687b      	ldr	r3, [r7, #4]
  400888:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  40088a:	6878      	ldr	r0, [r7, #4]
  40088c:	4b0f      	ldr	r3, [pc, #60]	; (4008cc <twi_master_init+0x5c>)
  40088e:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400890:	6878      	ldr	r0, [r7, #4]
  400892:	4b0f      	ldr	r3, [pc, #60]	; (4008d0 <twi_master_init+0x60>)
  400894:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400896:	683b      	ldr	r3, [r7, #0]
  400898:	685a      	ldr	r2, [r3, #4]
  40089a:	683b      	ldr	r3, [r7, #0]
  40089c:	681b      	ldr	r3, [r3, #0]
  40089e:	6878      	ldr	r0, [r7, #4]
  4008a0:	4611      	mov	r1, r2
  4008a2:	461a      	mov	r2, r3
  4008a4:	4b0b      	ldr	r3, [pc, #44]	; (4008d4 <twi_master_init+0x64>)
  4008a6:	4798      	blx	r3
  4008a8:	4603      	mov	r3, r0
  4008aa:	2b01      	cmp	r3, #1
  4008ac:	d101      	bne.n	4008b2 <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4008ae:	2301      	movs	r3, #1
  4008b0:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4008b2:	683b      	ldr	r3, [r7, #0]
  4008b4:	7a5b      	ldrb	r3, [r3, #9]
  4008b6:	2b01      	cmp	r3, #1
  4008b8:	d102      	bne.n	4008c0 <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	2240      	movs	r2, #64	; 0x40
  4008be:	601a      	str	r2, [r3, #0]
	}

	return status;
  4008c0:	68fb      	ldr	r3, [r7, #12]
}
  4008c2:	4618      	mov	r0, r3
  4008c4:	3710      	adds	r7, #16
  4008c6:	46bd      	mov	sp, r7
  4008c8:	bd80      	pop	{r7, pc}
  4008ca:	bf00      	nop
  4008cc:	00400949 	.word	0x00400949
  4008d0:	0040084d 	.word	0x0040084d
  4008d4:	004008d9 	.word	0x004008d9

004008d8 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4008d8:	b480      	push	{r7}
  4008da:	b087      	sub	sp, #28
  4008dc:	af00      	add	r7, sp, #0
  4008de:	60f8      	str	r0, [r7, #12]
  4008e0:	60b9      	str	r1, [r7, #8]
  4008e2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4008e4:	2300      	movs	r3, #0
  4008e6:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4008e8:	68ba      	ldr	r2, [r7, #8]
  4008ea:	4b16      	ldr	r3, [pc, #88]	; (400944 <twi_set_speed+0x6c>)
  4008ec:	429a      	cmp	r2, r3
  4008ee:	d901      	bls.n	4008f4 <twi_set_speed+0x1c>
		return FAIL;
  4008f0:	2301      	movs	r3, #1
  4008f2:	e021      	b.n	400938 <twi_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4008f4:	68bb      	ldr	r3, [r7, #8]
  4008f6:	005b      	lsls	r3, r3, #1
  4008f8:	687a      	ldr	r2, [r7, #4]
  4008fa:	fbb2 f3f3 	udiv	r3, r2, r3
  4008fe:	3b04      	subs	r3, #4
  400900:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400902:	e005      	b.n	400910 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  400904:	697b      	ldr	r3, [r7, #20]
  400906:	3301      	adds	r3, #1
  400908:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  40090a:	693b      	ldr	r3, [r7, #16]
  40090c:	085b      	lsrs	r3, r3, #1
  40090e:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400910:	693b      	ldr	r3, [r7, #16]
  400912:	2bff      	cmp	r3, #255	; 0xff
  400914:	d902      	bls.n	40091c <twi_set_speed+0x44>
  400916:	697b      	ldr	r3, [r7, #20]
  400918:	2b06      	cmp	r3, #6
  40091a:	d9f3      	bls.n	400904 <twi_set_speed+0x2c>
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40091c:	693b      	ldr	r3, [r7, #16]
  40091e:	b2da      	uxtb	r2, r3
  400920:	693b      	ldr	r3, [r7, #16]
  400922:	021b      	lsls	r3, r3, #8
  400924:	b29b      	uxth	r3, r3
  400926:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
  400928:	697b      	ldr	r3, [r7, #20]
  40092a:	041b      	lsls	r3, r3, #16
  40092c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400930:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400936:	2300      	movs	r3, #0
}
  400938:	4618      	mov	r0, r3
  40093a:	371c      	adds	r7, #28
  40093c:	46bd      	mov	sp, r7
  40093e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400942:	4770      	bx	lr
  400944:	00061a80 	.word	0x00061a80

00400948 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400948:	b480      	push	{r7}
  40094a:	b083      	sub	sp, #12
  40094c:	af00      	add	r7, sp, #0
  40094e:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400950:	687b      	ldr	r3, [r7, #4]
  400952:	2280      	movs	r2, #128	; 0x80
  400954:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40095a:	370c      	adds	r7, #12
  40095c:	46bd      	mov	sp, r7
  40095e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400962:	4770      	bx	lr

00400964 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400964:	b580      	push	{r7, lr}
  400966:	b082      	sub	sp, #8
  400968:	af00      	add	r7, sp, #0
  40096a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	2b07      	cmp	r3, #7
  400970:	d830      	bhi.n	4009d4 <osc_enable+0x70>
  400972:	a201      	add	r2, pc, #4	; (adr r2, 400978 <osc_enable+0x14>)
  400974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400978:	004009d5 	.word	0x004009d5
  40097c:	00400999 	.word	0x00400999
  400980:	004009a1 	.word	0x004009a1
  400984:	004009a9 	.word	0x004009a9
  400988:	004009b1 	.word	0x004009b1
  40098c:	004009b9 	.word	0x004009b9
  400990:	004009c1 	.word	0x004009c1
  400994:	004009cb 	.word	0x004009cb
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400998:	2000      	movs	r0, #0
  40099a:	4b10      	ldr	r3, [pc, #64]	; (4009dc <osc_enable+0x78>)
  40099c:	4798      	blx	r3
		break;
  40099e:	e019      	b.n	4009d4 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4009a0:	2001      	movs	r0, #1
  4009a2:	4b0e      	ldr	r3, [pc, #56]	; (4009dc <osc_enable+0x78>)
  4009a4:	4798      	blx	r3
		break;
  4009a6:	e015      	b.n	4009d4 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4009a8:	2000      	movs	r0, #0
  4009aa:	4b0d      	ldr	r3, [pc, #52]	; (4009e0 <osc_enable+0x7c>)
  4009ac:	4798      	blx	r3
		break;
  4009ae:	e011      	b.n	4009d4 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4009b0:	2010      	movs	r0, #16
  4009b2:	4b0b      	ldr	r3, [pc, #44]	; (4009e0 <osc_enable+0x7c>)
  4009b4:	4798      	blx	r3
		break;
  4009b6:	e00d      	b.n	4009d4 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4009b8:	2020      	movs	r0, #32
  4009ba:	4b09      	ldr	r3, [pc, #36]	; (4009e0 <osc_enable+0x7c>)
  4009bc:	4798      	blx	r3
		break;
  4009be:	e009      	b.n	4009d4 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4009c0:	2000      	movs	r0, #0
  4009c2:	213e      	movs	r1, #62	; 0x3e
  4009c4:	4b07      	ldr	r3, [pc, #28]	; (4009e4 <osc_enable+0x80>)
  4009c6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4009c8:	e004      	b.n	4009d4 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4009ca:	2001      	movs	r0, #1
  4009cc:	213e      	movs	r1, #62	; 0x3e
  4009ce:	4b05      	ldr	r3, [pc, #20]	; (4009e4 <osc_enable+0x80>)
  4009d0:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4009d2:	bf00      	nop
	}
}
  4009d4:	3708      	adds	r7, #8
  4009d6:	46bd      	mov	sp, r7
  4009d8:	bd80      	pop	{r7, pc}
  4009da:	bf00      	nop
  4009dc:	00400d21 	.word	0x00400d21
  4009e0:	00400d8d 	.word	0x00400d8d
  4009e4:	00400dfd 	.word	0x00400dfd

004009e8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4009e8:	b580      	push	{r7, lr}
  4009ea:	b082      	sub	sp, #8
  4009ec:	af00      	add	r7, sp, #0
  4009ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	2b07      	cmp	r3, #7
  4009f4:	d826      	bhi.n	400a44 <osc_is_ready+0x5c>
  4009f6:	a201      	add	r2, pc, #4	; (adr r2, 4009fc <osc_is_ready+0x14>)
  4009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009fc:	00400a1d 	.word	0x00400a1d
  400a00:	00400a21 	.word	0x00400a21
  400a04:	00400a21 	.word	0x00400a21
  400a08:	00400a33 	.word	0x00400a33
  400a0c:	00400a33 	.word	0x00400a33
  400a10:	00400a33 	.word	0x00400a33
  400a14:	00400a33 	.word	0x00400a33
  400a18:	00400a33 	.word	0x00400a33
	case OSC_SLCK_32K_RC:
		return 1;
  400a1c:	2301      	movs	r3, #1
  400a1e:	e012      	b.n	400a46 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400a20:	4b0b      	ldr	r3, [pc, #44]	; (400a50 <osc_is_ready+0x68>)
  400a22:	4798      	blx	r3
  400a24:	4603      	mov	r3, r0
  400a26:	2b00      	cmp	r3, #0
  400a28:	bf0c      	ite	eq
  400a2a:	2300      	moveq	r3, #0
  400a2c:	2301      	movne	r3, #1
  400a2e:	b2db      	uxtb	r3, r3
  400a30:	e009      	b.n	400a46 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a32:	4b08      	ldr	r3, [pc, #32]	; (400a54 <osc_is_ready+0x6c>)
  400a34:	4798      	blx	r3
  400a36:	4603      	mov	r3, r0
  400a38:	2b00      	cmp	r3, #0
  400a3a:	bf0c      	ite	eq
  400a3c:	2300      	moveq	r3, #0
  400a3e:	2301      	movne	r3, #1
  400a40:	b2db      	uxtb	r3, r3
  400a42:	e000      	b.n	400a46 <osc_is_ready+0x5e>
	}

	return 0;
  400a44:	2300      	movs	r3, #0
}
  400a46:	4618      	mov	r0, r3
  400a48:	3708      	adds	r7, #8
  400a4a:	46bd      	mov	sp, r7
  400a4c:	bd80      	pop	{r7, pc}
  400a4e:	bf00      	nop
  400a50:	00400d59 	.word	0x00400d59
  400a54:	00400e75 	.word	0x00400e75

00400a58 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400a58:	b480      	push	{r7}
  400a5a:	b083      	sub	sp, #12
  400a5c:	af00      	add	r7, sp, #0
  400a5e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a60:	687b      	ldr	r3, [r7, #4]
  400a62:	2b07      	cmp	r3, #7
  400a64:	d825      	bhi.n	400ab2 <osc_get_rate+0x5a>
  400a66:	a201      	add	r2, pc, #4	; (adr r2, 400a6c <osc_get_rate+0x14>)
  400a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a6c:	00400a8d 	.word	0x00400a8d
  400a70:	00400a93 	.word	0x00400a93
  400a74:	00400a99 	.word	0x00400a99
  400a78:	00400a9f 	.word	0x00400a9f
  400a7c:	00400aa3 	.word	0x00400aa3
  400a80:	00400aa7 	.word	0x00400aa7
  400a84:	00400aab 	.word	0x00400aab
  400a88:	00400aaf 	.word	0x00400aaf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400a8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400a90:	e010      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a96:	e00d      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a9c:	e00a      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400a9e:	4b08      	ldr	r3, [pc, #32]	; (400ac0 <osc_get_rate+0x68>)
  400aa0:	e008      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400aa2:	4b08      	ldr	r3, [pc, #32]	; (400ac4 <osc_get_rate+0x6c>)
  400aa4:	e006      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400aa6:	4b08      	ldr	r3, [pc, #32]	; (400ac8 <osc_get_rate+0x70>)
  400aa8:	e004      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400aaa:	4b07      	ldr	r3, [pc, #28]	; (400ac8 <osc_get_rate+0x70>)
  400aac:	e002      	b.n	400ab4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400aae:	4b06      	ldr	r3, [pc, #24]	; (400ac8 <osc_get_rate+0x70>)
  400ab0:	e000      	b.n	400ab4 <osc_get_rate+0x5c>
	}

	return 0;
  400ab2:	2300      	movs	r3, #0
}
  400ab4:	4618      	mov	r0, r3
  400ab6:	370c      	adds	r7, #12
  400ab8:	46bd      	mov	sp, r7
  400aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  400abe:	4770      	bx	lr
  400ac0:	003d0900 	.word	0x003d0900
  400ac4:	007a1200 	.word	0x007a1200
  400ac8:	00b71b00 	.word	0x00b71b00

00400acc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400acc:	b580      	push	{r7, lr}
  400ace:	b082      	sub	sp, #8
  400ad0:	af00      	add	r7, sp, #0
  400ad2:	4603      	mov	r3, r0
  400ad4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400ad6:	bf00      	nop
  400ad8:	79fb      	ldrb	r3, [r7, #7]
  400ada:	4618      	mov	r0, r3
  400adc:	4b05      	ldr	r3, [pc, #20]	; (400af4 <osc_wait_ready+0x28>)
  400ade:	4798      	blx	r3
  400ae0:	4603      	mov	r3, r0
  400ae2:	f083 0301 	eor.w	r3, r3, #1
  400ae6:	b2db      	uxtb	r3, r3
  400ae8:	2b00      	cmp	r3, #0
  400aea:	d1f5      	bne.n	400ad8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400aec:	3708      	adds	r7, #8
  400aee:	46bd      	mov	sp, r7
  400af0:	bd80      	pop	{r7, pc}
  400af2:	bf00      	nop
  400af4:	004009e9 	.word	0x004009e9

00400af8 <pll_config_init>:
 * \note The SAM4N PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400af8:	b580      	push	{r7, lr}
  400afa:	b086      	sub	sp, #24
  400afc:	af00      	add	r7, sp, #0
  400afe:	60f8      	str	r0, [r7, #12]
  400b00:	607a      	str	r2, [r7, #4]
  400b02:	603b      	str	r3, [r7, #0]
  400b04:	460b      	mov	r3, r1
  400b06:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400b08:	7afb      	ldrb	r3, [r7, #11]
  400b0a:	4618      	mov	r0, r3
  400b0c:	4b0d      	ldr	r3, [pc, #52]	; (400b44 <pll_config_init+0x4c>)
  400b0e:	4798      	blx	r3
  400b10:	4602      	mov	r2, r0
  400b12:	687b      	ldr	r3, [r7, #4]
  400b14:	fbb2 f3f3 	udiv	r3, r2, r3
  400b18:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400b1a:	697b      	ldr	r3, [r7, #20]
  400b1c:	683a      	ldr	r2, [r7, #0]
  400b1e:	fb02 f303 	mul.w	r3, r2, r3
  400b22:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400b24:	683b      	ldr	r3, [r7, #0]
  400b26:	3b01      	subs	r3, #1
  400b28:	041a      	lsls	r2, r3, #16
  400b2a:	4b07      	ldr	r3, [pc, #28]	; (400b48 <pll_config_init+0x50>)
  400b2c:	4013      	ands	r3, r2
  400b2e:	687a      	ldr	r2, [r7, #4]
  400b30:	b2d2      	uxtb	r2, r2
  400b32:	4313      	orrs	r3, r2
  400b34:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400b38:	68fb      	ldr	r3, [r7, #12]
  400b3a:	601a      	str	r2, [r3, #0]
}
  400b3c:	3718      	adds	r7, #24
  400b3e:	46bd      	mov	sp, r7
  400b40:	bd80      	pop	{r7, pc}
  400b42:	bf00      	nop
  400b44:	00400a59 	.word	0x00400a59
  400b48:	07ff0000 	.word	0x07ff0000

00400b4c <pll_enable>:
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400b4c:	b580      	push	{r7, lr}
  400b4e:	b082      	sub	sp, #8
  400b50:	af00      	add	r7, sp, #0
  400b52:	6078      	str	r0, [r7, #4]
  400b54:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b56:	683b      	ldr	r3, [r7, #0]
  400b58:	2b00      	cmp	r3, #0
  400b5a:	d107      	bne.n	400b6c <pll_enable+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
  400b5c:	4b05      	ldr	r3, [pc, #20]	; (400b74 <pll_enable+0x28>)
  400b5e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b60:	4b05      	ldr	r3, [pc, #20]	; (400b78 <pll_enable+0x2c>)
  400b62:	687a      	ldr	r2, [r7, #4]
  400b64:	6812      	ldr	r2, [r2, #0]
  400b66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400b6a:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
  400b6c:	3708      	adds	r7, #8
  400b6e:	46bd      	mov	sp, r7
  400b70:	bd80      	pop	{r7, pc}
  400b72:	bf00      	nop
  400b74:	00400e91 	.word	0x00400e91
  400b78:	400e0400 	.word	0x400e0400

00400b7c <pll_is_locked>:
		pmc_disable_pllack();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400b7c:	b580      	push	{r7, lr}
  400b7e:	b082      	sub	sp, #8
  400b80:	af00      	add	r7, sp, #0
  400b82:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b84:	687b      	ldr	r3, [r7, #4]
  400b86:	2b00      	cmp	r3, #0
  400b88:	d103      	bne.n	400b92 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400b8a:	4b04      	ldr	r3, [pc, #16]	; (400b9c <pll_is_locked+0x20>)
  400b8c:	4798      	blx	r3
  400b8e:	4603      	mov	r3, r0
  400b90:	e000      	b.n	400b94 <pll_is_locked+0x18>
	}
	else {
		return 0;
  400b92:	2300      	movs	r3, #0
	}
}
  400b94:	4618      	mov	r0, r3
  400b96:	3708      	adds	r7, #8
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	00400ea9 	.word	0x00400ea9

00400ba0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400ba0:	b580      	push	{r7, lr}
  400ba2:	b082      	sub	sp, #8
  400ba4:	af00      	add	r7, sp, #0
  400ba6:	4603      	mov	r3, r0
  400ba8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400baa:	79fb      	ldrb	r3, [r7, #7]
  400bac:	3b04      	subs	r3, #4
  400bae:	2b03      	cmp	r3, #3
  400bb0:	d808      	bhi.n	400bc4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400bb2:	79fb      	ldrb	r3, [r7, #7]
  400bb4:	4618      	mov	r0, r3
  400bb6:	4b05      	ldr	r3, [pc, #20]	; (400bcc <pll_enable_source+0x2c>)
  400bb8:	4798      	blx	r3
		osc_wait_ready(e_src);
  400bba:	79fb      	ldrb	r3, [r7, #7]
  400bbc:	4618      	mov	r0, r3
  400bbe:	4b04      	ldr	r3, [pc, #16]	; (400bd0 <pll_enable_source+0x30>)
  400bc0:	4798      	blx	r3
		break;
  400bc2:	e000      	b.n	400bc6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400bc4:	bf00      	nop
	}
}
  400bc6:	3708      	adds	r7, #8
  400bc8:	46bd      	mov	sp, r7
  400bca:	bd80      	pop	{r7, pc}
  400bcc:	00400965 	.word	0x00400965
  400bd0:	00400acd 	.word	0x00400acd

00400bd4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400bd4:	b580      	push	{r7, lr}
  400bd6:	b082      	sub	sp, #8
  400bd8:	af00      	add	r7, sp, #0
  400bda:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400bdc:	bf00      	nop
  400bde:	6878      	ldr	r0, [r7, #4]
  400be0:	4b04      	ldr	r3, [pc, #16]	; (400bf4 <pll_wait_for_lock+0x20>)
  400be2:	4798      	blx	r3
  400be4:	4603      	mov	r3, r0
  400be6:	2b00      	cmp	r3, #0
  400be8:	d0f9      	beq.n	400bde <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400bea:	2300      	movs	r3, #0
}
  400bec:	4618      	mov	r0, r3
  400bee:	3708      	adds	r7, #8
  400bf0:	46bd      	mov	sp, r7
  400bf2:	bd80      	pop	{r7, pc}
  400bf4:	00400b7d 	.word	0x00400b7d

00400bf8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400bf8:	b580      	push	{r7, lr}
  400bfa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400bfc:	2004      	movs	r0, #4
  400bfe:	4b05      	ldr	r3, [pc, #20]	; (400c14 <sysclk_get_main_hz+0x1c>)
  400c00:	4798      	blx	r3
  400c02:	4602      	mov	r2, r0
  400c04:	4613      	mov	r3, r2
  400c06:	009b      	lsls	r3, r3, #2
  400c08:	4413      	add	r3, r2
  400c0a:	009a      	lsls	r2, r3, #2
  400c0c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400c0e:	4618      	mov	r0, r3
  400c10:	bd80      	pop	{r7, pc}
  400c12:	bf00      	nop
  400c14:	00400a59 	.word	0x00400a59

00400c18 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400c18:	b580      	push	{r7, lr}
  400c1a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400c1c:	4b02      	ldr	r3, [pc, #8]	; (400c28 <sysclk_get_cpu_hz+0x10>)
  400c1e:	4798      	blx	r3
  400c20:	4603      	mov	r3, r0
  400c22:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400c24:	4618      	mov	r0, r3
  400c26:	bd80      	pop	{r7, pc}
  400c28:	00400bf9 	.word	0x00400bf9

00400c2c <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400c2c:	b590      	push	{r4, r7, lr}
  400c2e:	b083      	sub	sp, #12
  400c30:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c32:	4811      	ldr	r0, [pc, #68]	; (400c78 <sysclk_init+0x4c>)
  400c34:	4b11      	ldr	r3, [pc, #68]	; (400c7c <sysclk_init+0x50>)
  400c36:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400c38:	2004      	movs	r0, #4
  400c3a:	4b11      	ldr	r3, [pc, #68]	; (400c80 <sysclk_init+0x54>)
  400c3c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400c3e:	1d3b      	adds	r3, r7, #4
  400c40:	4618      	mov	r0, r3
  400c42:	2104      	movs	r1, #4
  400c44:	2201      	movs	r2, #1
  400c46:	2319      	movs	r3, #25
  400c48:	4c0e      	ldr	r4, [pc, #56]	; (400c84 <sysclk_init+0x58>)
  400c4a:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400c4c:	1d3b      	adds	r3, r7, #4
  400c4e:	4618      	mov	r0, r3
  400c50:	2100      	movs	r1, #0
  400c52:	4b0d      	ldr	r3, [pc, #52]	; (400c88 <sysclk_init+0x5c>)
  400c54:	4798      	blx	r3
		pll_wait_for_lock(0);
  400c56:	2000      	movs	r0, #0
  400c58:	4b0c      	ldr	r3, [pc, #48]	; (400c8c <sysclk_init+0x60>)
  400c5a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c5c:	2010      	movs	r0, #16
  400c5e:	4b0c      	ldr	r3, [pc, #48]	; (400c90 <sysclk_init+0x64>)
  400c60:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c62:	4b0c      	ldr	r3, [pc, #48]	; (400c94 <sysclk_init+0x68>)
  400c64:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c66:	4b0c      	ldr	r3, [pc, #48]	; (400c98 <sysclk_init+0x6c>)
  400c68:	4798      	blx	r3
  400c6a:	4603      	mov	r3, r0
  400c6c:	4618      	mov	r0, r3
  400c6e:	4b03      	ldr	r3, [pc, #12]	; (400c7c <sysclk_init+0x50>)
  400c70:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400c72:	370c      	adds	r7, #12
  400c74:	46bd      	mov	sp, r7
  400c76:	bd90      	pop	{r4, r7, pc}
  400c78:	05f5e100 	.word	0x05f5e100
  400c7c:	00401439 	.word	0x00401439
  400c80:	00400ba1 	.word	0x00400ba1
  400c84:	00400af9 	.word	0x00400af9
  400c88:	00400b4d 	.word	0x00400b4d
  400c8c:	00400bd5 	.word	0x00400bd5
  400c90:	00400c9d 	.word	0x00400c9d
  400c94:	004012d1 	.word	0x004012d1
  400c98:	00400c19 	.word	0x00400c19

00400c9c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400c9c:	b480      	push	{r7}
  400c9e:	b085      	sub	sp, #20
  400ca0:	af00      	add	r7, sp, #0
  400ca2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ca4:	4b1d      	ldr	r3, [pc, #116]	; (400d1c <pmc_switch_mck_to_pllack+0x80>)
  400ca6:	4a1d      	ldr	r2, [pc, #116]	; (400d1c <pmc_switch_mck_to_pllack+0x80>)
  400ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400caa:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  400cae:	687a      	ldr	r2, [r7, #4]
  400cb0:	430a      	orrs	r2, r1
  400cb2:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400cb8:	60fb      	str	r3, [r7, #12]
  400cba:	e007      	b.n	400ccc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400cbc:	68fb      	ldr	r3, [r7, #12]
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d101      	bne.n	400cc6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400cc2:	2301      	movs	r3, #1
  400cc4:	e023      	b.n	400d0e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400cc6:	68fb      	ldr	r3, [r7, #12]
  400cc8:	3b01      	subs	r3, #1
  400cca:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ccc:	4b13      	ldr	r3, [pc, #76]	; (400d1c <pmc_switch_mck_to_pllack+0x80>)
  400cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cd0:	f003 0308 	and.w	r3, r3, #8
  400cd4:	2b00      	cmp	r3, #0
  400cd6:	d0f1      	beq.n	400cbc <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400cd8:	4b10      	ldr	r3, [pc, #64]	; (400d1c <pmc_switch_mck_to_pllack+0x80>)
  400cda:	4a10      	ldr	r2, [pc, #64]	; (400d1c <pmc_switch_mck_to_pllack+0x80>)
  400cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400cde:	f022 0203 	bic.w	r2, r2, #3
  400ce2:	f042 0202 	orr.w	r2, r2, #2
  400ce6:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400cec:	60fb      	str	r3, [r7, #12]
  400cee:	e007      	b.n	400d00 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400cf0:	68fb      	ldr	r3, [r7, #12]
  400cf2:	2b00      	cmp	r3, #0
  400cf4:	d101      	bne.n	400cfa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400cf6:	2301      	movs	r3, #1
  400cf8:	e009      	b.n	400d0e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400cfa:	68fb      	ldr	r3, [r7, #12]
  400cfc:	3b01      	subs	r3, #1
  400cfe:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d00:	4b06      	ldr	r3, [pc, #24]	; (400d1c <pmc_switch_mck_to_pllack+0x80>)
  400d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d04:	f003 0308 	and.w	r3, r3, #8
  400d08:	2b00      	cmp	r3, #0
  400d0a:	d0f1      	beq.n	400cf0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400d0c:	2300      	movs	r3, #0
}
  400d0e:	4618      	mov	r0, r3
  400d10:	3714      	adds	r7, #20
  400d12:	46bd      	mov	sp, r7
  400d14:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d18:	4770      	bx	lr
  400d1a:	bf00      	nop
  400d1c:	400e0400 	.word	0x400e0400

00400d20 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400d20:	b480      	push	{r7}
  400d22:	b083      	sub	sp, #12
  400d24:	af00      	add	r7, sp, #0
  400d26:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	2b01      	cmp	r3, #1
  400d2c:	d107      	bne.n	400d3e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400d2e:	4a08      	ldr	r2, [pc, #32]	; (400d50 <pmc_switch_sclk_to_32kxtal+0x30>)
  400d30:	4b07      	ldr	r3, [pc, #28]	; (400d50 <pmc_switch_sclk_to_32kxtal+0x30>)
  400d32:	689b      	ldr	r3, [r3, #8]
  400d34:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400d3c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400d3e:	4b04      	ldr	r3, [pc, #16]	; (400d50 <pmc_switch_sclk_to_32kxtal+0x30>)
  400d40:	4a04      	ldr	r2, [pc, #16]	; (400d54 <pmc_switch_sclk_to_32kxtal+0x34>)
  400d42:	601a      	str	r2, [r3, #0]
}
  400d44:	370c      	adds	r7, #12
  400d46:	46bd      	mov	sp, r7
  400d48:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d4c:	4770      	bx	lr
  400d4e:	bf00      	nop
  400d50:	400e1410 	.word	0x400e1410
  400d54:	a5000008 	.word	0xa5000008

00400d58 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400d58:	b480      	push	{r7}
  400d5a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400d5c:	4b09      	ldr	r3, [pc, #36]	; (400d84 <pmc_osc_is_ready_32kxtal+0x2c>)
  400d5e:	695b      	ldr	r3, [r3, #20]
  400d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400d64:	2b00      	cmp	r3, #0
  400d66:	d007      	beq.n	400d78 <pmc_osc_is_ready_32kxtal+0x20>
  400d68:	4b07      	ldr	r3, [pc, #28]	; (400d88 <pmc_osc_is_ready_32kxtal+0x30>)
  400d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400d70:	2b00      	cmp	r3, #0
  400d72:	d001      	beq.n	400d78 <pmc_osc_is_ready_32kxtal+0x20>
  400d74:	2301      	movs	r3, #1
  400d76:	e000      	b.n	400d7a <pmc_osc_is_ready_32kxtal+0x22>
  400d78:	2300      	movs	r3, #0
}
  400d7a:	4618      	mov	r0, r3
  400d7c:	46bd      	mov	sp, r7
  400d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d82:	4770      	bx	lr
  400d84:	400e1410 	.word	0x400e1410
  400d88:	400e0400 	.word	0x400e0400

00400d8c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400d8c:	b480      	push	{r7}
  400d8e:	b083      	sub	sp, #12
  400d90:	af00      	add	r7, sp, #0
  400d92:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400d94:	4a18      	ldr	r2, [pc, #96]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400d96:	4b18      	ldr	r3, [pc, #96]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400d98:	6a1b      	ldr	r3, [r3, #32]
  400d9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d9e:	f043 0308 	orr.w	r3, r3, #8
  400da2:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400da4:	bf00      	nop
  400da6:	4b14      	ldr	r3, [pc, #80]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400dae:	2b00      	cmp	r3, #0
  400db0:	d0f9      	beq.n	400da6 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400db2:	4a11      	ldr	r2, [pc, #68]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400db4:	4b10      	ldr	r3, [pc, #64]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400db6:	6a1b      	ldr	r3, [r3, #32]
  400db8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400dc0:	6879      	ldr	r1, [r7, #4]
  400dc2:	430b      	orrs	r3, r1
  400dc4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400dc8:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400dca:	bf00      	nop
  400dcc:	4b0a      	ldr	r3, [pc, #40]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400dd4:	2b00      	cmp	r3, #0
  400dd6:	d0f9      	beq.n	400dcc <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400dd8:	4a07      	ldr	r2, [pc, #28]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400dda:	4b07      	ldr	r3, [pc, #28]	; (400df8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400ddc:	6a1b      	ldr	r3, [r3, #32]
  400dde:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400de6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400dea:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400dec:	370c      	adds	r7, #12
  400dee:	46bd      	mov	sp, r7
  400df0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df4:	4770      	bx	lr
  400df6:	bf00      	nop
  400df8:	400e0400 	.word	0x400e0400

00400dfc <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400dfc:	b480      	push	{r7}
  400dfe:	b083      	sub	sp, #12
  400e00:	af00      	add	r7, sp, #0
  400e02:	6078      	str	r0, [r7, #4]
  400e04:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e06:	687b      	ldr	r3, [r7, #4]
  400e08:	2b00      	cmp	r3, #0
  400e0a:	d008      	beq.n	400e1e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e0c:	4916      	ldr	r1, [pc, #88]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e0e:	4b16      	ldr	r3, [pc, #88]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e10:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e12:	4a16      	ldr	r2, [pc, #88]	; (400e6c <pmc_switch_mainck_to_xtal+0x70>)
  400e14:	401a      	ands	r2, r3
  400e16:	4b16      	ldr	r3, [pc, #88]	; (400e70 <pmc_switch_mainck_to_xtal+0x74>)
  400e18:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e1a:	620b      	str	r3, [r1, #32]
  400e1c:	e01e      	b.n	400e5c <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e1e:	4a12      	ldr	r2, [pc, #72]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e20:	4b11      	ldr	r3, [pc, #68]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e22:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e24:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400e28:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e2c:	6839      	ldr	r1, [r7, #0]
  400e2e:	0209      	lsls	r1, r1, #8
  400e30:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e32:	430b      	orrs	r3, r1
  400e34:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e38:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e3c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e3e:	bf00      	nop
  400e40:	4b09      	ldr	r3, [pc, #36]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e44:	f003 0301 	and.w	r3, r3, #1
  400e48:	2b00      	cmp	r3, #0
  400e4a:	d0f9      	beq.n	400e40 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e4c:	4a06      	ldr	r2, [pc, #24]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e4e:	4b06      	ldr	r3, [pc, #24]	; (400e68 <pmc_switch_mainck_to_xtal+0x6c>)
  400e50:	6a1b      	ldr	r3, [r3, #32]
  400e52:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e5a:	6213      	str	r3, [r2, #32]
	}
}
  400e5c:	370c      	adds	r7, #12
  400e5e:	46bd      	mov	sp, r7
  400e60:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	400e0400 	.word	0x400e0400
  400e6c:	fec8fffc 	.word	0xfec8fffc
  400e70:	01370002 	.word	0x01370002

00400e74 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400e74:	b480      	push	{r7}
  400e76:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e78:	4b04      	ldr	r3, [pc, #16]	; (400e8c <pmc_osc_is_ready_mainck+0x18>)
  400e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400e80:	4618      	mov	r0, r3
  400e82:	46bd      	mov	sp, r7
  400e84:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop
  400e8c:	400e0400 	.word	0x400e0400

00400e90 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400e90:	b480      	push	{r7}
  400e92:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e94:	4b03      	ldr	r3, [pc, #12]	; (400ea4 <pmc_disable_pllack+0x14>)
  400e96:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400e9c:	46bd      	mov	sp, r7
  400e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea2:	4770      	bx	lr
  400ea4:	400e0400 	.word	0x400e0400

00400ea8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400ea8:	b480      	push	{r7}
  400eaa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400eac:	4b04      	ldr	r3, [pc, #16]	; (400ec0 <pmc_is_locked_pllack+0x18>)
  400eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400eb0:	f003 0302 	and.w	r3, r3, #2
}
  400eb4:	4618      	mov	r0, r3
  400eb6:	46bd      	mov	sp, r7
  400eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ebc:	4770      	bx	lr
  400ebe:	bf00      	nop
  400ec0:	400e0400 	.word	0x400e0400

00400ec4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400ec4:	b480      	push	{r7}
  400ec6:	b083      	sub	sp, #12
  400ec8:	af00      	add	r7, sp, #0
  400eca:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	2b1f      	cmp	r3, #31
  400ed0:	d901      	bls.n	400ed6 <pmc_enable_periph_clk+0x12>
		return 1;
  400ed2:	2301      	movs	r3, #1
  400ed4:	e016      	b.n	400f04 <pmc_enable_periph_clk+0x40>
	}

	if (ul_id < 32) {
  400ed6:	687b      	ldr	r3, [r7, #4]
  400ed8:	2b1f      	cmp	r3, #31
  400eda:	d812      	bhi.n	400f02 <pmc_enable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400edc:	4b0c      	ldr	r3, [pc, #48]	; (400f10 <pmc_enable_periph_clk+0x4c>)
  400ede:	699a      	ldr	r2, [r3, #24]
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	2101      	movs	r1, #1
  400ee4:	fa01 f303 	lsl.w	r3, r1, r3
  400ee8:	401a      	ands	r2, r3
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	2101      	movs	r1, #1
  400eee:	fa01 f303 	lsl.w	r3, r1, r3
  400ef2:	429a      	cmp	r2, r3
  400ef4:	d005      	beq.n	400f02 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ef6:	4b06      	ldr	r3, [pc, #24]	; (400f10 <pmc_enable_periph_clk+0x4c>)
  400ef8:	687a      	ldr	r2, [r7, #4]
  400efa:	2101      	movs	r1, #1
  400efc:	fa01 f202 	lsl.w	r2, r1, r2
  400f00:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400f02:	2300      	movs	r3, #0
}
  400f04:	4618      	mov	r0, r3
  400f06:	370c      	adds	r7, #12
  400f08:	46bd      	mov	sp, r7
  400f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f0e:	4770      	bx	lr
  400f10:	400e0400 	.word	0x400e0400

00400f14 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f14:	b480      	push	{r7}
  400f16:	b085      	sub	sp, #20
  400f18:	af00      	add	r7, sp, #0
  400f1a:	6078      	str	r0, [r7, #4]
  400f1c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  400f1e:	2300      	movs	r3, #0
  400f20:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f22:	687b      	ldr	r3, [r7, #4]
  400f24:	22ac      	movs	r2, #172	; 0xac
  400f26:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f28:	683b      	ldr	r3, [r7, #0]
  400f2a:	681a      	ldr	r2, [r3, #0]
  400f2c:	683b      	ldr	r3, [r7, #0]
  400f2e:	685b      	ldr	r3, [r3, #4]
  400f30:	fbb2 f3f3 	udiv	r3, r2, r3
  400f34:	091b      	lsrs	r3, r3, #4
  400f36:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400f38:	68fb      	ldr	r3, [r7, #12]
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	d003      	beq.n	400f46 <uart_init+0x32>
  400f3e:	68fb      	ldr	r3, [r7, #12]
  400f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400f44:	d301      	bcc.n	400f4a <uart_init+0x36>
		return 1;
  400f46:	2301      	movs	r3, #1
  400f48:	e00f      	b.n	400f6a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	68fa      	ldr	r2, [r7, #12]
  400f4e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400f50:	683b      	ldr	r3, [r7, #0]
  400f52:	689a      	ldr	r2, [r3, #8]
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400f58:	687b      	ldr	r3, [r7, #4]
  400f5a:	f240 2202 	movw	r2, #514	; 0x202
  400f5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400f62:	687b      	ldr	r3, [r7, #4]
  400f64:	2250      	movs	r2, #80	; 0x50
  400f66:	601a      	str	r2, [r3, #0]

	return 0;
  400f68:	2300      	movs	r3, #0
}
  400f6a:	4618      	mov	r0, r3
  400f6c:	3714      	adds	r7, #20
  400f6e:	46bd      	mov	sp, r7
  400f70:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f74:	4770      	bx	lr
  400f76:	bf00      	nop

00400f78 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400f78:	b580      	push	{r7, lr}
  400f7a:	b082      	sub	sp, #8
  400f7c:	af00      	add	r7, sp, #0
  400f7e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400f80:	6878      	ldr	r0, [r7, #4]
  400f82:	4b02      	ldr	r3, [pc, #8]	; (400f8c <sysclk_enable_peripheral_clock+0x14>)
  400f84:	4798      	blx	r3
}
  400f86:	3708      	adds	r7, #8
  400f88:	46bd      	mov	sp, r7
  400f8a:	bd80      	pop	{r7, pc}
  400f8c:	00400ec5 	.word	0x00400ec5

00400f90 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400f90:	b580      	push	{r7, lr}
  400f92:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400f94:	200b      	movs	r0, #11
  400f96:	4b04      	ldr	r3, [pc, #16]	; (400fa8 <ioport_init+0x18>)
  400f98:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400f9a:	200c      	movs	r0, #12
  400f9c:	4b02      	ldr	r3, [pc, #8]	; (400fa8 <ioport_init+0x18>)
  400f9e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400fa0:	200d      	movs	r0, #13
  400fa2:	4b01      	ldr	r3, [pc, #4]	; (400fa8 <ioport_init+0x18>)
  400fa4:	4798      	blx	r3
	arch_ioport_init();
}
  400fa6:	bd80      	pop	{r7, pc}
  400fa8:	00400f79 	.word	0x00400f79

00400fac <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400fac:	b480      	push	{r7}
  400fae:	b089      	sub	sp, #36	; 0x24
  400fb0:	af00      	add	r7, sp, #0
  400fb2:	6078      	str	r0, [r7, #4]
  400fb4:	687b      	ldr	r3, [r7, #4]
  400fb6:	61fb      	str	r3, [r7, #28]
  400fb8:	69fb      	ldr	r3, [r7, #28]
  400fba:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400fbc:	69bb      	ldr	r3, [r7, #24]
  400fbe:	095a      	lsrs	r2, r3, #5
  400fc0:	69fb      	ldr	r3, [r7, #28]
  400fc2:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400fc4:	697b      	ldr	r3, [r7, #20]
  400fc6:	f003 031f 	and.w	r3, r3, #31
  400fca:	2101      	movs	r1, #1
  400fcc:	fa01 f303 	lsl.w	r3, r1, r3
  400fd0:	613a      	str	r2, [r7, #16]
  400fd2:	60fb      	str	r3, [r7, #12]
  400fd4:	693b      	ldr	r3, [r7, #16]
  400fd6:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400fd8:	68bb      	ldr	r3, [r7, #8]
  400fda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400fde:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400fe2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400fe4:	68fa      	ldr	r2, [r7, #12]
  400fe6:	605a      	str	r2, [r3, #4]
	arch_ioport_disable_pin(pin);
}
  400fe8:	3724      	adds	r7, #36	; 0x24
  400fea:	46bd      	mov	sp, r7
  400fec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ff0:	4770      	bx	lr
  400ff2:	bf00      	nop

00400ff4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400ff4:	b480      	push	{r7}
  400ff6:	b08d      	sub	sp, #52	; 0x34
  400ff8:	af00      	add	r7, sp, #0
  400ffa:	6078      	str	r0, [r7, #4]
  400ffc:	6039      	str	r1, [r7, #0]
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	62fb      	str	r3, [r7, #44]	; 0x2c
  401002:	683b      	ldr	r3, [r7, #0]
  401004:	62bb      	str	r3, [r7, #40]	; 0x28
  401006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401008:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40100c:	095a      	lsrs	r2, r3, #5
  40100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401010:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401012:	6a3b      	ldr	r3, [r7, #32]
  401014:	f003 031f 	and.w	r3, r3, #31
  401018:	2101      	movs	r1, #1
  40101a:	fa01 f303 	lsl.w	r3, r1, r3
  40101e:	61fa      	str	r2, [r7, #28]
  401020:	61bb      	str	r3, [r7, #24]
  401022:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401024:	617b      	str	r3, [r7, #20]
  401026:	69fb      	ldr	r3, [r7, #28]
  401028:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40102a:	693b      	ldr	r3, [r7, #16]
  40102c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401030:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401034:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  401036:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401038:	697b      	ldr	r3, [r7, #20]
  40103a:	f003 0308 	and.w	r3, r3, #8
  40103e:	2b00      	cmp	r3, #0
  401040:	d003      	beq.n	40104a <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401042:	68fb      	ldr	r3, [r7, #12]
  401044:	69ba      	ldr	r2, [r7, #24]
  401046:	665a      	str	r2, [r3, #100]	; 0x64
  401048:	e002      	b.n	401050 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  40104a:	68fb      	ldr	r3, [r7, #12]
  40104c:	69ba      	ldr	r2, [r7, #24]
  40104e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401050:	697b      	ldr	r3, [r7, #20]
  401052:	f003 0310 	and.w	r3, r3, #16
  401056:	2b00      	cmp	r3, #0
  401058:	d004      	beq.n	401064 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40105a:	68fb      	ldr	r3, [r7, #12]
  40105c:	69ba      	ldr	r2, [r7, #24]
  40105e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401062:	e003      	b.n	40106c <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  401064:	68fb      	ldr	r3, [r7, #12]
  401066:	69ba      	ldr	r2, [r7, #24]
  401068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40106c:	697b      	ldr	r3, [r7, #20]
  40106e:	f003 0320 	and.w	r3, r3, #32
  401072:	2b00      	cmp	r3, #0
  401074:	d003      	beq.n	40107e <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401076:	68fb      	ldr	r3, [r7, #12]
  401078:	69ba      	ldr	r2, [r7, #24]
  40107a:	651a      	str	r2, [r3, #80]	; 0x50
  40107c:	e002      	b.n	401084 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  40107e:	68fb      	ldr	r3, [r7, #12]
  401080:	69ba      	ldr	r2, [r7, #24]
  401082:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401084:	697b      	ldr	r3, [r7, #20]
  401086:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40108a:	2b00      	cmp	r3, #0
  40108c:	d003      	beq.n	401096 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40108e:	68fb      	ldr	r3, [r7, #12]
  401090:	69ba      	ldr	r2, [r7, #24]
  401092:	621a      	str	r2, [r3, #32]
  401094:	e002      	b.n	40109c <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  401096:	68fb      	ldr	r3, [r7, #12]
  401098:	69ba      	ldr	r2, [r7, #24]
  40109a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40109c:	697b      	ldr	r3, [r7, #20]
  40109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010a2:	2b00      	cmp	r3, #0
  4010a4:	d004      	beq.n	4010b0 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4010a6:	68fb      	ldr	r3, [r7, #12]
  4010a8:	69ba      	ldr	r2, [r7, #24]
  4010aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4010ae:	e003      	b.n	4010b8 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4010b0:	68fb      	ldr	r3, [r7, #12]
  4010b2:	69ba      	ldr	r2, [r7, #24]
  4010b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4010b8:	697b      	ldr	r3, [r7, #20]
  4010ba:	f003 0301 	and.w	r3, r3, #1
  4010be:	2b00      	cmp	r3, #0
  4010c0:	d006      	beq.n	4010d0 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4010c2:	68fb      	ldr	r3, [r7, #12]
  4010c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010c6:	69bb      	ldr	r3, [r7, #24]
  4010c8:	431a      	orrs	r2, r3
  4010ca:	68fb      	ldr	r3, [r7, #12]
  4010cc:	671a      	str	r2, [r3, #112]	; 0x70
  4010ce:	e006      	b.n	4010de <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4010d0:	68fb      	ldr	r3, [r7, #12]
  4010d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010d4:	69bb      	ldr	r3, [r7, #24]
  4010d6:	43db      	mvns	r3, r3
  4010d8:	401a      	ands	r2, r3
  4010da:	68fb      	ldr	r3, [r7, #12]
  4010dc:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4010de:	697b      	ldr	r3, [r7, #20]
  4010e0:	f003 0302 	and.w	r3, r3, #2
  4010e4:	2b00      	cmp	r3, #0
  4010e6:	d006      	beq.n	4010f6 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4010e8:	68fb      	ldr	r3, [r7, #12]
  4010ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4010ec:	69bb      	ldr	r3, [r7, #24]
  4010ee:	431a      	orrs	r2, r3
  4010f0:	68fb      	ldr	r3, [r7, #12]
  4010f2:	675a      	str	r2, [r3, #116]	; 0x74
  4010f4:	e006      	b.n	401104 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4010f6:	68fb      	ldr	r3, [r7, #12]
  4010f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4010fa:	69bb      	ldr	r3, [r7, #24]
  4010fc:	43db      	mvns	r3, r3
  4010fe:	401a      	ands	r2, r3
  401100:	68fb      	ldr	r3, [r7, #12]
  401102:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401104:	3734      	adds	r7, #52	; 0x34
  401106:	46bd      	mov	sp, r7
  401108:	f85d 7b04 	ldr.w	r7, [sp], #4
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop

00401110 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401110:	b480      	push	{r7}
  401112:	b08d      	sub	sp, #52	; 0x34
  401114:	af00      	add	r7, sp, #0
  401116:	6078      	str	r0, [r7, #4]
  401118:	460b      	mov	r3, r1
  40111a:	70fb      	strb	r3, [r7, #3]
  40111c:	687b      	ldr	r3, [r7, #4]
  40111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  401120:	78fb      	ldrb	r3, [r7, #3]
  401122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401128:	627b      	str	r3, [r7, #36]	; 0x24
  40112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40112c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40112e:	6a3b      	ldr	r3, [r7, #32]
  401130:	095b      	lsrs	r3, r3, #5
  401132:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401134:	69fb      	ldr	r3, [r7, #28]
  401136:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40113a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40113e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401140:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401146:	2b01      	cmp	r3, #1
  401148:	d109      	bne.n	40115e <ioport_set_pin_dir+0x4e>
  40114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40114c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40114e:	697b      	ldr	r3, [r7, #20]
  401150:	f003 031f 	and.w	r3, r3, #31
  401154:	2201      	movs	r2, #1
  401156:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401158:	69bb      	ldr	r3, [r7, #24]
  40115a:	611a      	str	r2, [r3, #16]
  40115c:	e00c      	b.n	401178 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40115e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401162:	2b00      	cmp	r3, #0
  401164:	d108      	bne.n	401178 <ioport_set_pin_dir+0x68>
  401166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401168:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40116a:	693b      	ldr	r3, [r7, #16]
  40116c:	f003 031f 	and.w	r3, r3, #31
  401170:	2201      	movs	r2, #1
  401172:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401174:	69bb      	ldr	r3, [r7, #24]
  401176:	615a      	str	r2, [r3, #20]
  401178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40117a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40117c:	68fb      	ldr	r3, [r7, #12]
  40117e:	f003 031f 	and.w	r3, r3, #31
  401182:	2201      	movs	r2, #1
  401184:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401186:	69bb      	ldr	r3, [r7, #24]
  401188:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40118c:	3734      	adds	r7, #52	; 0x34
  40118e:	46bd      	mov	sp, r7
  401190:	f85d 7b04 	ldr.w	r7, [sp], #4
  401194:	4770      	bx	lr
  401196:	bf00      	nop

00401198 <board_init>:
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
#define ioport_set_pin_peripheral_mode(pin, mode) 	do {ioport_set_pin_mode(pin, mode);	ioport_disable_pin(pin);} while (0)
void board_init(void)
{
  401198:	b580      	push	{r7, lr}
  40119a:	af00      	add	r7, sp, #0
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	*/

	
	pmc_enable_periph_clk(ID_SPI);
  40119c:	2015      	movs	r0, #21
  40119e:	4b1d      	ldr	r3, [pc, #116]	; (401214 <board_init+0x7c>)
  4011a0:	4798      	blx	r3
	
	ioport_init();
  4011a2:	4b1d      	ldr	r3, [pc, #116]	; (401218 <board_init+0x80>)
  4011a4:	4798      	blx	r3
	
	
	ioport_set_pin_dir(SD_MMC_0_CD_GPIO, IOPORT_DIR_INPUT);
  4011a6:	201a      	movs	r0, #26
  4011a8:	2100      	movs	r1, #0
  4011aa:	4b1c      	ldr	r3, [pc, #112]	; (40121c <board_init+0x84>)
  4011ac:	4798      	blx	r3
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, IOPORT_MODE_PULLUP);
  4011ae:	201a      	movs	r0, #26
  4011b0:	2108      	movs	r1, #8
  4011b2:	4b1b      	ldr	r3, [pc, #108]	; (401220 <board_init+0x88>)
  4011b4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4011b6:	200c      	movs	r0, #12
  4011b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4011bc:	4b18      	ldr	r3, [pc, #96]	; (401220 <board_init+0x88>)
  4011be:	4798      	blx	r3
  4011c0:	200c      	movs	r0, #12
  4011c2:	4b18      	ldr	r3, [pc, #96]	; (401224 <board_init+0x8c>)
  4011c4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4011c6:	200d      	movs	r0, #13
  4011c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4011cc:	4b14      	ldr	r3, [pc, #80]	; (401220 <board_init+0x88>)
  4011ce:	4798      	blx	r3
  4011d0:	200d      	movs	r0, #13
  4011d2:	4b14      	ldr	r3, [pc, #80]	; (401224 <board_init+0x8c>)
  4011d4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4011d6:	200e      	movs	r0, #14
  4011d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4011dc:	4b10      	ldr	r3, [pc, #64]	; (401220 <board_init+0x88>)
  4011de:	4798      	blx	r3
  4011e0:	200e      	movs	r0, #14
  4011e2:	4b10      	ldr	r3, [pc, #64]	; (401224 <board_init+0x8c>)
  4011e4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4011e6:	200b      	movs	r0, #11
  4011e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4011ec:	4b0c      	ldr	r3, [pc, #48]	; (401220 <board_init+0x88>)
  4011ee:	4798      	blx	r3
  4011f0:	200b      	movs	r0, #11
  4011f2:	4b0c      	ldr	r3, [pc, #48]	; (401224 <board_init+0x8c>)
  4011f4:	4798      	blx	r3
	
	ioport_set_pin_peripheral_mode(PIO_PB0_IDX, IOPORT_MODE_MUX_B);
  4011f6:	2020      	movs	r0, #32
  4011f8:	2101      	movs	r1, #1
  4011fa:	4b09      	ldr	r3, [pc, #36]	; (401220 <board_init+0x88>)
  4011fc:	4798      	blx	r3
  4011fe:	2020      	movs	r0, #32
  401200:	4b08      	ldr	r3, [pc, #32]	; (401224 <board_init+0x8c>)
  401202:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIO_PB1_IDX, IOPORT_MODE_MUX_B);
  401204:	2021      	movs	r0, #33	; 0x21
  401206:	2101      	movs	r1, #1
  401208:	4b05      	ldr	r3, [pc, #20]	; (401220 <board_init+0x88>)
  40120a:	4798      	blx	r3
  40120c:	2021      	movs	r0, #33	; 0x21
  40120e:	4b05      	ldr	r3, [pc, #20]	; (401224 <board_init+0x8c>)
  401210:	4798      	blx	r3


}
  401212:	bd80      	pop	{r7, pc}
  401214:	00400ec5 	.word	0x00400ec5
  401218:	00400f91 	.word	0x00400f91
  40121c:	00401111 	.word	0x00401111
  401220:	00400ff5 	.word	0x00400ff5
  401224:	00400fad 	.word	0x00400fad

00401228 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401228:	b480      	push	{r7}
  40122a:	b083      	sub	sp, #12
  40122c:	af00      	add	r7, sp, #0
  40122e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401230:	687b      	ldr	r3, [r7, #4]
  401232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401236:	605a      	str	r2, [r3, #4]

}
  401238:	370c      	adds	r7, #12
  40123a:	46bd      	mov	sp, r7
  40123c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401240:	4770      	bx	lr
  401242:	bf00      	nop

00401244 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401244:	b480      	push	{r7}
  401246:	af00      	add	r7, sp, #0
	while (1) {
	}
  401248:	e7fe      	b.n	401248 <Dummy_Handler+0x4>
  40124a:	bf00      	nop

0040124c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40124c:	b580      	push	{r7, lr}
  40124e:	b082      	sub	sp, #8
  401250:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401252:	4b16      	ldr	r3, [pc, #88]	; (4012ac <Reset_Handler+0x60>)
  401254:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
  401256:	4b16      	ldr	r3, [pc, #88]	; (4012b0 <Reset_Handler+0x64>)
  401258:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
  40125a:	687a      	ldr	r2, [r7, #4]
  40125c:	683b      	ldr	r3, [r7, #0]
  40125e:	429a      	cmp	r2, r3
  401260:	d00c      	beq.n	40127c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401262:	e007      	b.n	401274 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401264:	683b      	ldr	r3, [r7, #0]
  401266:	1d1a      	adds	r2, r3, #4
  401268:	603a      	str	r2, [r7, #0]
  40126a:	687a      	ldr	r2, [r7, #4]
  40126c:	1d11      	adds	r1, r2, #4
  40126e:	6079      	str	r1, [r7, #4]
  401270:	6812      	ldr	r2, [r2, #0]
  401272:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  401274:	683a      	ldr	r2, [r7, #0]
  401276:	4b0f      	ldr	r3, [pc, #60]	; (4012b4 <Reset_Handler+0x68>)
  401278:	429a      	cmp	r2, r3
  40127a:	d3f3      	bcc.n	401264 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40127c:	4b0e      	ldr	r3, [pc, #56]	; (4012b8 <Reset_Handler+0x6c>)
  40127e:	603b      	str	r3, [r7, #0]
  401280:	e004      	b.n	40128c <Reset_Handler+0x40>
		*pDest++ = 0;
  401282:	683b      	ldr	r3, [r7, #0]
  401284:	1d1a      	adds	r2, r3, #4
  401286:	603a      	str	r2, [r7, #0]
  401288:	2200      	movs	r2, #0
  40128a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40128c:	683a      	ldr	r2, [r7, #0]
  40128e:	4b0b      	ldr	r3, [pc, #44]	; (4012bc <Reset_Handler+0x70>)
  401290:	429a      	cmp	r2, r3
  401292:	d3f6      	bcc.n	401282 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401294:	4b0a      	ldr	r3, [pc, #40]	; (4012c0 <Reset_Handler+0x74>)
  401296:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401298:	4b0a      	ldr	r3, [pc, #40]	; (4012c4 <Reset_Handler+0x78>)
  40129a:	687a      	ldr	r2, [r7, #4]
  40129c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4012a0:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4012a2:	4b09      	ldr	r3, [pc, #36]	; (4012c8 <Reset_Handler+0x7c>)
  4012a4:	4798      	blx	r3

	/* Branch to main function */
	main();
  4012a6:	4b09      	ldr	r3, [pc, #36]	; (4012cc <Reset_Handler+0x80>)
  4012a8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4012aa:	e7fe      	b.n	4012aa <Reset_Handler+0x5e>
  4012ac:	004041d4 	.word	0x004041d4
  4012b0:	20000000 	.word	0x20000000
  4012b4:	20000478 	.word	0x20000478
  4012b8:	20000478 	.word	0x20000478
  4012bc:	20000528 	.word	0x20000528
  4012c0:	00400000 	.word	0x00400000
  4012c4:	e000ed00 	.word	0xe000ed00
  4012c8:	00403e81 	.word	0x00403e81
  4012cc:	00401c09 	.word	0x00401c09

004012d0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
  4012d0:	b480      	push	{r7}
  4012d2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4012d4:	4b51      	ldr	r3, [pc, #324]	; (40141c <SystemCoreClockUpdate+0x14c>)
  4012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012d8:	f003 0303 	and.w	r3, r3, #3
  4012dc:	2b01      	cmp	r3, #1
  4012de:	d014      	beq.n	40130a <SystemCoreClockUpdate+0x3a>
  4012e0:	2b01      	cmp	r3, #1
  4012e2:	d302      	bcc.n	4012ea <SystemCoreClockUpdate+0x1a>
  4012e4:	2b02      	cmp	r3, #2
  4012e6:	d038      	beq.n	40135a <SystemCoreClockUpdate+0x8a>
					>> CKGR_PLLAR_DIVA_Pos));
		}
		break;

	default:
		break;
  4012e8:	e07b      	b.n	4013e2 <SystemCoreClockUpdate+0x112>
void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4012ea:	4b4d      	ldr	r3, [pc, #308]	; (401420 <SystemCoreClockUpdate+0x150>)
  4012ec:	695b      	ldr	r3, [r3, #20]
  4012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d004      	beq.n	401300 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4012f6:	4b4b      	ldr	r3, [pc, #300]	; (401424 <SystemCoreClockUpdate+0x154>)
  4012f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012fc:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
  4012fe:	e070      	b.n	4013e2 <SystemCoreClockUpdate+0x112>
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401300:	4b48      	ldr	r3, [pc, #288]	; (401424 <SystemCoreClockUpdate+0x154>)
  401302:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401306:	601a      	str	r2, [r3, #0]
		}
		break;
  401308:	e06b      	b.n	4013e2 <SystemCoreClockUpdate+0x112>

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40130a:	4b44      	ldr	r3, [pc, #272]	; (40141c <SystemCoreClockUpdate+0x14c>)
  40130c:	6a1b      	ldr	r3, [r3, #32]
  40130e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401312:	2b00      	cmp	r3, #0
  401314:	d003      	beq.n	40131e <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401316:	4b43      	ldr	r3, [pc, #268]	; (401424 <SystemCoreClockUpdate+0x154>)
  401318:	4a43      	ldr	r2, [pc, #268]	; (401428 <SystemCoreClockUpdate+0x158>)
  40131a:	601a      	str	r2, [r3, #0]
  40131c:	e01c      	b.n	401358 <SystemCoreClockUpdate+0x88>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40131e:	4b41      	ldr	r3, [pc, #260]	; (401424 <SystemCoreClockUpdate+0x154>)
  401320:	4a42      	ldr	r2, [pc, #264]	; (40142c <SystemCoreClockUpdate+0x15c>)
  401322:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401324:	4b3d      	ldr	r3, [pc, #244]	; (40141c <SystemCoreClockUpdate+0x14c>)
  401326:	6a1b      	ldr	r3, [r3, #32]
  401328:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40132c:	2b10      	cmp	r3, #16
  40132e:	d004      	beq.n	40133a <SystemCoreClockUpdate+0x6a>
  401330:	2b20      	cmp	r3, #32
  401332:	d008      	beq.n	401346 <SystemCoreClockUpdate+0x76>
  401334:	2b00      	cmp	r3, #0
  401336:	d00e      	beq.n	401356 <SystemCoreClockUpdate+0x86>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;

			default:
				break;
  401338:	e00e      	b.n	401358 <SystemCoreClockUpdate+0x88>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40133a:	4b3a      	ldr	r3, [pc, #232]	; (401424 <SystemCoreClockUpdate+0x154>)
  40133c:	681b      	ldr	r3, [r3, #0]
  40133e:	005a      	lsls	r2, r3, #1
  401340:	4b38      	ldr	r3, [pc, #224]	; (401424 <SystemCoreClockUpdate+0x154>)
  401342:	601a      	str	r2, [r3, #0]
				break;
  401344:	e008      	b.n	401358 <SystemCoreClockUpdate+0x88>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  401346:	4b37      	ldr	r3, [pc, #220]	; (401424 <SystemCoreClockUpdate+0x154>)
  401348:	681a      	ldr	r2, [r3, #0]
  40134a:	4613      	mov	r3, r2
  40134c:	005b      	lsls	r3, r3, #1
  40134e:	441a      	add	r2, r3
  401350:	4b34      	ldr	r3, [pc, #208]	; (401424 <SystemCoreClockUpdate+0x154>)
  401352:	601a      	str	r2, [r3, #0]
				break;
  401354:	e000      	b.n	401358 <SystemCoreClockUpdate+0x88>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
  401356:	bf00      	nop

			default:
				break;
			}
		}
		break;
  401358:	e043      	b.n	4013e2 <SystemCoreClockUpdate+0x112>

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40135a:	4b30      	ldr	r3, [pc, #192]	; (40141c <SystemCoreClockUpdate+0x14c>)
  40135c:	6a1b      	ldr	r3, [r3, #32]
  40135e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401362:	2b00      	cmp	r3, #0
  401364:	d003      	beq.n	40136e <SystemCoreClockUpdate+0x9e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401366:	4b2f      	ldr	r3, [pc, #188]	; (401424 <SystemCoreClockUpdate+0x154>)
  401368:	4a2f      	ldr	r2, [pc, #188]	; (401428 <SystemCoreClockUpdate+0x158>)
  40136a:	601a      	str	r2, [r3, #0]
  40136c:	e01c      	b.n	4013a8 <SystemCoreClockUpdate+0xd8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40136e:	4b2d      	ldr	r3, [pc, #180]	; (401424 <SystemCoreClockUpdate+0x154>)
  401370:	4a2e      	ldr	r2, [pc, #184]	; (40142c <SystemCoreClockUpdate+0x15c>)
  401372:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401374:	4b29      	ldr	r3, [pc, #164]	; (40141c <SystemCoreClockUpdate+0x14c>)
  401376:	6a1b      	ldr	r3, [r3, #32]
  401378:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40137c:	2b10      	cmp	r3, #16
  40137e:	d004      	beq.n	40138a <SystemCoreClockUpdate+0xba>
  401380:	2b20      	cmp	r3, #32
  401382:	d008      	beq.n	401396 <SystemCoreClockUpdate+0xc6>
  401384:	2b00      	cmp	r3, #0
  401386:	d00e      	beq.n	4013a6 <SystemCoreClockUpdate+0xd6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;

			default:
				break;
  401388:	e00e      	b.n	4013a8 <SystemCoreClockUpdate+0xd8>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40138a:	4b26      	ldr	r3, [pc, #152]	; (401424 <SystemCoreClockUpdate+0x154>)
  40138c:	681b      	ldr	r3, [r3, #0]
  40138e:	005a      	lsls	r2, r3, #1
  401390:	4b24      	ldr	r3, [pc, #144]	; (401424 <SystemCoreClockUpdate+0x154>)
  401392:	601a      	str	r2, [r3, #0]
				break;
  401394:	e008      	b.n	4013a8 <SystemCoreClockUpdate+0xd8>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  401396:	4b23      	ldr	r3, [pc, #140]	; (401424 <SystemCoreClockUpdate+0x154>)
  401398:	681a      	ldr	r2, [r3, #0]
  40139a:	4613      	mov	r3, r2
  40139c:	005b      	lsls	r3, r3, #1
  40139e:	441a      	add	r2, r3
  4013a0:	4b20      	ldr	r3, [pc, #128]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013a2:	601a      	str	r2, [r3, #0]
				break;
  4013a4:	e000      	b.n	4013a8 <SystemCoreClockUpdate+0xd8>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				/* The PLL input range is 8MHz to 32MHz */
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;
  4013a6:	bf00      	nop
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4013a8:	4b1c      	ldr	r3, [pc, #112]	; (40141c <SystemCoreClockUpdate+0x14c>)
  4013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013ac:	f003 0303 	and.w	r3, r3, #3
  4013b0:	2b02      	cmp	r3, #2
  4013b2:	d115      	bne.n	4013e0 <SystemCoreClockUpdate+0x110>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4013b4:	4b19      	ldr	r3, [pc, #100]	; (40141c <SystemCoreClockUpdate+0x14c>)
  4013b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4013b8:	4b1d      	ldr	r3, [pc, #116]	; (401430 <SystemCoreClockUpdate+0x160>)
  4013ba:	4013      	ands	r3, r2
					>> CKGR_PLLAR_MULA_Pos) + 1U);
  4013bc:	0c1b      	lsrs	r3, r3, #16
  4013be:	3301      	adds	r3, #1
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
  4013c0:	4a18      	ldr	r2, [pc, #96]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013c2:	6812      	ldr	r2, [r2, #0]
  4013c4:	fb02 f203 	mul.w	r2, r2, r3
  4013c8:	4b16      	ldr	r3, [pc, #88]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013ca:	601a      	str	r2, [r3, #0]
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4013cc:	4b15      	ldr	r3, [pc, #84]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013ce:	681a      	ldr	r2, [r3, #0]
  4013d0:	4b12      	ldr	r3, [pc, #72]	; (40141c <SystemCoreClockUpdate+0x14c>)
  4013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					>> CKGR_PLLAR_DIVA_Pos));
  4013d4:	b2db      	uxtb	r3, r3
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4013d6:	fbb2 f2f3 	udiv	r2, r2, r3
  4013da:	4b12      	ldr	r3, [pc, #72]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013dc:	601a      	str	r2, [r3, #0]
					>> CKGR_PLLAR_DIVA_Pos));
		}
		break;
  4013de:	e7ff      	b.n	4013e0 <SystemCoreClockUpdate+0x110>
  4013e0:	bf00      	nop

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4013e2:	4b0e      	ldr	r3, [pc, #56]	; (40141c <SystemCoreClockUpdate+0x14c>)
  4013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013ea:	2b70      	cmp	r3, #112	; 0x70
  4013ec:	d108      	bne.n	401400 <SystemCoreClockUpdate+0x130>
		SystemCoreClock /= 3U;
  4013ee:	4b0d      	ldr	r3, [pc, #52]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013f0:	681a      	ldr	r2, [r3, #0]
  4013f2:	4b10      	ldr	r3, [pc, #64]	; (401434 <SystemCoreClockUpdate+0x164>)
  4013f4:	fba3 1302 	umull	r1, r3, r3, r2
  4013f8:	085a      	lsrs	r2, r3, #1
  4013fa:	4b0a      	ldr	r3, [pc, #40]	; (401424 <SystemCoreClockUpdate+0x154>)
  4013fc:	601a      	str	r2, [r3, #0]
  4013fe:	e009      	b.n	401414 <SystemCoreClockUpdate+0x144>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  401400:	4b08      	ldr	r3, [pc, #32]	; (401424 <SystemCoreClockUpdate+0x154>)
  401402:	681a      	ldr	r2, [r3, #0]
  401404:	4b05      	ldr	r3, [pc, #20]	; (40141c <SystemCoreClockUpdate+0x14c>)
  401406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401408:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40140c:	091b      	lsrs	r3, r3, #4
  40140e:	40da      	lsrs	r2, r3
  401410:	4b04      	ldr	r3, [pc, #16]	; (401424 <SystemCoreClockUpdate+0x154>)
  401412:	601a      	str	r2, [r3, #0]
				PMC_MCKR_PRES_Pos);
	}
}
  401414:	46bd      	mov	sp, r7
  401416:	f85d 7b04 	ldr.w	r7, [sp], #4
  40141a:	4770      	bx	lr
  40141c:	400e0400 	.word	0x400e0400
  401420:	400e1410 	.word	0x400e1410
  401424:	20000040 	.word	0x20000040
  401428:	00b71b00 	.word	0x00b71b00
  40142c:	003d0900 	.word	0x003d0900
  401430:	07ff0000 	.word	0x07ff0000
  401434:	aaaaaaab 	.word	0xaaaaaaab

00401438 <system_init_flash>:

/**
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
  401438:	b480      	push	{r7}
  40143a:	b083      	sub	sp, #12
  40143c:	af00      	add	r7, sp, #0
  40143e:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  401440:	687a      	ldr	r2, [r7, #4]
  401442:	4b14      	ldr	r3, [pc, #80]	; (401494 <system_init_flash+0x5c>)
  401444:	429a      	cmp	r2, r3
  401446:	d804      	bhi.n	401452 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401448:	4b13      	ldr	r3, [pc, #76]	; (401498 <system_init_flash+0x60>)
  40144a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40144e:	601a      	str	r2, [r3, #0]
  401450:	e01b      	b.n	40148a <system_init_flash+0x52>
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401452:	687a      	ldr	r2, [r7, #4]
  401454:	4b11      	ldr	r3, [pc, #68]	; (40149c <system_init_flash+0x64>)
  401456:	429a      	cmp	r2, r3
  401458:	d803      	bhi.n	401462 <system_init_flash+0x2a>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40145a:	4b0f      	ldr	r3, [pc, #60]	; (401498 <system_init_flash+0x60>)
  40145c:	4a10      	ldr	r2, [pc, #64]	; (4014a0 <system_init_flash+0x68>)
  40145e:	601a      	str	r2, [r3, #0]
  401460:	e013      	b.n	40148a <system_init_flash+0x52>
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401462:	687a      	ldr	r2, [r7, #4]
  401464:	4b0f      	ldr	r3, [pc, #60]	; (4014a4 <system_init_flash+0x6c>)
  401466:	429a      	cmp	r2, r3
  401468:	d803      	bhi.n	401472 <system_init_flash+0x3a>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40146a:	4b0b      	ldr	r3, [pc, #44]	; (401498 <system_init_flash+0x60>)
  40146c:	4a0e      	ldr	r2, [pc, #56]	; (4014a8 <system_init_flash+0x70>)
  40146e:	601a      	str	r2, [r3, #0]
  401470:	e00b      	b.n	40148a <system_init_flash+0x52>
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  401472:	687a      	ldr	r2, [r7, #4]
  401474:	4b0d      	ldr	r3, [pc, #52]	; (4014ac <system_init_flash+0x74>)
  401476:	429a      	cmp	r2, r3
  401478:	d803      	bhi.n	401482 <system_init_flash+0x4a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40147a:	4b07      	ldr	r3, [pc, #28]	; (401498 <system_init_flash+0x60>)
  40147c:	4a0c      	ldr	r2, [pc, #48]	; (4014b0 <system_init_flash+0x78>)
  40147e:	601a      	str	r2, [r3, #0]
  401480:	e003      	b.n	40148a <system_init_flash+0x52>
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401482:	4b05      	ldr	r3, [pc, #20]	; (401498 <system_init_flash+0x60>)
  401484:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401488:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
  40148a:	370c      	adds	r7, #12
  40148c:	46bd      	mov	sp, r7
  40148e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401492:	4770      	bx	lr
  401494:	01312cff 	.word	0x01312cff
  401498:	400e0a00 	.word	0x400e0a00
  40149c:	026259ff 	.word	0x026259ff
  4014a0:	04000100 	.word	0x04000100
  4014a4:	039386ff 	.word	0x039386ff
  4014a8:	04000200 	.word	0x04000200
  4014ac:	04c4b3ff 	.word	0x04c4b3ff
  4014b0:	04000300 	.word	0x04000300

004014b4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4014b4:	b480      	push	{r7}
  4014b6:	b083      	sub	sp, #12
  4014b8:	af00      	add	r7, sp, #0
  4014ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014bc:	687b      	ldr	r3, [r7, #4]
  4014be:	2b07      	cmp	r3, #7
  4014c0:	d825      	bhi.n	40150e <osc_get_rate+0x5a>
  4014c2:	a201      	add	r2, pc, #4	; (adr r2, 4014c8 <osc_get_rate+0x14>)
  4014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014c8:	004014e9 	.word	0x004014e9
  4014cc:	004014ef 	.word	0x004014ef
  4014d0:	004014f5 	.word	0x004014f5
  4014d4:	004014fb 	.word	0x004014fb
  4014d8:	004014ff 	.word	0x004014ff
  4014dc:	00401503 	.word	0x00401503
  4014e0:	00401507 	.word	0x00401507
  4014e4:	0040150b 	.word	0x0040150b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4014e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4014ec:	e010      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4014ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014f2:	e00d      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4014f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014f8:	e00a      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4014fa:	4b08      	ldr	r3, [pc, #32]	; (40151c <osc_get_rate+0x68>)
  4014fc:	e008      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4014fe:	4b08      	ldr	r3, [pc, #32]	; (401520 <osc_get_rate+0x6c>)
  401500:	e006      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401502:	4b08      	ldr	r3, [pc, #32]	; (401524 <osc_get_rate+0x70>)
  401504:	e004      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401506:	4b07      	ldr	r3, [pc, #28]	; (401524 <osc_get_rate+0x70>)
  401508:	e002      	b.n	401510 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40150a:	4b06      	ldr	r3, [pc, #24]	; (401524 <osc_get_rate+0x70>)
  40150c:	e000      	b.n	401510 <osc_get_rate+0x5c>
	}

	return 0;
  40150e:	2300      	movs	r3, #0
}
  401510:	4618      	mov	r0, r3
  401512:	370c      	adds	r7, #12
  401514:	46bd      	mov	sp, r7
  401516:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151a:	4770      	bx	lr
  40151c:	003d0900 	.word	0x003d0900
  401520:	007a1200 	.word	0x007a1200
  401524:	00b71b00 	.word	0x00b71b00

00401528 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401528:	b580      	push	{r7, lr}
  40152a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40152c:	2004      	movs	r0, #4
  40152e:	4b05      	ldr	r3, [pc, #20]	; (401544 <sysclk_get_main_hz+0x1c>)
  401530:	4798      	blx	r3
  401532:	4602      	mov	r2, r0
  401534:	4613      	mov	r3, r2
  401536:	009b      	lsls	r3, r3, #2
  401538:	4413      	add	r3, r2
  40153a:	009a      	lsls	r2, r3, #2
  40153c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40153e:	4618      	mov	r0, r3
  401540:	bd80      	pop	{r7, pc}
  401542:	bf00      	nop
  401544:	004014b5 	.word	0x004014b5

00401548 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401548:	b580      	push	{r7, lr}
  40154a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40154c:	4b02      	ldr	r3, [pc, #8]	; (401558 <sysclk_get_cpu_hz+0x10>)
  40154e:	4798      	blx	r3
  401550:	4603      	mov	r3, r0
  401552:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401554:	4618      	mov	r0, r3
  401556:	bd80      	pop	{r7, pc}
  401558:	00401529 	.word	0x00401529

0040155c <turnLCDon>:
#include "LCD.h"



void turnLCDon(void)
{
  40155c:	b580      	push	{r7, lr}
  40155e:	af00      	add	r7, sp, #0

	pio_clear(LCDPower);
  401560:	4802      	ldr	r0, [pc, #8]	; (40156c <turnLCDon+0x10>)
  401562:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401566:	4b02      	ldr	r3, [pc, #8]	; (401570 <turnLCDon+0x14>)
  401568:	4798      	blx	r3

}
  40156a:	bd80      	pop	{r7, pc}
  40156c:	400e0e00 	.word	0x400e0e00
  401570:	0040039d 	.word	0x0040039d

00401574 <drawPixel>:
{
	pio_set(LCDPower);
}

void drawPixel(uint32_t repeat, uint16_t pixNumber)
{
  401574:	b580      	push	{r7, lr}
  401576:	b084      	sub	sp, #16
  401578:	af00      	add	r7, sp, #0
  40157a:	6078      	str	r0, [r7, #4]
  40157c:	460b      	mov	r3, r1
  40157e:	807b      	strh	r3, [r7, #2]
	 uint32_t i;
	for(i=0; i<repeat; i++)
  401580:	2300      	movs	r3, #0
  401582:	60fb      	str	r3, [r7, #12]
  401584:	e034      	b.n	4015f0 <drawPixel+0x7c>
	{
		pio_set(DnC);
  401586:	481e      	ldr	r0, [pc, #120]	; (401600 <drawPixel+0x8c>)
  401588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40158c:	4b1d      	ldr	r3, [pc, #116]	; (401604 <drawPixel+0x90>)
  40158e:	4798      	blx	r3
		pio_clear(PIOC, 0x00FF);
  401590:	481b      	ldr	r0, [pc, #108]	; (401600 <drawPixel+0x8c>)
  401592:	21ff      	movs	r1, #255	; 0xff
  401594:	4b1c      	ldr	r3, [pc, #112]	; (401608 <drawPixel+0x94>)
  401596:	4798      	blx	r3
		pio_set(PIOC, 0x00FF & (pixNumber>>8));
  401598:	887b      	ldrh	r3, [r7, #2]
  40159a:	0a1b      	lsrs	r3, r3, #8
  40159c:	b29b      	uxth	r3, r3
  40159e:	4818      	ldr	r0, [pc, #96]	; (401600 <drawPixel+0x8c>)
  4015a0:	4619      	mov	r1, r3
  4015a2:	4b18      	ldr	r3, [pc, #96]	; (401604 <drawPixel+0x90>)
  4015a4:	4798      	blx	r3
		pio_clear(Wclk);
  4015a6:	4819      	ldr	r0, [pc, #100]	; (40160c <drawPixel+0x98>)
  4015a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4015ac:	4b16      	ldr	r3, [pc, #88]	; (401608 <drawPixel+0x94>)
  4015ae:	4798      	blx	r3

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4015b0:	bf00      	nop
		nop();
		pio_set(Wclk);
  4015b2:	4816      	ldr	r0, [pc, #88]	; (40160c <drawPixel+0x98>)
  4015b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4015b8:	4b12      	ldr	r3, [pc, #72]	; (401604 <drawPixel+0x90>)
  4015ba:	4798      	blx	r3
  4015bc:	bf00      	nop
		nop();
			
		pio_clear(PIOC, 0x00FF);
  4015be:	4810      	ldr	r0, [pc, #64]	; (401600 <drawPixel+0x8c>)
  4015c0:	21ff      	movs	r1, #255	; 0xff
  4015c2:	4b11      	ldr	r3, [pc, #68]	; (401608 <drawPixel+0x94>)
  4015c4:	4798      	blx	r3
		pio_set(PIOC, 0x00FF & pixNumber);
  4015c6:	887b      	ldrh	r3, [r7, #2]
  4015c8:	b2db      	uxtb	r3, r3
  4015ca:	480d      	ldr	r0, [pc, #52]	; (401600 <drawPixel+0x8c>)
  4015cc:	4619      	mov	r1, r3
  4015ce:	4b0d      	ldr	r3, [pc, #52]	; (401604 <drawPixel+0x90>)
  4015d0:	4798      	blx	r3
		pio_clear(Wclk);
  4015d2:	480e      	ldr	r0, [pc, #56]	; (40160c <drawPixel+0x98>)
  4015d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4015d8:	4b0b      	ldr	r3, [pc, #44]	; (401608 <drawPixel+0x94>)
  4015da:	4798      	blx	r3
  4015dc:	bf00      	nop
		nop();
		
		pio_set(Wclk);
  4015de:	480b      	ldr	r0, [pc, #44]	; (40160c <drawPixel+0x98>)
  4015e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4015e4:	4b07      	ldr	r3, [pc, #28]	; (401604 <drawPixel+0x90>)
  4015e6:	4798      	blx	r3
  4015e8:	bf00      	nop
}

void drawPixel(uint32_t repeat, uint16_t pixNumber)
{
	 uint32_t i;
	for(i=0; i<repeat; i++)
  4015ea:	68fb      	ldr	r3, [r7, #12]
  4015ec:	3301      	adds	r3, #1
  4015ee:	60fb      	str	r3, [r7, #12]
  4015f0:	68fa      	ldr	r2, [r7, #12]
  4015f2:	687b      	ldr	r3, [r7, #4]
  4015f4:	429a      	cmp	r2, r3
  4015f6:	d3c6      	bcc.n	401586 <drawPixel+0x12>
		
		pio_set(Wclk);
		nop();
		
	}
}
  4015f8:	3710      	adds	r7, #16
  4015fa:	46bd      	mov	sp, r7
  4015fc:	bd80      	pop	{r7, pc}
  4015fe:	bf00      	nop
  401600:	400e1200 	.word	0x400e1200
  401604:	00400381 	.word	0x00400381
  401608:	0040039d 	.word	0x0040039d
  40160c:	400e0e00 	.word	0x400e0e00

00401610 <cmd_nDat8>:
		pio_set(Wclk);				//LATEbits.LATE13 =1;             //LATE |= 0x2000;*/
		nop();
	 }
 }
 void cmd_nDat8(uint8_t cnd, uint16_t a)     // Sends commands or data to LCD
 {                                 					 // 'int a' should be in Hex 0x00## where ## is the desired number
  401610:	b590      	push	{r4, r7, lr}
  401612:	b083      	sub	sp, #12
  401614:	af00      	add	r7, sp, #0
  401616:	4602      	mov	r2, r0
  401618:	460b      	mov	r3, r1
  40161a:	71fa      	strb	r2, [r7, #7]
  40161c:	80bb      	strh	r3, [r7, #4]
	 if(cnd == 1)                   			 // if cnd is 1, writing command, otherwise, write data.
  40161e:	79fb      	ldrb	r3, [r7, #7]
  401620:	2b01      	cmp	r3, #1
  401622:	d105      	bne.n	401630 <cmd_nDat8+0x20>
	 {
		pio_clear(DnC);	//.LATE12 =0;     	// This is necessary to signal the LCD whether the data is a command or not.
  401624:	482c      	ldr	r0, [pc, #176]	; (4016d8 <cmd_nDat8+0xc8>)
  401626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40162a:	4b2c      	ldr	r3, [pc, #176]	; (4016dc <cmd_nDat8+0xcc>)
  40162c:	4798      	blx	r3
  40162e:	e004      	b.n	40163a <cmd_nDat8+0x2a>
	 }
	 else
	 {
		pio_set(DnC);	//LATEbits.LATE12 =1;         //LATE |= 0x1000;            	// Set bit 12
  401630:	4829      	ldr	r0, [pc, #164]	; (4016d8 <cmd_nDat8+0xc8>)
  401632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401636:	4b2a      	ldr	r3, [pc, #168]	; (4016e0 <cmd_nDat8+0xd0>)
  401638:	4798      	blx	r3
	 }
	 
	 pio_clear(PIOC, 0x00FF);	//LATC &= 0xFF00;					// Clears the PortC pins that are connected to the LCD to then be able to write to them
  40163a:	4827      	ldr	r0, [pc, #156]	; (4016d8 <cmd_nDat8+0xc8>)
  40163c:	21ff      	movs	r1, #255	; 0xff
  40163e:	4b27      	ldr	r3, [pc, #156]	; (4016dc <cmd_nDat8+0xcc>)
  401640:	4798      	blx	r3
	 pio_set(PIOC, 0x00FF & a);								// Writes to the PortC pins that are connected to the LCD. (this is how data is sent to the LCD)
  401642:	88bb      	ldrh	r3, [r7, #4]
  401644:	b2db      	uxtb	r3, r3
  401646:	4824      	ldr	r0, [pc, #144]	; (4016d8 <cmd_nDat8+0xc8>)
  401648:	4619      	mov	r1, r3
  40164a:	4b25      	ldr	r3, [pc, #148]	; (4016e0 <cmd_nDat8+0xd0>)
  40164c:	4798      	blx	r3
	  
	 // Turning off and then on this pin signals the LCD that it can take the data on PortC as data/command
	 pio_clear(Wclk);		//LATEbits.LATE13 =0;              //LATE &= ~0x2000; //0xDFFF;
  40164e:	4825      	ldr	r0, [pc, #148]	; (4016e4 <cmd_nDat8+0xd4>)
  401650:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401654:	4b21      	ldr	r3, [pc, #132]	; (4016dc <cmd_nDat8+0xcc>)
  401656:	4798      	blx	r3
	 	//nop();
	 	delay_us(1);					//Nop();										//asm("NOP");      // Do nothing for an instruction cycle.
  401658:	4b23      	ldr	r3, [pc, #140]	; (4016e8 <cmd_nDat8+0xd8>)
  40165a:	4798      	blx	r3
  40165c:	4603      	mov	r3, r0
  40165e:	4618      	mov	r0, r3
  401660:	f04f 0100 	mov.w	r1, #0
  401664:	a31a      	add	r3, pc, #104	; (adr r3, 4016d0 <cmd_nDat8+0xc0>)
  401666:	e9d3 2300 	ldrd	r2, r3, [r3]
  40166a:	1812      	adds	r2, r2, r0
  40166c:	eb43 0301 	adc.w	r3, r3, r1
  401670:	4c1e      	ldr	r4, [pc, #120]	; (4016ec <cmd_nDat8+0xdc>)
  401672:	4610      	mov	r0, r2
  401674:	4619      	mov	r1, r3
  401676:	4a1e      	ldr	r2, [pc, #120]	; (4016f0 <cmd_nDat8+0xe0>)
  401678:	f04f 0300 	mov.w	r3, #0
  40167c:	47a0      	blx	r4
  40167e:	4602      	mov	r2, r0
  401680:	460b      	mov	r3, r1
  401682:	4613      	mov	r3, r2
  401684:	4618      	mov	r0, r3
  401686:	4b1b      	ldr	r3, [pc, #108]	; (4016f4 <cmd_nDat8+0xe4>)
  401688:	4798      	blx	r3
	 pio_set(Wclk);			//LATEbits.LATE13 =1;              //LATE |= 0x2000;
  40168a:	4816      	ldr	r0, [pc, #88]	; (4016e4 <cmd_nDat8+0xd4>)
  40168c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401690:	4b13      	ldr	r3, [pc, #76]	; (4016e0 <cmd_nDat8+0xd0>)
  401692:	4798      	blx	r3
	 delay_us(1);
  401694:	4b14      	ldr	r3, [pc, #80]	; (4016e8 <cmd_nDat8+0xd8>)
  401696:	4798      	blx	r3
  401698:	4603      	mov	r3, r0
  40169a:	4618      	mov	r0, r3
  40169c:	f04f 0100 	mov.w	r1, #0
  4016a0:	a30b      	add	r3, pc, #44	; (adr r3, 4016d0 <cmd_nDat8+0xc0>)
  4016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016a6:	1812      	adds	r2, r2, r0
  4016a8:	eb43 0301 	adc.w	r3, r3, r1
  4016ac:	4c0f      	ldr	r4, [pc, #60]	; (4016ec <cmd_nDat8+0xdc>)
  4016ae:	4610      	mov	r0, r2
  4016b0:	4619      	mov	r1, r3
  4016b2:	4a0f      	ldr	r2, [pc, #60]	; (4016f0 <cmd_nDat8+0xe0>)
  4016b4:	f04f 0300 	mov.w	r3, #0
  4016b8:	47a0      	blx	r4
  4016ba:	4602      	mov	r2, r0
  4016bc:	460b      	mov	r3, r1
  4016be:	4613      	mov	r3, r2
  4016c0:	4618      	mov	r0, r3
  4016c2:	4b0c      	ldr	r3, [pc, #48]	; (4016f4 <cmd_nDat8+0xe4>)
  4016c4:	4798      	blx	r3
 }
  4016c6:	370c      	adds	r7, #12
  4016c8:	46bd      	mov	sp, r7
  4016ca:	bd90      	pop	{r4, r7, pc}
  4016cc:	f3af 8000 	nop.w
  4016d0:	00d59f7f 	.word	0x00d59f7f
  4016d4:	00000000 	.word	0x00000000
  4016d8:	400e1200 	.word	0x400e1200
  4016dc:	0040039d 	.word	0x0040039d
  4016e0:	00400381 	.word	0x00400381
  4016e4:	400e0e00 	.word	0x400e0e00
  4016e8:	00401549 	.word	0x00401549
  4016ec:	004038d5 	.word	0x004038d5
  4016f0:	00d59f80 	.word	0x00d59f80
  4016f4:	20000001 	.word	0x20000001

004016f8 <lcd_init>:
 /**
 *\brief Initialize hardware for LCD
 */

 void lcd_init(void)
 {
  4016f8:	b590      	push	{r4, r7, lr}
  4016fa:	b083      	sub	sp, #12
  4016fc:	af02      	add	r7, sp, #8
	 
	pmc_enable_periph_clk(ID_PIOC);
  4016fe:	200d      	movs	r0, #13
  401700:	4b2d      	ldr	r3, [pc, #180]	; (4017b8 <lcd_init+0xc0>)
  401702:	4798      	blx	r3
	
	pio_set_output(LCDPower, HIGH, DISABLE, DISABLE);
  401704:	2300      	movs	r3, #0
  401706:	9300      	str	r3, [sp, #0]
  401708:	482c      	ldr	r0, [pc, #176]	; (4017bc <lcd_init+0xc4>)
  40170a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40170e:	2201      	movs	r2, #1
  401710:	2300      	movs	r3, #0
  401712:	4c2b      	ldr	r4, [pc, #172]	; (4017c0 <lcd_init+0xc8>)
  401714:	47a0      	blx	r4
	pio_set_output(LCDReset, LOW, DISABLE, DISABLE);
  401716:	2300      	movs	r3, #0
  401718:	9300      	str	r3, [sp, #0]
  40171a:	4828      	ldr	r0, [pc, #160]	; (4017bc <lcd_init+0xc4>)
  40171c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401720:	2200      	movs	r2, #0
  401722:	2300      	movs	r3, #0
  401724:	4c26      	ldr	r4, [pc, #152]	; (4017c0 <lcd_init+0xc8>)
  401726:	47a0      	blx	r4
	pio_set_output(DnC, HIGH, DISABLE, DISABLE);
  401728:	2300      	movs	r3, #0
  40172a:	9300      	str	r3, [sp, #0]
  40172c:	4825      	ldr	r0, [pc, #148]	; (4017c4 <lcd_init+0xcc>)
  40172e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401732:	2201      	movs	r2, #1
  401734:	2300      	movs	r3, #0
  401736:	4c22      	ldr	r4, [pc, #136]	; (4017c0 <lcd_init+0xc8>)
  401738:	47a0      	blx	r4
	pio_set_output(Wclk, HIGH, DISABLE, DISABLE);
  40173a:	2300      	movs	r3, #0
  40173c:	9300      	str	r3, [sp, #0]
  40173e:	481f      	ldr	r0, [pc, #124]	; (4017bc <lcd_init+0xc4>)
  401740:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401744:	2201      	movs	r2, #1
  401746:	2300      	movs	r3, #0
  401748:	4c1d      	ldr	r4, [pc, #116]	; (4017c0 <lcd_init+0xc8>)
  40174a:	47a0      	blx	r4
	pio_set_output(Rclk, HIGH, DISABLE, DISABLE);
  40174c:	2300      	movs	r3, #0
  40174e:	9300      	str	r3, [sp, #0]
  401750:	481c      	ldr	r0, [pc, #112]	; (4017c4 <lcd_init+0xcc>)
  401752:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401756:	2201      	movs	r2, #1
  401758:	2300      	movs	r3, #0
  40175a:	4c19      	ldr	r4, [pc, #100]	; (4017c0 <lcd_init+0xc8>)
  40175c:	47a0      	blx	r4
	pio_set_output(PIOC, 0x00ff, LOW, DISABLE, DISABLE);
  40175e:	2300      	movs	r3, #0
  401760:	9300      	str	r3, [sp, #0]
  401762:	4818      	ldr	r0, [pc, #96]	; (4017c4 <lcd_init+0xcc>)
  401764:	21ff      	movs	r1, #255	; 0xff
  401766:	2200      	movs	r2, #0
  401768:	2300      	movs	r3, #0
  40176a:	4c15      	ldr	r4, [pc, #84]	; (4017c0 <lcd_init+0xc8>)
  40176c:	47a0      	blx	r4

	delay_us(2);
  40176e:	4b16      	ldr	r3, [pc, #88]	; (4017c8 <lcd_init+0xd0>)
  401770:	4798      	blx	r3
  401772:	4603      	mov	r3, r0
  401774:	461a      	mov	r2, r3
  401776:	f04f 0300 	mov.w	r3, #0
  40177a:	1892      	adds	r2, r2, r2
  40177c:	eb43 0303 	adc.w	r3, r3, r3
  401780:	4610      	mov	r0, r2
  401782:	4619      	mov	r1, r3
  401784:	a30a      	add	r3, pc, #40	; (adr r3, 4017b0 <lcd_init+0xb8>)
  401786:	e9d3 2300 	ldrd	r2, r3, [r3]
  40178a:	1812      	adds	r2, r2, r0
  40178c:	eb43 0301 	adc.w	r3, r3, r1
  401790:	4c0e      	ldr	r4, [pc, #56]	; (4017cc <lcd_init+0xd4>)
  401792:	4610      	mov	r0, r2
  401794:	4619      	mov	r1, r3
  401796:	4a0e      	ldr	r2, [pc, #56]	; (4017d0 <lcd_init+0xd8>)
  401798:	f04f 0300 	mov.w	r3, #0
  40179c:	47a0      	blx	r4
  40179e:	4602      	mov	r2, r0
  4017a0:	460b      	mov	r3, r1
  4017a2:	4613      	mov	r3, r2
  4017a4:	4618      	mov	r0, r3
  4017a6:	4b0b      	ldr	r3, [pc, #44]	; (4017d4 <lcd_init+0xdc>)
  4017a8:	4798      	blx	r3
 }
  4017aa:	3704      	adds	r7, #4
  4017ac:	46bd      	mov	sp, r7
  4017ae:	bd90      	pop	{r4, r7, pc}
  4017b0:	00d59f7f 	.word	0x00d59f7f
  4017b4:	00000000 	.word	0x00000000
  4017b8:	00400ec5 	.word	0x00400ec5
  4017bc:	400e0e00 	.word	0x400e0e00
  4017c0:	00400545 	.word	0x00400545
  4017c4:	400e1200 	.word	0x400e1200
  4017c8:	00401549 	.word	0x00401549
  4017cc:	004038d5 	.word	0x004038d5
  4017d0:	00d59f80 	.word	0x00d59f80
  4017d4:	20000001 	.word	0x20000001

004017d8 <setup_lcd>:
 
 /**
 *\brief Set up registers in LCD to get it ready to display images.
 */
void setup_lcd(void)
{
  4017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017da:	af00      	add	r7, sp, #0
	pio_set(LCDReset);
  4017dc:	48a7      	ldr	r0, [pc, #668]	; (401a7c <setup_lcd+0x2a4>)
  4017de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4017e2:	4ba7      	ldr	r3, [pc, #668]	; (401a80 <setup_lcd+0x2a8>)
  4017e4:	4798      	blx	r3
	delay_ms(6); 
  4017e6:	4ba7      	ldr	r3, [pc, #668]	; (401a84 <setup_lcd+0x2ac>)
  4017e8:	4798      	blx	r3
  4017ea:	4603      	mov	r3, r0
  4017ec:	4618      	mov	r0, r3
  4017ee:	f04f 0100 	mov.w	r1, #0
  4017f2:	4602      	mov	r2, r0
  4017f4:	460b      	mov	r3, r1
  4017f6:	1892      	adds	r2, r2, r2
  4017f8:	eb43 0303 	adc.w	r3, r3, r3
  4017fc:	1812      	adds	r2, r2, r0
  4017fe:	eb43 0301 	adc.w	r3, r3, r1
  401802:	1892      	adds	r2, r2, r2
  401804:	eb43 0303 	adc.w	r3, r3, r3
  401808:	4610      	mov	r0, r2
  40180a:	4619      	mov	r1, r3
  40180c:	f243 62af 	movw	r2, #13999	; 0x36af
  401810:	f04f 0300 	mov.w	r3, #0
  401814:	1812      	adds	r2, r2, r0
  401816:	eb43 0301 	adc.w	r3, r3, r1
  40181a:	4e9b      	ldr	r6, [pc, #620]	; (401a88 <setup_lcd+0x2b0>)
  40181c:	4610      	mov	r0, r2
  40181e:	4619      	mov	r1, r3
  401820:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401824:	f04f 0300 	mov.w	r3, #0
  401828:	47b0      	blx	r6
  40182a:	4602      	mov	r2, r0
  40182c:	460b      	mov	r3, r1
  40182e:	4613      	mov	r3, r2
  401830:	4618      	mov	r0, r3
  401832:	4b96      	ldr	r3, [pc, #600]	; (401a8c <setup_lcd+0x2b4>)
  401834:	4798      	blx	r3
	 
	cmd_nDat8(1, 0x0011);         // Command
  401836:	2001      	movs	r0, #1
  401838:	2111      	movs	r1, #17
  40183a:	4b95      	ldr	r3, [pc, #596]	; (401a90 <setup_lcd+0x2b8>)
  40183c:	4798      	blx	r3
	delay_ms(6);              // Delay 6ms
  40183e:	4b91      	ldr	r3, [pc, #580]	; (401a84 <setup_lcd+0x2ac>)
  401840:	4798      	blx	r3
  401842:	4603      	mov	r3, r0
  401844:	4618      	mov	r0, r3
  401846:	f04f 0100 	mov.w	r1, #0
  40184a:	4602      	mov	r2, r0
  40184c:	460b      	mov	r3, r1
  40184e:	1892      	adds	r2, r2, r2
  401850:	eb43 0303 	adc.w	r3, r3, r3
  401854:	1812      	adds	r2, r2, r0
  401856:	eb43 0301 	adc.w	r3, r3, r1
  40185a:	1892      	adds	r2, r2, r2
  40185c:	eb43 0303 	adc.w	r3, r3, r3
  401860:	4610      	mov	r0, r2
  401862:	4619      	mov	r1, r3
  401864:	f243 62af 	movw	r2, #13999	; 0x36af
  401868:	f04f 0300 	mov.w	r3, #0
  40186c:	1812      	adds	r2, r2, r0
  40186e:	eb43 0301 	adc.w	r3, r3, r1
  401872:	4e85      	ldr	r6, [pc, #532]	; (401a88 <setup_lcd+0x2b0>)
  401874:	4610      	mov	r0, r2
  401876:	4619      	mov	r1, r3
  401878:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40187c:	f04f 0300 	mov.w	r3, #0
  401880:	47b0      	blx	r6
  401882:	4602      	mov	r2, r0
  401884:	460b      	mov	r3, r1
  401886:	4613      	mov	r3, r2
  401888:	4618      	mov	r0, r3
  40188a:	4b80      	ldr	r3, [pc, #512]	; (401a8c <setup_lcd+0x2b4>)
  40188c:	4798      	blx	r3
	cmd_nDat8(1, 0x0028);          // Command
  40188e:	2001      	movs	r0, #1
  401890:	2128      	movs	r1, #40	; 0x28
  401892:	4b7f      	ldr	r3, [pc, #508]	; (401a90 <setup_lcd+0x2b8>)
  401894:	4798      	blx	r3

	// -----------   Power CTL1   -----------------
	cmd_nDat8(1, 0x00C0);          // Command
  401896:	2001      	movs	r0, #1
  401898:	21c0      	movs	r1, #192	; 0xc0
  40189a:	4b7d      	ldr	r3, [pc, #500]	; (401a90 <setup_lcd+0x2b8>)
  40189c:	4798      	blx	r3
	cmd_nDat8(0, 0x0026);          // Data
  40189e:	2000      	movs	r0, #0
  4018a0:	2126      	movs	r1, #38	; 0x26
  4018a2:	4b7b      	ldr	r3, [pc, #492]	; (401a90 <setup_lcd+0x2b8>)
  4018a4:	4798      	blx	r3
	cmd_nDat8(0, 0x0004);         // Data
  4018a6:	2000      	movs	r0, #0
  4018a8:	2104      	movs	r1, #4
  4018aa:	4b79      	ldr	r3, [pc, #484]	; (401a90 <setup_lcd+0x2b8>)
  4018ac:	4798      	blx	r3

	// -----------   Power CTL2   -----------------
	cmd_nDat8(1, 0x00C1);
  4018ae:	2001      	movs	r0, #1
  4018b0:	21c1      	movs	r1, #193	; 0xc1
  4018b2:	4b77      	ldr	r3, [pc, #476]	; (401a90 <setup_lcd+0x2b8>)
  4018b4:	4798      	blx	r3
	cmd_nDat8(0, 0x0004);
  4018b6:	2000      	movs	r0, #0
  4018b8:	2104      	movs	r1, #4
  4018ba:	4b75      	ldr	r3, [pc, #468]	; (401a90 <setup_lcd+0x2b8>)
  4018bc:	4798      	blx	r3

	// -----------   VCOM CTL1   -----------------
	cmd_nDat8(1, 0x00C5);
  4018be:	2001      	movs	r0, #1
  4018c0:	21c5      	movs	r1, #197	; 0xc5
  4018c2:	4b73      	ldr	r3, [pc, #460]	; (401a90 <setup_lcd+0x2b8>)
  4018c4:	4798      	blx	r3
	cmd_nDat8(0, 0x0034);
  4018c6:	2000      	movs	r0, #0
  4018c8:	2134      	movs	r1, #52	; 0x34
  4018ca:	4b71      	ldr	r3, [pc, #452]	; (401a90 <setup_lcd+0x2b8>)
  4018cc:	4798      	blx	r3
	cmd_nDat8(0, 0x0040);
  4018ce:	2000      	movs	r0, #0
  4018d0:	2140      	movs	r1, #64	; 0x40
  4018d2:	4b6f      	ldr	r3, [pc, #444]	; (401a90 <setup_lcd+0x2b8>)
  4018d4:	4798      	blx	r3

	// -----------   FRAME RATE   -----------------
	cmd_nDat8(1, 0x00B1);
  4018d6:	2001      	movs	r0, #1
  4018d8:	21b1      	movs	r1, #177	; 0xb1
  4018da:	4b6d      	ldr	r3, [pc, #436]	; (401a90 <setup_lcd+0x2b8>)
  4018dc:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);
  4018de:	2000      	movs	r0, #0
  4018e0:	2100      	movs	r1, #0
  4018e2:	4b6b      	ldr	r3, [pc, #428]	; (401a90 <setup_lcd+0x2b8>)
  4018e4:	4798      	blx	r3
	cmd_nDat8(0, 0x0018);
  4018e6:	2000      	movs	r0, #0
  4018e8:	2118      	movs	r1, #24
  4018ea:	4b69      	ldr	r3, [pc, #420]	; (401a90 <setup_lcd+0x2b8>)
  4018ec:	4798      	blx	r3

	// -----------   DISPLAY FUNCTION   -----------------
	cmd_nDat8(1, 0x00B6);
  4018ee:	2001      	movs	r0, #1
  4018f0:	21b6      	movs	r1, #182	; 0xb6
  4018f2:	4b67      	ldr	r3, [pc, #412]	; (401a90 <setup_lcd+0x2b8>)
  4018f4:	4798      	blx	r3
	cmd_nDat8(0, 0x000A);
  4018f6:	2000      	movs	r0, #0
  4018f8:	210a      	movs	r1, #10
  4018fa:	4b65      	ldr	r3, [pc, #404]	; (401a90 <setup_lcd+0x2b8>)
  4018fc:	4798      	blx	r3
	cmd_nDat8(0, 0x00A2);
  4018fe:	2000      	movs	r0, #0
  401900:	21a2      	movs	r1, #162	; 0xa2
  401902:	4b63      	ldr	r3, [pc, #396]	; (401a90 <setup_lcd+0x2b8>)
  401904:	4798      	blx	r3
	cmd_nDat8(0, 0x0027);
  401906:	2000      	movs	r0, #0
  401908:	2127      	movs	r1, #39	; 0x27
  40190a:	4b61      	ldr	r3, [pc, #388]	; (401a90 <setup_lcd+0x2b8>)
  40190c:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);
  40190e:	2000      	movs	r0, #0
  401910:	2100      	movs	r1, #0
  401912:	4b5f      	ldr	r3, [pc, #380]	; (401a90 <setup_lcd+0x2b8>)
  401914:	4798      	blx	r3

	// -----------   MEM ACCESS = BGR  (as in RGB) -----------------
	cmd_nDat8(1, 0x0036);
  401916:	2001      	movs	r0, #1
  401918:	2136      	movs	r1, #54	; 0x36
  40191a:	4b5d      	ldr	r3, [pc, #372]	; (401a90 <setup_lcd+0x2b8>)
  40191c:	4798      	blx	r3
	cmd_nDat8(0, 0x0008);
  40191e:	2000      	movs	r0, #0
  401920:	2108      	movs	r1, #8
  401922:	4b5b      	ldr	r3, [pc, #364]	; (401a90 <setup_lcd+0x2b8>)
  401924:	4798      	blx	r3
	
	// ----------- VCOM CTL2  -----------------
	cmd_nDat8(1, 0x00C7);
  401926:	2001      	movs	r0, #1
  401928:	21c7      	movs	r1, #199	; 0xc7
  40192a:	4b59      	ldr	r3, [pc, #356]	; (401a90 <setup_lcd+0x2b8>)
  40192c:	4798      	blx	r3
	cmd_nDat8(0, 0x00C0);
  40192e:	2000      	movs	r0, #0
  401930:	21c0      	movs	r1, #192	; 0xc0
  401932:	4b57      	ldr	r3, [pc, #348]	; (401a90 <setup_lcd+0x2b8>)
  401934:	4798      	blx	r3

	// ----------- PIXEL = 16 BIT  -----------------
	cmd_nDat8(1, 0x003A);
  401936:	2001      	movs	r0, #1
  401938:	213a      	movs	r1, #58	; 0x3a
  40193a:	4b55      	ldr	r3, [pc, #340]	; (401a90 <setup_lcd+0x2b8>)
  40193c:	4798      	blx	r3
	cmd_nDat8(0, 0x0055);
  40193e:	2000      	movs	r0, #0
  401940:	2155      	movs	r1, #85	; 0x55
  401942:	4b53      	ldr	r3, [pc, #332]	; (401a90 <setup_lcd+0x2b8>)
  401944:	4798      	blx	r3

	// ----------- GAMMA POS  -----------------
	cmd_nDat8(1, 0x00E0);
  401946:	2001      	movs	r0, #1
  401948:	21e0      	movs	r1, #224	; 0xe0
  40194a:	4b51      	ldr	r3, [pc, #324]	; (401a90 <setup_lcd+0x2b8>)
  40194c:	4798      	blx	r3
	cmd_nDat8(0, 0x001F);    // Data1
  40194e:	2000      	movs	r0, #0
  401950:	211f      	movs	r1, #31
  401952:	4b4f      	ldr	r3, [pc, #316]	; (401a90 <setup_lcd+0x2b8>)
  401954:	4798      	blx	r3
	cmd_nDat8(0, 0x001B);    // Data2
  401956:	2000      	movs	r0, #0
  401958:	211b      	movs	r1, #27
  40195a:	4b4d      	ldr	r3, [pc, #308]	; (401a90 <setup_lcd+0x2b8>)
  40195c:	4798      	blx	r3
	cmd_nDat8(0, 0x0018);    // Data3
  40195e:	2000      	movs	r0, #0
  401960:	2118      	movs	r1, #24
  401962:	4b4b      	ldr	r3, [pc, #300]	; (401a90 <setup_lcd+0x2b8>)
  401964:	4798      	blx	r3
	cmd_nDat8(0, 0x000B);    // Data4
  401966:	2000      	movs	r0, #0
  401968:	210b      	movs	r1, #11
  40196a:	4b49      	ldr	r3, [pc, #292]	; (401a90 <setup_lcd+0x2b8>)
  40196c:	4798      	blx	r3
	cmd_nDat8(0, 0x000F);    // Data5
  40196e:	2000      	movs	r0, #0
  401970:	210f      	movs	r1, #15
  401972:	4b47      	ldr	r3, [pc, #284]	; (401a90 <setup_lcd+0x2b8>)
  401974:	4798      	blx	r3

	cmd_nDat8(0, 0x0009);    // Data6
  401976:	2000      	movs	r0, #0
  401978:	2109      	movs	r1, #9
  40197a:	4b45      	ldr	r3, [pc, #276]	; (401a90 <setup_lcd+0x2b8>)
  40197c:	4798      	blx	r3
	cmd_nDat8(0, 0x0046);    // Data7
  40197e:	2000      	movs	r0, #0
  401980:	2146      	movs	r1, #70	; 0x46
  401982:	4b43      	ldr	r3, [pc, #268]	; (401a90 <setup_lcd+0x2b8>)
  401984:	4798      	blx	r3
	cmd_nDat8(0, 0x00B5);    // Data8
  401986:	2000      	movs	r0, #0
  401988:	21b5      	movs	r1, #181	; 0xb5
  40198a:	4b41      	ldr	r3, [pc, #260]	; (401a90 <setup_lcd+0x2b8>)
  40198c:	4798      	blx	r3
	cmd_nDat8(0, 0x0037);    // Data9
  40198e:	2000      	movs	r0, #0
  401990:	2137      	movs	r1, #55	; 0x37
  401992:	4b3f      	ldr	r3, [pc, #252]	; (401a90 <setup_lcd+0x2b8>)
  401994:	4798      	blx	r3
	cmd_nDat8(0, 0x000A);    // Data10
  401996:	2000      	movs	r0, #0
  401998:	210a      	movs	r1, #10
  40199a:	4b3d      	ldr	r3, [pc, #244]	; (401a90 <setup_lcd+0x2b8>)
  40199c:	4798      	blx	r3
	
	cmd_nDat8(0, 0x000C);    // Data11
  40199e:	2000      	movs	r0, #0
  4019a0:	210c      	movs	r1, #12
  4019a2:	4b3b      	ldr	r3, [pc, #236]	; (401a90 <setup_lcd+0x2b8>)
  4019a4:	4798      	blx	r3
	cmd_nDat8(0, 0x0007);    // Data12
  4019a6:	2000      	movs	r0, #0
  4019a8:	2107      	movs	r1, #7
  4019aa:	4b39      	ldr	r3, [pc, #228]	; (401a90 <setup_lcd+0x2b8>)
  4019ac:	4798      	blx	r3
	cmd_nDat8(0, 0x0007);    // Data13
  4019ae:	2000      	movs	r0, #0
  4019b0:	2107      	movs	r1, #7
  4019b2:	4b37      	ldr	r3, [pc, #220]	; (401a90 <setup_lcd+0x2b8>)
  4019b4:	4798      	blx	r3
	cmd_nDat8(0, 0x0005);    // Data14
  4019b6:	2000      	movs	r0, #0
  4019b8:	2105      	movs	r1, #5
  4019ba:	4b35      	ldr	r3, [pc, #212]	; (401a90 <setup_lcd+0x2b8>)
  4019bc:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data15
  4019be:	2000      	movs	r0, #0
  4019c0:	2100      	movs	r1, #0
  4019c2:	4b33      	ldr	r3, [pc, #204]	; (401a90 <setup_lcd+0x2b8>)
  4019c4:	4798      	blx	r3

	// ----------- GAMMA NEG  -----------------
	cmd_nDat8(1, 0x00E1);
  4019c6:	2001      	movs	r0, #1
  4019c8:	21e1      	movs	r1, #225	; 0xe1
  4019ca:	4b31      	ldr	r3, [pc, #196]	; (401a90 <setup_lcd+0x2b8>)
  4019cc:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data1
  4019ce:	2000      	movs	r0, #0
  4019d0:	2100      	movs	r1, #0
  4019d2:	4b2f      	ldr	r3, [pc, #188]	; (401a90 <setup_lcd+0x2b8>)
  4019d4:	4798      	blx	r3
	cmd_nDat8(0, 0x0024);    // Data2
  4019d6:	2000      	movs	r0, #0
  4019d8:	2124      	movs	r1, #36	; 0x24
  4019da:	4b2d      	ldr	r3, [pc, #180]	; (401a90 <setup_lcd+0x2b8>)
  4019dc:	4798      	blx	r3
	cmd_nDat8(0, 0x0027);    // Data3
  4019de:	2000      	movs	r0, #0
  4019e0:	2127      	movs	r1, #39	; 0x27
  4019e2:	4b2b      	ldr	r3, [pc, #172]	; (401a90 <setup_lcd+0x2b8>)
  4019e4:	4798      	blx	r3
	cmd_nDat8(0, 0x0004);    // Data4
  4019e6:	2000      	movs	r0, #0
  4019e8:	2104      	movs	r1, #4
  4019ea:	4b29      	ldr	r3, [pc, #164]	; (401a90 <setup_lcd+0x2b8>)
  4019ec:	4798      	blx	r3
	cmd_nDat8(0, 0x0010);    // Data5
  4019ee:	2000      	movs	r0, #0
  4019f0:	2110      	movs	r1, #16
  4019f2:	4b27      	ldr	r3, [pc, #156]	; (401a90 <setup_lcd+0x2b8>)
  4019f4:	4798      	blx	r3
	cmd_nDat8(0, 0x0006);    // Data6
  4019f6:	2000      	movs	r0, #0
  4019f8:	2106      	movs	r1, #6
  4019fa:	4b25      	ldr	r3, [pc, #148]	; (401a90 <setup_lcd+0x2b8>)
  4019fc:	4798      	blx	r3
	cmd_nDat8(0, 0x0039);    // Data7
  4019fe:	2000      	movs	r0, #0
  401a00:	2139      	movs	r1, #57	; 0x39
  401a02:	4b23      	ldr	r3, [pc, #140]	; (401a90 <setup_lcd+0x2b8>)
  401a04:	4798      	blx	r3
	cmd_nDat8(0, 0x0074);    // Data8
  401a06:	2000      	movs	r0, #0
  401a08:	2174      	movs	r1, #116	; 0x74
  401a0a:	4b21      	ldr	r3, [pc, #132]	; (401a90 <setup_lcd+0x2b8>)
  401a0c:	4798      	blx	r3
	cmd_nDat8(0, 0x0048);    // Data9
  401a0e:	2000      	movs	r0, #0
  401a10:	2148      	movs	r1, #72	; 0x48
  401a12:	4b1f      	ldr	r3, [pc, #124]	; (401a90 <setup_lcd+0x2b8>)
  401a14:	4798      	blx	r3
	cmd_nDat8(0, 0x0005);    // Data10
  401a16:	2000      	movs	r0, #0
  401a18:	2105      	movs	r1, #5
  401a1a:	4b1d      	ldr	r3, [pc, #116]	; (401a90 <setup_lcd+0x2b8>)
  401a1c:	4798      	blx	r3
	cmd_nDat8(0, 0x0013);    // Data11
  401a1e:	2000      	movs	r0, #0
  401a20:	2113      	movs	r1, #19
  401a22:	4b1b      	ldr	r3, [pc, #108]	; (401a90 <setup_lcd+0x2b8>)
  401a24:	4798      	blx	r3
	cmd_nDat8(0, 0x0038);    // Data12
  401a26:	2000      	movs	r0, #0
  401a28:	2138      	movs	r1, #56	; 0x38
  401a2a:	4b19      	ldr	r3, [pc, #100]	; (401a90 <setup_lcd+0x2b8>)
  401a2c:	4798      	blx	r3
	cmd_nDat8(0, 0x0038);    // Data13
  401a2e:	2000      	movs	r0, #0
  401a30:	2138      	movs	r1, #56	; 0x38
  401a32:	4b17      	ldr	r3, [pc, #92]	; (401a90 <setup_lcd+0x2b8>)
  401a34:	4798      	blx	r3
	cmd_nDat8(0, 0x003A);    // Data14
  401a36:	2000      	movs	r0, #0
  401a38:	213a      	movs	r1, #58	; 0x3a
  401a3a:	4b15      	ldr	r3, [pc, #84]	; (401a90 <setup_lcd+0x2b8>)
  401a3c:	4798      	blx	r3
	cmd_nDat8(0, 0x001F);    // Data15
  401a3e:	2000      	movs	r0, #0
  401a40:	211f      	movs	r1, #31
  401a42:	4b13      	ldr	r3, [pc, #76]	; (401a90 <setup_lcd+0x2b8>)
  401a44:	4798      	blx	r3

	// ----------- COLUMN ADDRESS  -----------------
	cmd_nDat8(1, 0x002A);
  401a46:	2001      	movs	r0, #1
  401a48:	212a      	movs	r1, #42	; 0x2a
  401a4a:	4b11      	ldr	r3, [pc, #68]	; (401a90 <setup_lcd+0x2b8>)
  401a4c:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data1
  401a4e:	2000      	movs	r0, #0
  401a50:	2100      	movs	r1, #0
  401a52:	4b0f      	ldr	r3, [pc, #60]	; (401a90 <setup_lcd+0x2b8>)
  401a54:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data2
  401a56:	2000      	movs	r0, #0
  401a58:	2100      	movs	r1, #0
  401a5a:	4b0d      	ldr	r3, [pc, #52]	; (401a90 <setup_lcd+0x2b8>)
  401a5c:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data3
  401a5e:	2000      	movs	r0, #0
  401a60:	2100      	movs	r1, #0
  401a62:	4b0b      	ldr	r3, [pc, #44]	; (401a90 <setup_lcd+0x2b8>)
  401a64:	4798      	blx	r3
	cmd_nDat8(0, 0x00EF);    // Data4
  401a66:	2000      	movs	r0, #0
  401a68:	21ef      	movs	r1, #239	; 0xef
  401a6a:	4b09      	ldr	r3, [pc, #36]	; (401a90 <setup_lcd+0x2b8>)
  401a6c:	4798      	blx	r3

	// ----------- ROW ADDRESS  -----------------
	cmd_nDat8(1, 0x002B);
  401a6e:	2001      	movs	r0, #1
  401a70:	212b      	movs	r1, #43	; 0x2b
  401a72:	4b07      	ldr	r3, [pc, #28]	; (401a90 <setup_lcd+0x2b8>)
  401a74:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data1
  401a76:	2000      	movs	r0, #0
  401a78:	2100      	movs	r1, #0
  401a7a:	e00b      	b.n	401a94 <setup_lcd+0x2bc>
  401a7c:	400e0e00 	.word	0x400e0e00
  401a80:	00400381 	.word	0x00400381
  401a84:	00401549 	.word	0x00401549
  401a88:	004038d5 	.word	0x004038d5
  401a8c:	20000001 	.word	0x20000001
  401a90:	00401611 	.word	0x00401611
  401a94:	4b2e      	ldr	r3, [pc, #184]	; (401b50 <setup_lcd+0x378>)
  401a96:	4798      	blx	r3
	cmd_nDat8(0, 0x0000);    // Data2
  401a98:	2000      	movs	r0, #0
  401a9a:	2100      	movs	r1, #0
  401a9c:	4b2c      	ldr	r3, [pc, #176]	; (401b50 <setup_lcd+0x378>)
  401a9e:	4798      	blx	r3
	cmd_nDat8(0, 0x0001);    // Data3
  401aa0:	2000      	movs	r0, #0
  401aa2:	2101      	movs	r1, #1
  401aa4:	4b2a      	ldr	r3, [pc, #168]	; (401b50 <setup_lcd+0x378>)
  401aa6:	4798      	blx	r3
	cmd_nDat8(0, 0x003F);    // Data4       /// simultaneous sampling //DS configuration for 1.1MSPS  // a2d pdf....CPU info
  401aa8:	2000      	movs	r0, #0
  401aaa:	213f      	movs	r1, #63	; 0x3f
  401aac:	4b28      	ldr	r3, [pc, #160]	; (401b50 <setup_lcd+0x378>)
  401aae:	4798      	blx	r3

	// ----------- DISPLAY ON -----------------
	cmd_nDat8(1, 0x0029);
  401ab0:	2001      	movs	r0, #1
  401ab2:	2129      	movs	r1, #41	; 0x29
  401ab4:	4b26      	ldr	r3, [pc, #152]	; (401b50 <setup_lcd+0x378>)
  401ab6:	4798      	blx	r3
   // --------------------------------------------------------------------------
   //################### DELAY 24mS ############################
   //  MINUMUM DELAY FOR DISPLAY CORRECTLY IS 20mS ########
   delay_ms(24);
  401ab8:	4b26      	ldr	r3, [pc, #152]	; (401b54 <setup_lcd+0x37c>)
  401aba:	4798      	blx	r3
  401abc:	4603      	mov	r3, r0
  401abe:	4618      	mov	r0, r3
  401ac0:	f04f 0100 	mov.w	r1, #0
  401ac4:	4602      	mov	r2, r0
  401ac6:	460b      	mov	r3, r1
  401ac8:	1892      	adds	r2, r2, r2
  401aca:	eb43 0303 	adc.w	r3, r3, r3
  401ace:	1812      	adds	r2, r2, r0
  401ad0:	eb43 0301 	adc.w	r3, r3, r1
  401ad4:	00dd      	lsls	r5, r3, #3
  401ad6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
  401ada:	00d4      	lsls	r4, r2, #3
  401adc:	4622      	mov	r2, r4
  401ade:	462b      	mov	r3, r5
  401ae0:	4610      	mov	r0, r2
  401ae2:	4619      	mov	r1, r3
  401ae4:	f243 62af 	movw	r2, #13999	; 0x36af
  401ae8:	f04f 0300 	mov.w	r3, #0
  401aec:	1812      	adds	r2, r2, r0
  401aee:	eb43 0301 	adc.w	r3, r3, r1
  401af2:	4c19      	ldr	r4, [pc, #100]	; (401b58 <setup_lcd+0x380>)
  401af4:	4610      	mov	r0, r2
  401af6:	4619      	mov	r1, r3
  401af8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401afc:	f04f 0300 	mov.w	r3, #0
  401b00:	47a0      	blx	r4
  401b02:	4602      	mov	r2, r0
  401b04:	460b      	mov	r3, r1
  401b06:	4613      	mov	r3, r2
  401b08:	4618      	mov	r0, r3
  401b0a:	4b14      	ldr	r3, [pc, #80]	; (401b5c <setup_lcd+0x384>)
  401b0c:	4798      	blx	r3
             BITS            15                            0
     COLOR IS 16 BITS -----> R R R R R G G G G G G B B B B B

    ############## WRITE G-RAM MEMORY ##########################*/

		cmd_nDat8(1, 0x002C);
  401b0e:	2001      	movs	r0, #1
  401b10:	212c      	movs	r1, #44	; 0x2c
  401b12:	4b0f      	ldr	r3, [pc, #60]	; (401b50 <setup_lcd+0x378>)
  401b14:	4798      	blx	r3
		delay_ms(1);
  401b16:	4b0f      	ldr	r3, [pc, #60]	; (401b54 <setup_lcd+0x37c>)
  401b18:	4798      	blx	r3
  401b1a:	4603      	mov	r3, r0
  401b1c:	4618      	mov	r0, r3
  401b1e:	f04f 0100 	mov.w	r1, #0
  401b22:	f243 62af 	movw	r2, #13999	; 0x36af
  401b26:	f04f 0300 	mov.w	r3, #0
  401b2a:	1812      	adds	r2, r2, r0
  401b2c:	eb43 0301 	adc.w	r3, r3, r1
  401b30:	4c09      	ldr	r4, [pc, #36]	; (401b58 <setup_lcd+0x380>)
  401b32:	4610      	mov	r0, r2
  401b34:	4619      	mov	r1, r3
  401b36:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401b3a:	f04f 0300 	mov.w	r3, #0
  401b3e:	47a0      	blx	r4
  401b40:	4602      	mov	r2, r0
  401b42:	460b      	mov	r3, r1
  401b44:	4613      	mov	r3, r2
  401b46:	4618      	mov	r0, r3
  401b48:	4b04      	ldr	r3, [pc, #16]	; (401b5c <setup_lcd+0x384>)
  401b4a:	4798      	blx	r3
	
 }
  401b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b4e:	bf00      	nop
  401b50:	00401611 	.word	0x00401611
  401b54:	00401549 	.word	0x00401549
  401b58:	004038d5 	.word	0x004038d5
  401b5c:	20000001 	.word	0x20000001

00401b60 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401b60:	b480      	push	{r7}
  401b62:	b083      	sub	sp, #12
  401b64:	af00      	add	r7, sp, #0
  401b66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401b68:	687b      	ldr	r3, [r7, #4]
  401b6a:	2b07      	cmp	r3, #7
  401b6c:	d825      	bhi.n	401bba <osc_get_rate+0x5a>
  401b6e:	a201      	add	r2, pc, #4	; (adr r2, 401b74 <osc_get_rate+0x14>)
  401b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b74:	00401b95 	.word	0x00401b95
  401b78:	00401b9b 	.word	0x00401b9b
  401b7c:	00401ba1 	.word	0x00401ba1
  401b80:	00401ba7 	.word	0x00401ba7
  401b84:	00401bab 	.word	0x00401bab
  401b88:	00401baf 	.word	0x00401baf
  401b8c:	00401bb3 	.word	0x00401bb3
  401b90:	00401bb7 	.word	0x00401bb7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401b94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b98:	e010      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b9e:	e00d      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ba4:	e00a      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401ba6:	4b08      	ldr	r3, [pc, #32]	; (401bc8 <osc_get_rate+0x68>)
  401ba8:	e008      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401baa:	4b08      	ldr	r3, [pc, #32]	; (401bcc <osc_get_rate+0x6c>)
  401bac:	e006      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401bae:	4b08      	ldr	r3, [pc, #32]	; (401bd0 <osc_get_rate+0x70>)
  401bb0:	e004      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401bb2:	4b07      	ldr	r3, [pc, #28]	; (401bd0 <osc_get_rate+0x70>)
  401bb4:	e002      	b.n	401bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401bb6:	4b06      	ldr	r3, [pc, #24]	; (401bd0 <osc_get_rate+0x70>)
  401bb8:	e000      	b.n	401bbc <osc_get_rate+0x5c>
	}

	return 0;
  401bba:	2300      	movs	r3, #0
}
  401bbc:	4618      	mov	r0, r3
  401bbe:	370c      	adds	r7, #12
  401bc0:	46bd      	mov	sp, r7
  401bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc6:	4770      	bx	lr
  401bc8:	003d0900 	.word	0x003d0900
  401bcc:	007a1200 	.word	0x007a1200
  401bd0:	00b71b00 	.word	0x00b71b00

00401bd4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401bd4:	b580      	push	{r7, lr}
  401bd6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401bd8:	2004      	movs	r0, #4
  401bda:	4b05      	ldr	r3, [pc, #20]	; (401bf0 <sysclk_get_main_hz+0x1c>)
  401bdc:	4798      	blx	r3
  401bde:	4602      	mov	r2, r0
  401be0:	4613      	mov	r3, r2
  401be2:	009b      	lsls	r3, r3, #2
  401be4:	4413      	add	r3, r2
  401be6:	009a      	lsls	r2, r3, #2
  401be8:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401bea:	4618      	mov	r0, r3
  401bec:	bd80      	pop	{r7, pc}
  401bee:	bf00      	nop
  401bf0:	00401b61 	.word	0x00401b61

00401bf4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401bf4:	b580      	push	{r7, lr}
  401bf6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401bf8:	4b02      	ldr	r3, [pc, #8]	; (401c04 <sysclk_get_cpu_hz+0x10>)
  401bfa:	4798      	blx	r3
  401bfc:	4603      	mov	r3, r0
  401bfe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401c00:	4618      	mov	r0, r3
  401c02:	bd80      	pop	{r7, pc}
  401c04:	00401bd5 	.word	0x00401bd5

00401c08 <main>:



	
int main (void)
{
  401c08:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c0a:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
  401c0e:	af02      	add	r7, sp, #8
	uint32_t i = 10;
  401c10:	230a      	movs	r3, #10
  401c12:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
	uint8_t sdPresent=0;
  401c16:	2300      	movs	r3, #0
  401c18:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	uint32_t x=1;
  401c1c:	2301      	movs	r3, #1
  401c1e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
	char work[]="something\n\r";
  401c22:	4a93      	ldr	r2, [pc, #588]	; (401e70 <main+0x268>)
  401c24:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
  401c28:	ca07      	ldmia	r2, {r0, r1, r2}
  401c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char filename[] = {"0:hello.txt"};
  401c2e:	4a91      	ldr	r2, [pc, #580]	; (401e74 <main+0x26c>)
  401c30:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
  401c34:	ca07      	ldmia	r2, {r0, r1, r2}
  401c36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sd_mmc_err_t  sdResponse = 55;
  401c3a:	2337      	movs	r3, #55	; 0x37
  401c3c:	f887 34fe 	strb.w	r3, [r7, #1278]	; 0x4fe
	TCHAR * name[20];
	
	twi_options_t opt;
	twi_packet_t packet_tx, packet_rx;
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
  401c40:	4b8d      	ldr	r3, [pc, #564]	; (401e78 <main+0x270>)
  401c42:	4798      	blx	r3
	board_init();
  401c44:	4b8d      	ldr	r3, [pc, #564]	; (401e7c <main+0x274>)
  401c46:	4798      	blx	r3
	wdt_disable(WDT);
  401c48:	488d      	ldr	r0, [pc, #564]	; (401e80 <main+0x278>)
  401c4a:	4b8e      	ldr	r3, [pc, #568]	; (401e84 <main+0x27c>)
  401c4c:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
  401c4e:	200b      	movs	r0, #11
  401c50:	4b8d      	ldr	r3, [pc, #564]	; (401e88 <main+0x280>)
  401c52:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
  401c54:	200c      	movs	r0, #12
  401c56:	4b8c      	ldr	r3, [pc, #560]	; (401e88 <main+0x280>)
  401c58:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
  401c5a:	200d      	movs	r0, #13
  401c5c:	4b8a      	ldr	r3, [pc, #552]	; (401e88 <main+0x280>)
  401c5e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UART3);	// Enabling Uart3 clock to communicate with ESP8266										
  401c60:	2010      	movs	r0, #16
  401c62:	4b89      	ldr	r3, [pc, #548]	; (401e88 <main+0x280>)
  401c64:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TWI2);	// removed pmc_enable_periph_clk(SPI) which should be wrong anyways.
  401c66:	2016      	movs	r0, #22
  401c68:	4b87      	ldr	r3, [pc, #540]	; (401e88 <main+0x280>)
  401c6a:	4798      	blx	r3
	
	uart_custom_init();
  401c6c:	4b87      	ldr	r3, [pc, #540]	; (401e8c <main+0x284>)
  401c6e:	4798      	blx	r3
	sd_mmc_init();
  401c70:	4b87      	ldr	r3, [pc, #540]	; (401e90 <main+0x288>)
  401c72:	4798      	blx	r3

	pio_set_output(ESPTX, HIGH, DISABLE, DISABLE);
  401c74:	2300      	movs	r3, #0
  401c76:	9300      	str	r3, [sp, #0]
  401c78:	4886      	ldr	r0, [pc, #536]	; (401e94 <main+0x28c>)
  401c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401c7e:	2201      	movs	r2, #1
  401c80:	2300      	movs	r3, #0
  401c82:	4c85      	ldr	r4, [pc, #532]	; (401e98 <main+0x290>)
  401c84:	47a0      	blx	r4
	pio_set_output(ESPRST, HIGH, DISABLE, DISABLE);
  401c86:	2300      	movs	r3, #0
  401c88:	9300      	str	r3, [sp, #0]
  401c8a:	4884      	ldr	r0, [pc, #528]	; (401e9c <main+0x294>)
  401c8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  401c90:	2201      	movs	r2, #1
  401c92:	2300      	movs	r3, #0
  401c94:	4c80      	ldr	r4, [pc, #512]	; (401e98 <main+0x290>)
  401c96:	47a0      	blx	r4
	pio_set_input(ESPRX, PIO_DEFAULT);
  401c98:	487e      	ldr	r0, [pc, #504]	; (401e94 <main+0x28c>)
  401c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401c9e:	2200      	movs	r2, #0
  401ca0:	4b7f      	ldr	r3, [pc, #508]	; (401ea0 <main+0x298>)
  401ca2:	4798      	blx	r3
	pio_set_output(BLED, LOW, DISABLE, DISABLE);
  401ca4:	2300      	movs	r3, #0
  401ca6:	9300      	str	r3, [sp, #0]
  401ca8:	487e      	ldr	r0, [pc, #504]	; (401ea4 <main+0x29c>)
  401caa:	2101      	movs	r1, #1
  401cac:	2200      	movs	r2, #0
  401cae:	2300      	movs	r3, #0
  401cb0:	4c79      	ldr	r4, [pc, #484]	; (401e98 <main+0x290>)
  401cb2:	47a0      	blx	r4
	pio_set_output(OLED, LOW, DISABLE, DISABLE);
  401cb4:	2300      	movs	r3, #0
  401cb6:	9300      	str	r3, [sp, #0]
  401cb8:	4878      	ldr	r0, [pc, #480]	; (401e9c <main+0x294>)
  401cba:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401cbe:	2200      	movs	r2, #0
  401cc0:	2300      	movs	r3, #0
  401cc2:	4c75      	ldr	r4, [pc, #468]	; (401e98 <main+0x290>)
  401cc4:	47a0      	blx	r4
	pio_set_output(GLED, LOW, DISABLE, DISABLE);
  401cc6:	2300      	movs	r3, #0
  401cc8:	9300      	str	r3, [sp, #0]
  401cca:	4876      	ldr	r0, [pc, #472]	; (401ea4 <main+0x29c>)
  401ccc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401cd0:	2200      	movs	r2, #0
  401cd2:	2300      	movs	r3, #0
  401cd4:	4c70      	ldr	r4, [pc, #448]	; (401e98 <main+0x290>)
  401cd6:	47a0      	blx	r4
	pio_set_output(EN_COLOR, HIGH, DISABLE, DISABLE);
  401cd8:	2300      	movs	r3, #0
  401cda:	9300      	str	r3, [sp, #0]
  401cdc:	4871      	ldr	r0, [pc, #452]	; (401ea4 <main+0x29c>)
  401cde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ce2:	2201      	movs	r2, #1
  401ce4:	2300      	movs	r3, #0
  401ce6:	4c6c      	ldr	r4, [pc, #432]	; (401e98 <main+0x290>)
  401ce8:	47a0      	blx	r4
	

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  401cea:	4b6f      	ldr	r3, [pc, #444]	; (401ea8 <main+0x2a0>)
  401cec:	4798      	blx	r3
  401cee:	4602      	mov	r2, r0
  401cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  401cf4:	601a      	str	r2, [r3, #0]
	opt.speed      = 50000;
  401cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  401cfa:	f24c 3250 	movw	r2, #50000	; 0xc350
  401cfe:	605a      	str	r2, [r3, #4]

	/* Configure the data packet to be transmitted */
	packet_tx.chip        = MMA_ADDR;
  401d00:	f107 0318 	add.w	r3, r7, #24
  401d04:	221c      	movs	r2, #28
  401d06:	741a      	strb	r2, [r3, #16]
	packet_tx.addr[0]     = 0x00;
  401d08:	f107 0318 	add.w	r3, r7, #24
  401d0c:	2200      	movs	r2, #0
  401d0e:	701a      	strb	r2, [r3, #0]

	packet_tx.addr_length = 1;
  401d10:	f107 0318 	add.w	r3, r7, #24
  401d14:	2201      	movs	r2, #1
  401d16:	605a      	str	r2, [r3, #4]
	packet_tx.buffer      = (uint8_t *) twi2Tx;
  401d18:	f107 0318 	add.w	r3, r7, #24
  401d1c:	4a63      	ldr	r2, [pc, #396]	; (401eac <main+0x2a4>)
  401d1e:	609a      	str	r2, [r3, #8]
	packet_tx.length      = sizeof(twi2Tx);
  401d20:	f107 0318 	add.w	r3, r7, #24
  401d24:	2201      	movs	r2, #1
  401d26:	60da      	str	r2, [r3, #12]

	/* Configure the data packet to be received */
	packet_rx.chip        = packet_tx.chip;
  401d28:	f107 0318 	add.w	r3, r7, #24
  401d2c:	7c1a      	ldrb	r2, [r3, #16]
  401d2e:	1d3b      	adds	r3, r7, #4
  401d30:	741a      	strb	r2, [r3, #16]
	packet_rx.addr[0]     = 0x11;
  401d32:	1d3b      	adds	r3, r7, #4
  401d34:	2211      	movs	r2, #17
  401d36:	701a      	strb	r2, [r3, #0]
	packet_rx.addr_length = packet_tx.addr_length;
  401d38:	f107 0318 	add.w	r3, r7, #24
  401d3c:	685a      	ldr	r2, [r3, #4]
  401d3e:	1d3b      	adds	r3, r7, #4
  401d40:	605a      	str	r2, [r3, #4]
	packet_rx.buffer      = twi2Rx;
  401d42:	1d3b      	adds	r3, r7, #4
  401d44:	4a5a      	ldr	r2, [pc, #360]	; (401eb0 <main+0x2a8>)
  401d46:	609a      	str	r2, [r3, #8]
	packet_rx.length      = packet_tx.length;
  401d48:	f107 0318 	add.w	r3, r7, #24
  401d4c:	68da      	ldr	r2, [r3, #12]
  401d4e:	1d3b      	adds	r3, r7, #4
  401d50:	60da      	str	r2, [r3, #12]
	
	if (twi_master_init(TWI2, &opt) != TWI_SUCCESS) 
  401d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  401d56:	4857      	ldr	r0, [pc, #348]	; (401eb4 <main+0x2ac>)
  401d58:	4619      	mov	r1, r3
  401d5a:	4b57      	ldr	r3, [pc, #348]	; (401eb8 <main+0x2b0>)
  401d5c:	4798      	blx	r3
  401d5e:	4603      	mov	r3, r0
  401d60:	2b00      	cmp	r3, #0
  401d62:	d004      	beq.n	401d6e <main+0x166>
	{
		pio_set(GLED);
  401d64:	484f      	ldr	r0, [pc, #316]	; (401ea4 <main+0x29c>)
  401d66:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401d6a:	4b54      	ldr	r3, [pc, #336]	; (401ebc <main+0x2b4>)
  401d6c:	4798      	blx	r3
	}
	delay_ms(6);
  401d6e:	4b4e      	ldr	r3, [pc, #312]	; (401ea8 <main+0x2a0>)
  401d70:	4798      	blx	r3
  401d72:	4603      	mov	r3, r0
  401d74:	4618      	mov	r0, r3
  401d76:	f04f 0100 	mov.w	r1, #0
  401d7a:	4602      	mov	r2, r0
  401d7c:	460b      	mov	r3, r1
  401d7e:	1892      	adds	r2, r2, r2
  401d80:	eb43 0303 	adc.w	r3, r3, r3
  401d84:	1812      	adds	r2, r2, r0
  401d86:	eb43 0301 	adc.w	r3, r3, r1
  401d8a:	1892      	adds	r2, r2, r2
  401d8c:	eb43 0303 	adc.w	r3, r3, r3
  401d90:	4610      	mov	r0, r2
  401d92:	4619      	mov	r1, r3
  401d94:	f243 62af 	movw	r2, #13999	; 0x36af
  401d98:	f04f 0300 	mov.w	r3, #0
  401d9c:	1812      	adds	r2, r2, r0
  401d9e:	eb43 0301 	adc.w	r3, r3, r1
  401da2:	4c47      	ldr	r4, [pc, #284]	; (401ec0 <main+0x2b8>)
  401da4:	4610      	mov	r0, r2
  401da6:	4619      	mov	r1, r3
  401da8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401dac:	f04f 0300 	mov.w	r3, #0
  401db0:	47a0      	blx	r4
  401db2:	4602      	mov	r2, r0
  401db4:	460b      	mov	r3, r1
  401db6:	4613      	mov	r3, r2
  401db8:	4618      	mov	r0, r3
  401dba:	4b42      	ldr	r3, [pc, #264]	; (401ec4 <main+0x2bc>)
  401dbc:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
	uartSend(UART0, work);
	*/
	

	lcd_init();
  401dbe:	4b42      	ldr	r3, [pc, #264]	; (401ec8 <main+0x2c0>)
  401dc0:	4798      	blx	r3
	turnLCDon(); 
  401dc2:	4b42      	ldr	r3, [pc, #264]	; (401ecc <main+0x2c4>)
  401dc4:	4798      	blx	r3
	setup_lcd();
  401dc6:	4b42      	ldr	r3, [pc, #264]	; (401ed0 <main+0x2c8>)
  401dc8:	4798      	blx	r3
while(1)
{
	x += i++;
  401dca:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
  401dce:	1c5a      	adds	r2, r3, #1
  401dd0:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
  401dd4:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
  401dd8:	4413      	add	r3, r2
  401dda:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
	
	drawPixel((i%x)%4+1, (0xffff)*sin(x)*sin(x));
  401dde:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
  401de2:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
  401de6:	fbb3 f2f2 	udiv	r2, r3, r2
  401dea:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
  401dee:	fb01 f202 	mul.w	r2, r1, r2
  401df2:	1a9b      	subs	r3, r3, r2
  401df4:	f003 0303 	and.w	r3, r3, #3
  401df8:	1c5e      	adds	r6, r3, #1
  401dfa:	4b36      	ldr	r3, [pc, #216]	; (401ed4 <main+0x2cc>)
  401dfc:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
  401e00:	4798      	blx	r3
  401e02:	4602      	mov	r2, r0
  401e04:	460b      	mov	r3, r1
  401e06:	4610      	mov	r0, r2
  401e08:	4619      	mov	r1, r3
  401e0a:	4b33      	ldr	r3, [pc, #204]	; (401ed8 <main+0x2d0>)
  401e0c:	4798      	blx	r3
  401e0e:	4602      	mov	r2, r0
  401e10:	460b      	mov	r3, r1
  401e12:	4c32      	ldr	r4, [pc, #200]	; (401edc <main+0x2d4>)
  401e14:	4610      	mov	r0, r2
  401e16:	4619      	mov	r1, r3
  401e18:	a313      	add	r3, pc, #76	; (adr r3, 401e68 <main+0x260>)
  401e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e1e:	47a0      	blx	r4
  401e20:	4602      	mov	r2, r0
  401e22:	460b      	mov	r3, r1
  401e24:	4614      	mov	r4, r2
  401e26:	461d      	mov	r5, r3
  401e28:	4b2a      	ldr	r3, [pc, #168]	; (401ed4 <main+0x2cc>)
  401e2a:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
  401e2e:	4798      	blx	r3
  401e30:	4602      	mov	r2, r0
  401e32:	460b      	mov	r3, r1
  401e34:	4610      	mov	r0, r2
  401e36:	4619      	mov	r1, r3
  401e38:	4b27      	ldr	r3, [pc, #156]	; (401ed8 <main+0x2d0>)
  401e3a:	4798      	blx	r3
  401e3c:	4602      	mov	r2, r0
  401e3e:	460b      	mov	r3, r1
  401e40:	f8df c098 	ldr.w	ip, [pc, #152]	; 401edc <main+0x2d4>
  401e44:	4620      	mov	r0, r4
  401e46:	4629      	mov	r1, r5
  401e48:	47e0      	blx	ip
  401e4a:	4602      	mov	r2, r0
  401e4c:	460b      	mov	r3, r1
  401e4e:	4c24      	ldr	r4, [pc, #144]	; (401ee0 <main+0x2d8>)
  401e50:	4610      	mov	r0, r2
  401e52:	4619      	mov	r1, r3
  401e54:	47a0      	blx	r4
  401e56:	4603      	mov	r3, r0
  401e58:	b29b      	uxth	r3, r3
  401e5a:	4630      	mov	r0, r6
  401e5c:	4619      	mov	r1, r3
  401e5e:	4b21      	ldr	r3, [pc, #132]	; (401ee4 <main+0x2dc>)
  401e60:	4798      	blx	r3
	
}
  401e62:	e7b2      	b.n	401dca <main+0x1c2>
  401e64:	f3af 8000 	nop.w
  401e68:	00000000 	.word	0x00000000
  401e6c:	40efffe0 	.word	0x40efffe0
  401e70:	00403fb0 	.word	0x00403fb0
  401e74:	00403fbc 	.word	0x00403fbc
  401e78:	00400c2d 	.word	0x00400c2d
  401e7c:	00401199 	.word	0x00401199
  401e80:	400e1450 	.word	0x400e1450
  401e84:	00401229 	.word	0x00401229
  401e88:	00400ec5 	.word	0x00400ec5
  401e8c:	00401ee9 	.word	0x00401ee9
  401e90:	00400171 	.word	0x00400171
  401e94:	400e1000 	.word	0x400e1000
  401e98:	00400545 	.word	0x00400545
  401e9c:	400e1200 	.word	0x400e1200
  401ea0:	004004c9 	.word	0x004004c9
  401ea4:	400e0e00 	.word	0x400e0e00
  401ea8:	00401bf5 	.word	0x00401bf5
  401eac:	20000508 	.word	0x20000508
  401eb0:	2000050c 	.word	0x2000050c
  401eb4:	40040000 	.word	0x40040000
  401eb8:	00400871 	.word	0x00400871
  401ebc:	00400381 	.word	0x00400381
  401ec0:	004038d5 	.word	0x004038d5
  401ec4:	20000001 	.word	0x20000001
  401ec8:	004016f9 	.word	0x004016f9
  401ecc:	0040155d 	.word	0x0040155d
  401ed0:	004017d9 	.word	0x004017d9
  401ed4:	00403225 	.word	0x00403225
  401ed8:	00401f41 	.word	0x00401f41
  401edc:	00403311 	.word	0x00403311
  401ee0:	00403895 	.word	0x00403895
  401ee4:	00401575 	.word	0x00401575

00401ee8 <uart_custom_init>:

	// Insert application code here, after the board has been initialized.
}

void uart_custom_init(void)
{
  401ee8:	b590      	push	{r4, r7, lr}
  401eea:	b085      	sub	sp, #20
  401eec:	af00      	add	r7, sp, #0
	
	// set the pins to use the uart peripheral
	pio_configure(PINS_UART0_PIO, PINS_UART0_TYPE, PINS_UART0_MASK, PINS_UART0_ATTR);
  401eee:	480e      	ldr	r0, [pc, #56]	; (401f28 <uart_custom_init+0x40>)
  401ef0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ef4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  401ef8:	2300      	movs	r3, #0
  401efa:	4c0c      	ldr	r4, [pc, #48]	; (401f2c <uart_custom_init+0x44>)
  401efc:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_UART0);
  401efe:	2008      	movs	r0, #8
  401f00:	4b0b      	ldr	r3, [pc, #44]	; (401f30 <uart_custom_init+0x48>)
  401f02:	4798      	blx	r3


	const sam_uart_opt_t uart0_settings ={ sysclk_get_cpu_hz(), UART_SERIAL_BAUDRATE, UART_SERIAL_MODE };
  401f04:	4b0b      	ldr	r3, [pc, #44]	; (401f34 <uart_custom_init+0x4c>)
  401f06:	4798      	blx	r3
  401f08:	4603      	mov	r3, r0
  401f0a:	607b      	str	r3, [r7, #4]
  401f0c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  401f10:	60bb      	str	r3, [r7, #8]
  401f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f16:	60fb      	str	r3, [r7, #12]

	uart_init(UART0,&uart0_settings);      //Init UART1 and enable Rx and Tx
  401f18:	1d3b      	adds	r3, r7, #4
  401f1a:	4807      	ldr	r0, [pc, #28]	; (401f38 <uart_custom_init+0x50>)
  401f1c:	4619      	mov	r1, r3
  401f1e:	4b07      	ldr	r3, [pc, #28]	; (401f3c <uart_custom_init+0x54>)
  401f20:	4798      	blx	r3
/*
	uart_enable_interrupt(UART0,UART_IER_RXRDY);   //Interrupt reading ready
	NVIC_EnableIRQ(UART1_IRQn);
*/
}
  401f22:	3714      	adds	r7, #20
  401f24:	46bd      	mov	sp, r7
  401f26:	bd90      	pop	{r4, r7, pc}
  401f28:	400e0e00 	.word	0x400e0e00
  401f2c:	004005a9 	.word	0x004005a9
  401f30:	00400ec5 	.word	0x00400ec5
  401f34:	00401bf5 	.word	0x00401bf5
  401f38:	400e0600 	.word	0x400e0600
  401f3c:	00400f15 	.word	0x00400f15

00401f40 <sin>:
  401f40:	b530      	push	{r4, r5, lr}
  401f42:	4d1a      	ldr	r5, [pc, #104]	; (401fac <sin+0x6c>)
  401f44:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  401f48:	42ac      	cmp	r4, r5
  401f4a:	b087      	sub	sp, #28
  401f4c:	4602      	mov	r2, r0
  401f4e:	460b      	mov	r3, r1
  401f50:	dc04      	bgt.n	401f5c <sin+0x1c>
  401f52:	2300      	movs	r3, #0
  401f54:	9300      	str	r3, [sp, #0]
  401f56:	2200      	movs	r2, #0
  401f58:	2300      	movs	r3, #0
  401f5a:	e015      	b.n	401f88 <sin+0x48>
  401f5c:	4d14      	ldr	r5, [pc, #80]	; (401fb0 <sin+0x70>)
  401f5e:	42ac      	cmp	r4, r5
  401f60:	dd02      	ble.n	401f68 <sin+0x28>
  401f62:	f001 f821 	bl	402fa8 <__aeabi_dsub>
  401f66:	e01e      	b.n	401fa6 <sin+0x66>
  401f68:	aa02      	add	r2, sp, #8
  401f6a:	f000 f825 	bl	401fb8 <__ieee754_rem_pio2>
  401f6e:	f000 0403 	and.w	r4, r0, #3
  401f72:	2c01      	cmp	r4, #1
  401f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401f7c:	d007      	beq.n	401f8e <sin+0x4e>
  401f7e:	2c02      	cmp	r4, #2
  401f80:	d008      	beq.n	401f94 <sin+0x54>
  401f82:	b964      	cbnz	r4, 401f9e <sin+0x5e>
  401f84:	2401      	movs	r4, #1
  401f86:	9400      	str	r4, [sp, #0]
  401f88:	f000 fe42 	bl	402c10 <__kernel_sin>
  401f8c:	e00b      	b.n	401fa6 <sin+0x66>
  401f8e:	f000 fa0b 	bl	4023a8 <__kernel_cos>
  401f92:	e008      	b.n	401fa6 <sin+0x66>
  401f94:	2401      	movs	r4, #1
  401f96:	9400      	str	r4, [sp, #0]
  401f98:	f000 fe3a 	bl	402c10 <__kernel_sin>
  401f9c:	e001      	b.n	401fa2 <sin+0x62>
  401f9e:	f000 fa03 	bl	4023a8 <__kernel_cos>
  401fa2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401fa6:	b007      	add	sp, #28
  401fa8:	bd30      	pop	{r4, r5, pc}
  401faa:	bf00      	nop
  401fac:	3fe921fb 	.word	0x3fe921fb
  401fb0:	7fefffff 	.word	0x7fefffff
  401fb4:	00000000 	.word	0x00000000

00401fb8 <__ieee754_rem_pio2>:
  401fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fbc:	4604      	mov	r4, r0
  401fbe:	b08f      	sub	sp, #60	; 0x3c
  401fc0:	460d      	mov	r5, r1
  401fc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  401fc6:	4692      	mov	sl, r2
  401fc8:	9a07      	ldr	r2, [sp, #28]
  401fca:	4ba9      	ldr	r3, [pc, #676]	; (402270 <__ieee754_rem_pio2+0x2b8>)
  401fcc:	f022 4800 	bic.w	r8, r2, #2147483648	; 0x80000000
  401fd0:	4598      	cmp	r8, r3
  401fd2:	dc06      	bgt.n	401fe2 <__ieee754_rem_pio2+0x2a>
  401fd4:	2200      	movs	r2, #0
  401fd6:	2300      	movs	r3, #0
  401fd8:	e9ca 4500 	strd	r4, r5, [sl]
  401fdc:	e9ca 2302 	strd	r2, r3, [sl, #8]
  401fe0:	e17f      	b.n	4022e2 <__ieee754_rem_pio2+0x32a>
  401fe2:	4ba4      	ldr	r3, [pc, #656]	; (402274 <__ieee754_rem_pio2+0x2bc>)
  401fe4:	4598      	cmp	r8, r3
  401fe6:	dc6f      	bgt.n	4020c8 <__ieee754_rem_pio2+0x110>
  401fe8:	9b07      	ldr	r3, [sp, #28]
  401fea:	4ea3      	ldr	r6, [pc, #652]	; (402278 <__ieee754_rem_pio2+0x2c0>)
  401fec:	2b00      	cmp	r3, #0
  401fee:	a392      	add	r3, pc, #584	; (adr r3, 402238 <__ieee754_rem_pio2+0x280>)
  401ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ff4:	dd33      	ble.n	40205e <__ieee754_rem_pio2+0xa6>
  401ff6:	f000 ffd7 	bl	402fa8 <__aeabi_dsub>
  401ffa:	45b0      	cmp	r8, r6
  401ffc:	4604      	mov	r4, r0
  401ffe:	460d      	mov	r5, r1
  402000:	d010      	beq.n	402024 <__ieee754_rem_pio2+0x6c>
  402002:	a38f      	add	r3, pc, #572	; (adr r3, 402240 <__ieee754_rem_pio2+0x288>)
  402004:	e9d3 2300 	ldrd	r2, r3, [r3]
  402008:	f000 ffce 	bl	402fa8 <__aeabi_dsub>
  40200c:	4602      	mov	r2, r0
  40200e:	460b      	mov	r3, r1
  402010:	e9ca 2300 	strd	r2, r3, [sl]
  402014:	4620      	mov	r0, r4
  402016:	4629      	mov	r1, r5
  402018:	f000 ffc6 	bl	402fa8 <__aeabi_dsub>
  40201c:	a388      	add	r3, pc, #544	; (adr r3, 402240 <__ieee754_rem_pio2+0x288>)
  40201e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402022:	e016      	b.n	402052 <__ieee754_rem_pio2+0x9a>
  402024:	a388      	add	r3, pc, #544	; (adr r3, 402248 <__ieee754_rem_pio2+0x290>)
  402026:	e9d3 2300 	ldrd	r2, r3, [r3]
  40202a:	f000 ffbd 	bl	402fa8 <__aeabi_dsub>
  40202e:	a388      	add	r3, pc, #544	; (adr r3, 402250 <__ieee754_rem_pio2+0x298>)
  402030:	e9d3 2300 	ldrd	r2, r3, [r3]
  402034:	4604      	mov	r4, r0
  402036:	460d      	mov	r5, r1
  402038:	f000 ffb6 	bl	402fa8 <__aeabi_dsub>
  40203c:	4602      	mov	r2, r0
  40203e:	460b      	mov	r3, r1
  402040:	e9ca 2300 	strd	r2, r3, [sl]
  402044:	4620      	mov	r0, r4
  402046:	4629      	mov	r1, r5
  402048:	f000 ffae 	bl	402fa8 <__aeabi_dsub>
  40204c:	a380      	add	r3, pc, #512	; (adr r3, 402250 <__ieee754_rem_pio2+0x298>)
  40204e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402052:	f000 ffa9 	bl	402fa8 <__aeabi_dsub>
  402056:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40205a:	2001      	movs	r0, #1
  40205c:	e199      	b.n	402392 <__ieee754_rem_pio2+0x3da>
  40205e:	f000 ffa5 	bl	402fac <__adddf3>
  402062:	45b0      	cmp	r8, r6
  402064:	4604      	mov	r4, r0
  402066:	460d      	mov	r5, r1
  402068:	d010      	beq.n	40208c <__ieee754_rem_pio2+0xd4>
  40206a:	a375      	add	r3, pc, #468	; (adr r3, 402240 <__ieee754_rem_pio2+0x288>)
  40206c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402070:	f000 ff9c 	bl	402fac <__adddf3>
  402074:	4602      	mov	r2, r0
  402076:	460b      	mov	r3, r1
  402078:	e9ca 2300 	strd	r2, r3, [sl]
  40207c:	4620      	mov	r0, r4
  40207e:	4629      	mov	r1, r5
  402080:	f000 ff92 	bl	402fa8 <__aeabi_dsub>
  402084:	a36e      	add	r3, pc, #440	; (adr r3, 402240 <__ieee754_rem_pio2+0x288>)
  402086:	e9d3 2300 	ldrd	r2, r3, [r3]
  40208a:	e016      	b.n	4020ba <__ieee754_rem_pio2+0x102>
  40208c:	a36e      	add	r3, pc, #440	; (adr r3, 402248 <__ieee754_rem_pio2+0x290>)
  40208e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402092:	f000 ff8b 	bl	402fac <__adddf3>
  402096:	a36e      	add	r3, pc, #440	; (adr r3, 402250 <__ieee754_rem_pio2+0x298>)
  402098:	e9d3 2300 	ldrd	r2, r3, [r3]
  40209c:	4604      	mov	r4, r0
  40209e:	460d      	mov	r5, r1
  4020a0:	f000 ff84 	bl	402fac <__adddf3>
  4020a4:	4602      	mov	r2, r0
  4020a6:	460b      	mov	r3, r1
  4020a8:	e9ca 2300 	strd	r2, r3, [sl]
  4020ac:	4620      	mov	r0, r4
  4020ae:	4629      	mov	r1, r5
  4020b0:	f000 ff7a 	bl	402fa8 <__aeabi_dsub>
  4020b4:	a366      	add	r3, pc, #408	; (adr r3, 402250 <__ieee754_rem_pio2+0x298>)
  4020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ba:	f000 ff77 	bl	402fac <__adddf3>
  4020be:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4020c2:	f04f 30ff 	mov.w	r0, #4294967295
  4020c6:	e164      	b.n	402392 <__ieee754_rem_pio2+0x3da>
  4020c8:	4b6c      	ldr	r3, [pc, #432]	; (40227c <__ieee754_rem_pio2+0x2c4>)
  4020ca:	4598      	cmp	r8, r3
  4020cc:	f300 80fe 	bgt.w	4022cc <__ieee754_rem_pio2+0x314>
  4020d0:	f000 fe5e 	bl	402d90 <fabs>
  4020d4:	a360      	add	r3, pc, #384	; (adr r3, 402258 <__ieee754_rem_pio2+0x2a0>)
  4020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020da:	4604      	mov	r4, r0
  4020dc:	460d      	mov	r5, r1
  4020de:	f001 f917 	bl	403310 <__aeabi_dmul>
  4020e2:	2200      	movs	r2, #0
  4020e4:	4b66      	ldr	r3, [pc, #408]	; (402280 <__ieee754_rem_pio2+0x2c8>)
  4020e6:	f000 ff61 	bl	402fac <__adddf3>
  4020ea:	f001 fbab 	bl	403844 <__aeabi_d2iz>
  4020ee:	4683      	mov	fp, r0
  4020f0:	f001 f8a8 	bl	403244 <__aeabi_i2d>
  4020f4:	a350      	add	r3, pc, #320	; (adr r3, 402238 <__ieee754_rem_pio2+0x280>)
  4020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4020fe:	f001 f907 	bl	403310 <__aeabi_dmul>
  402102:	4602      	mov	r2, r0
  402104:	460b      	mov	r3, r1
  402106:	4620      	mov	r0, r4
  402108:	4629      	mov	r1, r5
  40210a:	f000 ff4d 	bl	402fa8 <__aeabi_dsub>
  40210e:	a34c      	add	r3, pc, #304	; (adr r3, 402240 <__ieee754_rem_pio2+0x288>)
  402110:	e9d3 2300 	ldrd	r2, r3, [r3]
  402114:	4604      	mov	r4, r0
  402116:	460d      	mov	r5, r1
  402118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40211c:	f001 f8f8 	bl	403310 <__aeabi_dmul>
  402120:	f1bb 0f1f 	cmp.w	fp, #31
  402124:	4606      	mov	r6, r0
  402126:	460f      	mov	r7, r1
  402128:	4620      	mov	r0, r4
  40212a:	4629      	mov	r1, r5
  40212c:	dc06      	bgt.n	40213c <__ieee754_rem_pio2+0x184>
  40212e:	f10b 32ff 	add.w	r2, fp, #4294967295
  402132:	4b54      	ldr	r3, [pc, #336]	; (402284 <__ieee754_rem_pio2+0x2cc>)
  402134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402138:	4598      	cmp	r8, r3
  40213a:	d176      	bne.n	40222a <__ieee754_rem_pio2+0x272>
  40213c:	463b      	mov	r3, r7
  40213e:	4632      	mov	r2, r6
  402140:	f000 ff32 	bl	402fa8 <__aeabi_dsub>
  402144:	ea4f 5c28 	mov.w	ip, r8, asr #20
  402148:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40214c:	ebc3 030c 	rsb	r3, r3, ip
  402150:	2b10      	cmp	r3, #16
  402152:	e9ca 0100 	strd	r0, r1, [sl]
  402156:	f340 8099 	ble.w	40228c <__ieee754_rem_pio2+0x2d4>
  40215a:	a33b      	add	r3, pc, #236	; (adr r3, 402248 <__ieee754_rem_pio2+0x290>)
  40215c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402164:	f8cd c00c 	str.w	ip, [sp, #12]
  402168:	f001 f8d2 	bl	403310 <__aeabi_dmul>
  40216c:	4606      	mov	r6, r0
  40216e:	460f      	mov	r7, r1
  402170:	4632      	mov	r2, r6
  402172:	463b      	mov	r3, r7
  402174:	4620      	mov	r0, r4
  402176:	4629      	mov	r1, r5
  402178:	f000 ff16 	bl	402fa8 <__aeabi_dsub>
  40217c:	4680      	mov	r8, r0
  40217e:	4689      	mov	r9, r1
  402180:	4620      	mov	r0, r4
  402182:	4629      	mov	r1, r5
  402184:	4642      	mov	r2, r8
  402186:	464b      	mov	r3, r9
  402188:	f000 ff0e 	bl	402fa8 <__aeabi_dsub>
  40218c:	4632      	mov	r2, r6
  40218e:	463b      	mov	r3, r7
  402190:	f000 ff0a 	bl	402fa8 <__aeabi_dsub>
  402194:	a32e      	add	r3, pc, #184	; (adr r3, 402250 <__ieee754_rem_pio2+0x298>)
  402196:	e9d3 2300 	ldrd	r2, r3, [r3]
  40219a:	4604      	mov	r4, r0
  40219c:	460d      	mov	r5, r1
  40219e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4021a2:	f001 f8b5 	bl	403310 <__aeabi_dmul>
  4021a6:	4622      	mov	r2, r4
  4021a8:	462b      	mov	r3, r5
  4021aa:	f000 fefd 	bl	402fa8 <__aeabi_dsub>
  4021ae:	4606      	mov	r6, r0
  4021b0:	460f      	mov	r7, r1
  4021b2:	463b      	mov	r3, r7
  4021b4:	4640      	mov	r0, r8
  4021b6:	4649      	mov	r1, r9
  4021b8:	4632      	mov	r2, r6
  4021ba:	f000 fef5 	bl	402fa8 <__aeabi_dsub>
  4021be:	f8dd c00c 	ldr.w	ip, [sp, #12]
  4021c2:	f3c1 530a 	ubfx	r3, r1, #20, #11
  4021c6:	ebc3 030c 	rsb	r3, r3, ip
  4021ca:	2b31      	cmp	r3, #49	; 0x31
  4021cc:	e9ca 0100 	strd	r0, r1, [sl]
  4021d0:	dd5a      	ble.n	402288 <__ieee754_rem_pio2+0x2d0>
  4021d2:	a323      	add	r3, pc, #140	; (adr r3, 402260 <__ieee754_rem_pio2+0x2a8>)
  4021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4021dc:	f001 f898 	bl	403310 <__aeabi_dmul>
  4021e0:	4606      	mov	r6, r0
  4021e2:	460f      	mov	r7, r1
  4021e4:	4632      	mov	r2, r6
  4021e6:	463b      	mov	r3, r7
  4021e8:	4640      	mov	r0, r8
  4021ea:	4649      	mov	r1, r9
  4021ec:	f000 fedc 	bl	402fa8 <__aeabi_dsub>
  4021f0:	4604      	mov	r4, r0
  4021f2:	460d      	mov	r5, r1
  4021f4:	4622      	mov	r2, r4
  4021f6:	462b      	mov	r3, r5
  4021f8:	4640      	mov	r0, r8
  4021fa:	4649      	mov	r1, r9
  4021fc:	f000 fed4 	bl	402fa8 <__aeabi_dsub>
  402200:	4632      	mov	r2, r6
  402202:	463b      	mov	r3, r7
  402204:	f000 fed0 	bl	402fa8 <__aeabi_dsub>
  402208:	a317      	add	r3, pc, #92	; (adr r3, 402268 <__ieee754_rem_pio2+0x2b0>)
  40220a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40220e:	4606      	mov	r6, r0
  402210:	460f      	mov	r7, r1
  402212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402216:	f001 f87b 	bl	403310 <__aeabi_dmul>
  40221a:	4632      	mov	r2, r6
  40221c:	463b      	mov	r3, r7
  40221e:	f000 fec3 	bl	402fa8 <__aeabi_dsub>
  402222:	4606      	mov	r6, r0
  402224:	460f      	mov	r7, r1
  402226:	4620      	mov	r0, r4
  402228:	4629      	mov	r1, r5
  40222a:	4632      	mov	r2, r6
  40222c:	463b      	mov	r3, r7
  40222e:	f000 febb 	bl	402fa8 <__aeabi_dsub>
  402232:	e9ca 0100 	strd	r0, r1, [sl]
  402236:	e029      	b.n	40228c <__ieee754_rem_pio2+0x2d4>
  402238:	54400000 	.word	0x54400000
  40223c:	3ff921fb 	.word	0x3ff921fb
  402240:	1a626331 	.word	0x1a626331
  402244:	3dd0b461 	.word	0x3dd0b461
  402248:	1a600000 	.word	0x1a600000
  40224c:	3dd0b461 	.word	0x3dd0b461
  402250:	2e037073 	.word	0x2e037073
  402254:	3ba3198a 	.word	0x3ba3198a
  402258:	6dc9c883 	.word	0x6dc9c883
  40225c:	3fe45f30 	.word	0x3fe45f30
  402260:	2e000000 	.word	0x2e000000
  402264:	3ba3198a 	.word	0x3ba3198a
  402268:	252049c1 	.word	0x252049c1
  40226c:	397b839a 	.word	0x397b839a
  402270:	3fe921fb 	.word	0x3fe921fb
  402274:	4002d97b 	.word	0x4002d97b
  402278:	3ff921fb 	.word	0x3ff921fb
  40227c:	413921fb 	.word	0x413921fb
  402280:	3fe00000 	.word	0x3fe00000
  402284:	00403fc8 	.word	0x00403fc8
  402288:	4644      	mov	r4, r8
  40228a:	464d      	mov	r5, r9
  40228c:	e9da 8900 	ldrd	r8, r9, [sl]
  402290:	4620      	mov	r0, r4
  402292:	4642      	mov	r2, r8
  402294:	464b      	mov	r3, r9
  402296:	4629      	mov	r1, r5
  402298:	f000 fe86 	bl	402fa8 <__aeabi_dsub>
  40229c:	4632      	mov	r2, r6
  40229e:	463b      	mov	r3, r7
  4022a0:	f000 fe82 	bl	402fa8 <__aeabi_dsub>
  4022a4:	9a07      	ldr	r2, [sp, #28]
  4022a6:	2a00      	cmp	r2, #0
  4022a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4022ac:	da70      	bge.n	402390 <__ieee754_rem_pio2+0x3d8>
  4022ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  4022b2:	f8ca 3004 	str.w	r3, [sl, #4]
  4022b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4022ba:	f8ca 0008 	str.w	r0, [sl, #8]
  4022be:	f8ca 8000 	str.w	r8, [sl]
  4022c2:	f8ca 300c 	str.w	r3, [sl, #12]
  4022c6:	f1cb 0000 	rsb	r0, fp, #0
  4022ca:	e062      	b.n	402392 <__ieee754_rem_pio2+0x3da>
  4022cc:	4b32      	ldr	r3, [pc, #200]	; (402398 <__ieee754_rem_pio2+0x3e0>)
  4022ce:	4598      	cmp	r8, r3
  4022d0:	dd09      	ble.n	4022e6 <__ieee754_rem_pio2+0x32e>
  4022d2:	4602      	mov	r2, r0
  4022d4:	460b      	mov	r3, r1
  4022d6:	f000 fe67 	bl	402fa8 <__aeabi_dsub>
  4022da:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4022de:	e9ca 0100 	strd	r0, r1, [sl]
  4022e2:	2000      	movs	r0, #0
  4022e4:	e055      	b.n	402392 <__ieee754_rem_pio2+0x3da>
  4022e6:	ea4f 5628 	mov.w	r6, r8, asr #20
  4022ea:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
  4022ee:	eba8 5506 	sub.w	r5, r8, r6, lsl #20
  4022f2:	4629      	mov	r1, r5
  4022f4:	4604      	mov	r4, r0
  4022f6:	f001 faa5 	bl	403844 <__aeabi_d2iz>
  4022fa:	f000 ffa3 	bl	403244 <__aeabi_i2d>
  4022fe:	4602      	mov	r2, r0
  402300:	460b      	mov	r3, r1
  402302:	4620      	mov	r0, r4
  402304:	4629      	mov	r1, r5
  402306:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40230a:	f000 fe4d 	bl	402fa8 <__aeabi_dsub>
  40230e:	2200      	movs	r2, #0
  402310:	4b22      	ldr	r3, [pc, #136]	; (40239c <__ieee754_rem_pio2+0x3e4>)
  402312:	f000 fffd 	bl	403310 <__aeabi_dmul>
  402316:	4604      	mov	r4, r0
  402318:	460d      	mov	r5, r1
  40231a:	f001 fa93 	bl	403844 <__aeabi_d2iz>
  40231e:	f000 ff91 	bl	403244 <__aeabi_i2d>
  402322:	4602      	mov	r2, r0
  402324:	460b      	mov	r3, r1
  402326:	4620      	mov	r0, r4
  402328:	4629      	mov	r1, r5
  40232a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40232e:	f000 fe3b 	bl	402fa8 <__aeabi_dsub>
  402332:	2200      	movs	r2, #0
  402334:	4b19      	ldr	r3, [pc, #100]	; (40239c <__ieee754_rem_pio2+0x3e4>)
  402336:	f000 ffeb 	bl	403310 <__aeabi_dmul>
  40233a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40233e:	2403      	movs	r4, #3
  402340:	aa08      	add	r2, sp, #32
  402342:	1e65      	subs	r5, r4, #1
  402344:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
  402348:	e9d3 0100 	ldrd	r0, r1, [r3]
  40234c:	2200      	movs	r2, #0
  40234e:	2300      	movs	r3, #0
  402350:	f001 fa46 	bl	4037e0 <__aeabi_dcmpeq>
  402354:	b108      	cbz	r0, 40235a <__ieee754_rem_pio2+0x3a2>
  402356:	462c      	mov	r4, r5
  402358:	e7f2      	b.n	402340 <__ieee754_rem_pio2+0x388>
  40235a:	2302      	movs	r3, #2
  40235c:	9300      	str	r3, [sp, #0]
  40235e:	4b10      	ldr	r3, [pc, #64]	; (4023a0 <__ieee754_rem_pio2+0x3e8>)
  402360:	9301      	str	r3, [sp, #4]
  402362:	a808      	add	r0, sp, #32
  402364:	4623      	mov	r3, r4
  402366:	4651      	mov	r1, sl
  402368:	4632      	mov	r2, r6
  40236a:	f000 f909 	bl	402580 <__kernel_rem_pio2>
  40236e:	9b07      	ldr	r3, [sp, #28]
  402370:	2b00      	cmp	r3, #0
  402372:	da0e      	bge.n	402392 <__ieee754_rem_pio2+0x3da>
  402374:	f8da 3004 	ldr.w	r3, [sl, #4]
  402378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40237c:	f8ca 3004 	str.w	r3, [sl, #4]
  402380:	f8da 300c 	ldr.w	r3, [sl, #12]
  402384:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402388:	f8ca 300c 	str.w	r3, [sl, #12]
  40238c:	4240      	negs	r0, r0
  40238e:	e000      	b.n	402392 <__ieee754_rem_pio2+0x3da>
  402390:	4658      	mov	r0, fp
  402392:	b00f      	add	sp, #60	; 0x3c
  402394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402398:	7fefffff 	.word	0x7fefffff
  40239c:	41700000 	.word	0x41700000
  4023a0:	00404048 	.word	0x00404048
  4023a4:	f3af 8000 	nop.w

004023a8 <__kernel_cos>:
  4023a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023ac:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
  4023b0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
  4023b4:	b085      	sub	sp, #20
  4023b6:	4606      	mov	r6, r0
  4023b8:	460f      	mov	r7, r1
  4023ba:	4692      	mov	sl, r2
  4023bc:	469b      	mov	fp, r3
  4023be:	da04      	bge.n	4023ca <__kernel_cos+0x22>
  4023c0:	f001 fa40 	bl	403844 <__aeabi_d2iz>
  4023c4:	2800      	cmp	r0, #0
  4023c6:	f000 80b2 	beq.w	40252e <__kernel_cos+0x186>
  4023ca:	4632      	mov	r2, r6
  4023cc:	463b      	mov	r3, r7
  4023ce:	4630      	mov	r0, r6
  4023d0:	4639      	mov	r1, r7
  4023d2:	f000 ff9d 	bl	403310 <__aeabi_dmul>
  4023d6:	a358      	add	r3, pc, #352	; (adr r3, 402538 <__kernel_cos+0x190>)
  4023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023dc:	4604      	mov	r4, r0
  4023de:	460d      	mov	r5, r1
  4023e0:	f000 ff96 	bl	403310 <__aeabi_dmul>
  4023e4:	a356      	add	r3, pc, #344	; (adr r3, 402540 <__kernel_cos+0x198>)
  4023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023ea:	f000 fddf 	bl	402fac <__adddf3>
  4023ee:	4602      	mov	r2, r0
  4023f0:	460b      	mov	r3, r1
  4023f2:	4620      	mov	r0, r4
  4023f4:	4629      	mov	r1, r5
  4023f6:	f000 ff8b 	bl	403310 <__aeabi_dmul>
  4023fa:	a353      	add	r3, pc, #332	; (adr r3, 402548 <__kernel_cos+0x1a0>)
  4023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402400:	f000 fdd2 	bl	402fa8 <__aeabi_dsub>
  402404:	4602      	mov	r2, r0
  402406:	460b      	mov	r3, r1
  402408:	4620      	mov	r0, r4
  40240a:	4629      	mov	r1, r5
  40240c:	f000 ff80 	bl	403310 <__aeabi_dmul>
  402410:	a34f      	add	r3, pc, #316	; (adr r3, 402550 <__kernel_cos+0x1a8>)
  402412:	e9d3 2300 	ldrd	r2, r3, [r3]
  402416:	f000 fdc9 	bl	402fac <__adddf3>
  40241a:	4602      	mov	r2, r0
  40241c:	460b      	mov	r3, r1
  40241e:	4620      	mov	r0, r4
  402420:	4629      	mov	r1, r5
  402422:	f000 ff75 	bl	403310 <__aeabi_dmul>
  402426:	a34c      	add	r3, pc, #304	; (adr r3, 402558 <__kernel_cos+0x1b0>)
  402428:	e9d3 2300 	ldrd	r2, r3, [r3]
  40242c:	f000 fdbc 	bl	402fa8 <__aeabi_dsub>
  402430:	4602      	mov	r2, r0
  402432:	460b      	mov	r3, r1
  402434:	4620      	mov	r0, r4
  402436:	4629      	mov	r1, r5
  402438:	f000 ff6a 	bl	403310 <__aeabi_dmul>
  40243c:	a348      	add	r3, pc, #288	; (adr r3, 402560 <__kernel_cos+0x1b8>)
  40243e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402442:	f000 fdb3 	bl	402fac <__adddf3>
  402446:	460b      	mov	r3, r1
  402448:	4602      	mov	r2, r0
  40244a:	4629      	mov	r1, r5
  40244c:	4620      	mov	r0, r4
  40244e:	f000 ff5f 	bl	403310 <__aeabi_dmul>
  402452:	4b45      	ldr	r3, [pc, #276]	; (402568 <__kernel_cos+0x1c0>)
  402454:	4599      	cmp	r9, r3
  402456:	e9cd 0100 	strd	r0, r1, [sp]
  40245a:	dc26      	bgt.n	4024aa <__kernel_cos+0x102>
  40245c:	4620      	mov	r0, r4
  40245e:	4629      	mov	r1, r5
  402460:	2200      	movs	r2, #0
  402462:	4b42      	ldr	r3, [pc, #264]	; (40256c <__kernel_cos+0x1c4>)
  402464:	f000 ff54 	bl	403310 <__aeabi_dmul>
  402468:	e9dd 2300 	ldrd	r2, r3, [sp]
  40246c:	4680      	mov	r8, r0
  40246e:	4689      	mov	r9, r1
  402470:	4620      	mov	r0, r4
  402472:	4629      	mov	r1, r5
  402474:	f000 ff4c 	bl	403310 <__aeabi_dmul>
  402478:	4652      	mov	r2, sl
  40247a:	4604      	mov	r4, r0
  40247c:	460d      	mov	r5, r1
  40247e:	465b      	mov	r3, fp
  402480:	4630      	mov	r0, r6
  402482:	4639      	mov	r1, r7
  402484:	f000 ff44 	bl	403310 <__aeabi_dmul>
  402488:	4602      	mov	r2, r0
  40248a:	460b      	mov	r3, r1
  40248c:	4620      	mov	r0, r4
  40248e:	4629      	mov	r1, r5
  402490:	f000 fd8a 	bl	402fa8 <__aeabi_dsub>
  402494:	4602      	mov	r2, r0
  402496:	460b      	mov	r3, r1
  402498:	4640      	mov	r0, r8
  40249a:	4649      	mov	r1, r9
  40249c:	f000 fd84 	bl	402fa8 <__aeabi_dsub>
  4024a0:	4602      	mov	r2, r0
  4024a2:	460b      	mov	r3, r1
  4024a4:	2000      	movs	r0, #0
  4024a6:	4932      	ldr	r1, [pc, #200]	; (402570 <__kernel_cos+0x1c8>)
  4024a8:	e03e      	b.n	402528 <__kernel_cos+0x180>
  4024aa:	4b32      	ldr	r3, [pc, #200]	; (402574 <__kernel_cos+0x1cc>)
  4024ac:	4599      	cmp	r9, r3
  4024ae:	dc05      	bgt.n	4024bc <__kernel_cos+0x114>
  4024b0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
  4024b4:	2200      	movs	r2, #0
  4024b6:	4690      	mov	r8, r2
  4024b8:	4699      	mov	r9, r3
  4024ba:	e003      	b.n	4024c4 <__kernel_cos+0x11c>
  4024bc:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 402578 <__kernel_cos+0x1d0>
  4024c0:	f04f 0800 	mov.w	r8, #0
  4024c4:	4642      	mov	r2, r8
  4024c6:	464b      	mov	r3, r9
  4024c8:	2000      	movs	r0, #0
  4024ca:	4929      	ldr	r1, [pc, #164]	; (402570 <__kernel_cos+0x1c8>)
  4024cc:	f000 fd6c 	bl	402fa8 <__aeabi_dsub>
  4024d0:	2200      	movs	r2, #0
  4024d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4024d6:	4b25      	ldr	r3, [pc, #148]	; (40256c <__kernel_cos+0x1c4>)
  4024d8:	4620      	mov	r0, r4
  4024da:	4629      	mov	r1, r5
  4024dc:	f000 ff18 	bl	403310 <__aeabi_dmul>
  4024e0:	4642      	mov	r2, r8
  4024e2:	464b      	mov	r3, r9
  4024e4:	f000 fd60 	bl	402fa8 <__aeabi_dsub>
  4024e8:	e9dd 2300 	ldrd	r2, r3, [sp]
  4024ec:	4680      	mov	r8, r0
  4024ee:	4689      	mov	r9, r1
  4024f0:	4620      	mov	r0, r4
  4024f2:	4629      	mov	r1, r5
  4024f4:	f000 ff0c 	bl	403310 <__aeabi_dmul>
  4024f8:	4652      	mov	r2, sl
  4024fa:	4604      	mov	r4, r0
  4024fc:	460d      	mov	r5, r1
  4024fe:	465b      	mov	r3, fp
  402500:	4630      	mov	r0, r6
  402502:	4639      	mov	r1, r7
  402504:	f000 ff04 	bl	403310 <__aeabi_dmul>
  402508:	4602      	mov	r2, r0
  40250a:	460b      	mov	r3, r1
  40250c:	4620      	mov	r0, r4
  40250e:	4629      	mov	r1, r5
  402510:	f000 fd4a 	bl	402fa8 <__aeabi_dsub>
  402514:	4602      	mov	r2, r0
  402516:	460b      	mov	r3, r1
  402518:	4640      	mov	r0, r8
  40251a:	4649      	mov	r1, r9
  40251c:	f000 fd44 	bl	402fa8 <__aeabi_dsub>
  402520:	4602      	mov	r2, r0
  402522:	460b      	mov	r3, r1
  402524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402528:	f000 fd3e 	bl	402fa8 <__aeabi_dsub>
  40252c:	e001      	b.n	402532 <__kernel_cos+0x18a>
  40252e:	4910      	ldr	r1, [pc, #64]	; (402570 <__kernel_cos+0x1c8>)
  402530:	2000      	movs	r0, #0
  402532:	b005      	add	sp, #20
  402534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402538:	be8838d4 	.word	0xbe8838d4
  40253c:	bda8fae9 	.word	0xbda8fae9
  402540:	bdb4b1c4 	.word	0xbdb4b1c4
  402544:	3e21ee9e 	.word	0x3e21ee9e
  402548:	809c52ad 	.word	0x809c52ad
  40254c:	3e927e4f 	.word	0x3e927e4f
  402550:	19cb1590 	.word	0x19cb1590
  402554:	3efa01a0 	.word	0x3efa01a0
  402558:	16c15177 	.word	0x16c15177
  40255c:	3f56c16c 	.word	0x3f56c16c
  402560:	5555554c 	.word	0x5555554c
  402564:	3fa55555 	.word	0x3fa55555
  402568:	3fd33332 	.word	0x3fd33332
  40256c:	3fe00000 	.word	0x3fe00000
  402570:	3ff00000 	.word	0x3ff00000
  402574:	3fe90000 	.word	0x3fe90000
  402578:	3fd20000 	.word	0x3fd20000
  40257c:	f3af 8000 	nop.w

00402580 <__kernel_rem_pio2>:
  402580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402584:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
  402588:	f1a2 0803 	sub.w	r8, r2, #3
  40258c:	9309      	str	r3, [sp, #36]	; 0x24
  40258e:	9ca4      	ldr	r4, [sp, #656]	; 0x290
  402590:	4bab      	ldr	r3, [pc, #684]	; (402840 <__kernel_rem_pio2+0x2c0>)
  402592:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402594:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402598:	9306      	str	r3, [sp, #24]
  40259a:	3d01      	subs	r5, #1
  40259c:	9508      	str	r5, [sp, #32]
  40259e:	46aa      	mov	sl, r5
  4025a0:	9d06      	ldr	r5, [sp, #24]
  4025a2:	900a      	str	r0, [sp, #40]	; 0x28
  4025a4:	2318      	movs	r3, #24
  4025a6:	fb98 f8f3 	sdiv	r8, r8, r3
  4025aa:	44aa      	add	sl, r5
  4025ac:	9d08      	ldr	r5, [sp, #32]
  4025ae:	9105      	str	r1, [sp, #20]
  4025b0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4025b4:	ebc5 0708 	rsb	r7, r5, r8
  4025b8:	9da5      	ldr	r5, [sp, #660]	; 0x294
  4025ba:	ea6f 0408 	mvn.w	r4, r8
  4025be:	eb05 0987 	add.w	r9, r5, r7, lsl #2
  4025c2:	fb03 2404 	mla	r4, r3, r4, r2
  4025c6:	ae20      	add	r6, sp, #128	; 0x80
  4025c8:	2500      	movs	r5, #0
  4025ca:	4555      	cmp	r5, sl
  4025cc:	dc0c      	bgt.n	4025e8 <__kernel_rem_pio2+0x68>
  4025ce:	42fd      	cmn	r5, r7
  4025d0:	d404      	bmi.n	4025dc <__kernel_rem_pio2+0x5c>
  4025d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  4025d6:	f000 fe35 	bl	403244 <__aeabi_i2d>
  4025da:	e001      	b.n	4025e0 <__kernel_rem_pio2+0x60>
  4025dc:	2000      	movs	r0, #0
  4025de:	2100      	movs	r1, #0
  4025e0:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  4025e4:	3501      	adds	r5, #1
  4025e6:	e7f0      	b.n	4025ca <__kernel_rem_pio2+0x4a>
  4025e8:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
  4025ec:	2500      	movs	r5, #0
  4025ee:	9906      	ldr	r1, [sp, #24]
  4025f0:	428d      	cmp	r5, r1
  4025f2:	dc28      	bgt.n	402646 <__kernel_rem_pio2+0xc6>
  4025f4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4025f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4025fa:	44aa      	add	sl, r5
  4025fc:	ab22      	add	r3, sp, #136	; 0x88
  4025fe:	f1a2 0b08 	sub.w	fp, r2, #8
  402602:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
  402606:	2600      	movs	r6, #0
  402608:	2700      	movs	r7, #0
  40260a:	f04f 0900 	mov.w	r9, #0
  40260e:	9808      	ldr	r0, [sp, #32]
  402610:	4581      	cmp	r9, r0
  402612:	dc14      	bgt.n	40263e <__kernel_rem_pio2+0xbe>
  402614:	e9fb 2302 	ldrd	r2, r3, [fp, #8]!
  402618:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
  40261c:	f8cd c004 	str.w	ip, [sp, #4]
  402620:	f000 fe76 	bl	403310 <__aeabi_dmul>
  402624:	4602      	mov	r2, r0
  402626:	460b      	mov	r3, r1
  402628:	4630      	mov	r0, r6
  40262a:	4639      	mov	r1, r7
  40262c:	f000 fcbe 	bl	402fac <__adddf3>
  402630:	f109 0901 	add.w	r9, r9, #1
  402634:	4606      	mov	r6, r0
  402636:	460f      	mov	r7, r1
  402638:	f8dd c004 	ldr.w	ip, [sp, #4]
  40263c:	e7e7      	b.n	40260e <__kernel_rem_pio2+0x8e>
  40263e:	e9ec 6702 	strd	r6, r7, [ip, #8]!
  402642:	3501      	adds	r5, #1
  402644:	e7d3      	b.n	4025ee <__kernel_rem_pio2+0x6e>
  402646:	9d06      	ldr	r5, [sp, #24]
  402648:	a80e      	add	r0, sp, #56	; 0x38
  40264a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
  40264e:	9da5      	ldr	r5, [sp, #660]	; 0x294
  402650:	900b      	str	r0, [sp, #44]	; 0x2c
  402652:	eb05 0588 	add.w	r5, r5, r8, lsl #2
  402656:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40265a:	950d      	str	r5, [sp, #52]	; 0x34
  40265c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
  402660:	ab9a      	add	r3, sp, #616	; 0x268
  402662:	444b      	add	r3, r9
  402664:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  402668:	a872      	add	r0, sp, #456	; 0x1c8
  40266a:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
  40266e:	4481      	add	r9, r0
  402670:	4645      	mov	r5, r8
  402672:	2d00      	cmp	r5, #0
  402674:	4630      	mov	r0, r6
  402676:	4639      	mov	r1, r7
  402678:	dd21      	ble.n	4026be <__kernel_rem_pio2+0x13e>
  40267a:	2200      	movs	r2, #0
  40267c:	4b71      	ldr	r3, [pc, #452]	; (402844 <__kernel_rem_pio2+0x2c4>)
  40267e:	f000 fe47 	bl	403310 <__aeabi_dmul>
  402682:	f001 f8df 	bl	403844 <__aeabi_d2iz>
  402686:	f000 fddd 	bl	403244 <__aeabi_i2d>
  40268a:	2200      	movs	r2, #0
  40268c:	4b6e      	ldr	r3, [pc, #440]	; (402848 <__kernel_rem_pio2+0x2c8>)
  40268e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402692:	f000 fe3d 	bl	403310 <__aeabi_dmul>
  402696:	4602      	mov	r2, r0
  402698:	460b      	mov	r3, r1
  40269a:	4630      	mov	r0, r6
  40269c:	4639      	mov	r1, r7
  40269e:	f000 fc83 	bl	402fa8 <__aeabi_dsub>
  4026a2:	f001 f8cf 	bl	403844 <__aeabi_d2iz>
  4026a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4026aa:	f84a 0f04 	str.w	r0, [sl, #4]!
  4026ae:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
  4026b2:	f000 fc7b 	bl	402fac <__adddf3>
  4026b6:	3d01      	subs	r5, #1
  4026b8:	4606      	mov	r6, r0
  4026ba:	460f      	mov	r7, r1
  4026bc:	e7d9      	b.n	402672 <__kernel_rem_pio2+0xf2>
  4026be:	4622      	mov	r2, r4
  4026c0:	f000 fbf2 	bl	402ea8 <scalbn>
  4026c4:	2200      	movs	r2, #0
  4026c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4026ca:	4606      	mov	r6, r0
  4026cc:	460f      	mov	r7, r1
  4026ce:	f000 fe1f 	bl	403310 <__aeabi_dmul>
  4026d2:	f000 fb61 	bl	402d98 <floor>
  4026d6:	2200      	movs	r2, #0
  4026d8:	4b5c      	ldr	r3, [pc, #368]	; (40284c <__kernel_rem_pio2+0x2cc>)
  4026da:	f000 fe19 	bl	403310 <__aeabi_dmul>
  4026de:	4602      	mov	r2, r0
  4026e0:	460b      	mov	r3, r1
  4026e2:	4630      	mov	r0, r6
  4026e4:	4639      	mov	r1, r7
  4026e6:	f000 fc5f 	bl	402fa8 <__aeabi_dsub>
  4026ea:	460f      	mov	r7, r1
  4026ec:	4606      	mov	r6, r0
  4026ee:	f001 f8a9 	bl	403844 <__aeabi_d2iz>
  4026f2:	9002      	str	r0, [sp, #8]
  4026f4:	f000 fda6 	bl	403244 <__aeabi_i2d>
  4026f8:	4602      	mov	r2, r0
  4026fa:	460b      	mov	r3, r1
  4026fc:	4630      	mov	r0, r6
  4026fe:	4639      	mov	r1, r7
  402700:	f000 fc52 	bl	402fa8 <__aeabi_dsub>
  402704:	2c00      	cmp	r4, #0
  402706:	4606      	mov	r6, r0
  402708:	460f      	mov	r7, r1
  40270a:	dd16      	ble.n	40273a <__kernel_rem_pio2+0x1ba>
  40270c:	f108 32ff 	add.w	r2, r8, #4294967295
  402710:	ab0e      	add	r3, sp, #56	; 0x38
  402712:	9d02      	ldr	r5, [sp, #8]
  402714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  402718:	f1c4 0318 	rsb	r3, r4, #24
  40271c:	fa41 f003 	asr.w	r0, r1, r3
  402720:	4405      	add	r5, r0
  402722:	fa00 f303 	lsl.w	r3, r0, r3
  402726:	a80e      	add	r0, sp, #56	; 0x38
  402728:	1acb      	subs	r3, r1, r3
  40272a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  40272e:	f1c4 0217 	rsb	r2, r4, #23
  402732:	9502      	str	r5, [sp, #8]
  402734:	fa43 f902 	asr.w	r9, r3, r2
  402738:	e00f      	b.n	40275a <__kernel_rem_pio2+0x1da>
  40273a:	d107      	bne.n	40274c <__kernel_rem_pio2+0x1cc>
  40273c:	f108 33ff 	add.w	r3, r8, #4294967295
  402740:	a90e      	add	r1, sp, #56	; 0x38
  402742:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  402746:	ea4f 59e3 	mov.w	r9, r3, asr #23
  40274a:	e006      	b.n	40275a <__kernel_rem_pio2+0x1da>
  40274c:	2200      	movs	r2, #0
  40274e:	4b40      	ldr	r3, [pc, #256]	; (402850 <__kernel_rem_pio2+0x2d0>)
  402750:	f001 f864 	bl	40381c <__aeabi_dcmpge>
  402754:	b928      	cbnz	r0, 402762 <__kernel_rem_pio2+0x1e2>
  402756:	4681      	mov	r9, r0
  402758:	e04f      	b.n	4027fa <__kernel_rem_pio2+0x27a>
  40275a:	f1b9 0f00 	cmp.w	r9, #0
  40275e:	dc02      	bgt.n	402766 <__kernel_rem_pio2+0x1e6>
  402760:	e04b      	b.n	4027fa <__kernel_rem_pio2+0x27a>
  402762:	f04f 0902 	mov.w	r9, #2
  402766:	9d02      	ldr	r5, [sp, #8]
  402768:	2300      	movs	r3, #0
  40276a:	3501      	adds	r5, #1
  40276c:	9502      	str	r5, [sp, #8]
  40276e:	aa0e      	add	r2, sp, #56	; 0x38
  402770:	461d      	mov	r5, r3
  402772:	4543      	cmp	r3, r8
  402774:	da0f      	bge.n	402796 <__kernel_rem_pio2+0x216>
  402776:	f852 1b04 	ldr.w	r1, [r2], #4
  40277a:	b91d      	cbnz	r5, 402784 <__kernel_rem_pio2+0x204>
  40277c:	b149      	cbz	r1, 402792 <__kernel_rem_pio2+0x212>
  40277e:	f1c1 7180 	rsb	r1, r1, #16777216	; 0x1000000
  402782:	e003      	b.n	40278c <__kernel_rem_pio2+0x20c>
  402784:	f1c1 11ff 	rsb	r1, r1, #16711935	; 0xff00ff
  402788:	f501 417f 	add.w	r1, r1, #65280	; 0xff00
  40278c:	f842 1c04 	str.w	r1, [r2, #-4]
  402790:	2501      	movs	r5, #1
  402792:	3301      	adds	r3, #1
  402794:	e7ed      	b.n	402772 <__kernel_rem_pio2+0x1f2>
  402796:	2c00      	cmp	r4, #0
  402798:	dd16      	ble.n	4027c8 <__kernel_rem_pio2+0x248>
  40279a:	2c01      	cmp	r4, #1
  40279c:	d00b      	beq.n	4027b6 <__kernel_rem_pio2+0x236>
  40279e:	2c02      	cmp	r4, #2
  4027a0:	d112      	bne.n	4027c8 <__kernel_rem_pio2+0x248>
  4027a2:	f108 33ff 	add.w	r3, r8, #4294967295
  4027a6:	a90e      	add	r1, sp, #56	; 0x38
  4027a8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  4027ac:	f3c2 0215 	ubfx	r2, r2, #0, #22
  4027b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4027b4:	e008      	b.n	4027c8 <__kernel_rem_pio2+0x248>
  4027b6:	f108 33ff 	add.w	r3, r8, #4294967295
  4027ba:	a80e      	add	r0, sp, #56	; 0x38
  4027bc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  4027c0:	f3c2 0216 	ubfx	r2, r2, #0, #23
  4027c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  4027c8:	f1b9 0f02 	cmp.w	r9, #2
  4027cc:	d115      	bne.n	4027fa <__kernel_rem_pio2+0x27a>
  4027ce:	4632      	mov	r2, r6
  4027d0:	463b      	mov	r3, r7
  4027d2:	2000      	movs	r0, #0
  4027d4:	491f      	ldr	r1, [pc, #124]	; (402854 <__kernel_rem_pio2+0x2d4>)
  4027d6:	f000 fbe7 	bl	402fa8 <__aeabi_dsub>
  4027da:	4606      	mov	r6, r0
  4027dc:	460f      	mov	r7, r1
  4027de:	b165      	cbz	r5, 4027fa <__kernel_rem_pio2+0x27a>
  4027e0:	4622      	mov	r2, r4
  4027e2:	2000      	movs	r0, #0
  4027e4:	491b      	ldr	r1, [pc, #108]	; (402854 <__kernel_rem_pio2+0x2d4>)
  4027e6:	f000 fb5f 	bl	402ea8 <scalbn>
  4027ea:	4602      	mov	r2, r0
  4027ec:	460b      	mov	r3, r1
  4027ee:	4630      	mov	r0, r6
  4027f0:	4639      	mov	r1, r7
  4027f2:	f000 fbd9 	bl	402fa8 <__aeabi_dsub>
  4027f6:	4606      	mov	r6, r0
  4027f8:	460f      	mov	r7, r1
  4027fa:	4630      	mov	r0, r6
  4027fc:	4639      	mov	r1, r7
  4027fe:	2200      	movs	r2, #0
  402800:	2300      	movs	r3, #0
  402802:	f000 ffed 	bl	4037e0 <__aeabi_dcmpeq>
  402806:	2800      	cmp	r0, #0
  402808:	d06e      	beq.n	4028e8 <__kernel_rem_pio2+0x368>
  40280a:	aa0e      	add	r2, sp, #56	; 0x38
  40280c:	f108 31ff 	add.w	r1, r8, #4294967295
  402810:	eb02 0088 	add.w	r0, r2, r8, lsl #2
  402814:	2300      	movs	r3, #0
  402816:	460a      	mov	r2, r1
  402818:	9d06      	ldr	r5, [sp, #24]
  40281a:	42aa      	cmp	r2, r5
  40281c:	db04      	blt.n	402828 <__kernel_rem_pio2+0x2a8>
  40281e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
  402822:	3a01      	subs	r2, #1
  402824:	432b      	orrs	r3, r5
  402826:	e7f7      	b.n	402818 <__kernel_rem_pio2+0x298>
  402828:	2b00      	cmp	r3, #0
  40282a:	f040 81e2 	bne.w	402bf2 <__kernel_rem_pio2+0x672>
  40282e:	2601      	movs	r6, #1
  402830:	f06f 0303 	mvn.w	r3, #3
  402834:	4373      	muls	r3, r6
  402836:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402838:	58eb      	ldr	r3, [r5, r3]
  40283a:	b96b      	cbnz	r3, 402858 <__kernel_rem_pio2+0x2d8>
  40283c:	3601      	adds	r6, #1
  40283e:	e7f7      	b.n	402830 <__kernel_rem_pio2+0x2b0>
  402840:	00404150 	.word	0x00404150
  402844:	3e700000 	.word	0x3e700000
  402848:	41700000 	.word	0x41700000
  40284c:	40200000 	.word	0x40200000
  402850:	3fe00000 	.word	0x3fe00000
  402854:	3ff00000 	.word	0x3ff00000
  402858:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40285c:	a972      	add	r1, sp, #456	; 0x1c8
  40285e:	44c3      	add	fp, r8
  402860:	a822      	add	r0, sp, #136	; 0x88
  402862:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
  402866:	f108 0501 	add.w	r5, r8, #1
  40286a:	eb00 0bcb 	add.w	fp, r0, fp, lsl #3
  40286e:	910c      	str	r1, [sp, #48]	; 0x30
  402870:	2700      	movs	r7, #0
  402872:	eb08 0306 	add.w	r3, r8, r6
  402876:	429d      	cmp	r5, r3
  402878:	dc34      	bgt.n	4028e4 <__kernel_rem_pio2+0x364>
  40287a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40287c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  402880:	f000 fce0 	bl	403244 <__aeabi_i2d>
  402884:	eb0b 0907 	add.w	r9, fp, r7
  402888:	e9c9 0100 	strd	r0, r1, [r9]
  40288c:	2000      	movs	r0, #0
  40288e:	2100      	movs	r1, #0
  402890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402892:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402896:	f1a3 0a08 	sub.w	sl, r3, #8
  40289a:	f04f 0c00 	mov.w	ip, #0
  40289e:	9908      	ldr	r1, [sp, #32]
  4028a0:	458c      	cmp	ip, r1
  4028a2:	dc16      	bgt.n	4028d2 <__kernel_rem_pio2+0x352>
  4028a4:	eba9 03cc 	sub.w	r3, r9, ip, lsl #3
  4028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028ac:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
  4028b0:	f8cd c004 	str.w	ip, [sp, #4]
  4028b4:	f000 fd2c 	bl	403310 <__aeabi_dmul>
  4028b8:	4602      	mov	r2, r0
  4028ba:	460b      	mov	r3, r1
  4028bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4028c0:	f000 fb74 	bl	402fac <__adddf3>
  4028c4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4028c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4028cc:	f10c 0c01 	add.w	ip, ip, #1
  4028d0:	e7e5      	b.n	40289e <__kernel_rem_pio2+0x31e>
  4028d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4028d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4028d8:	443b      	add	r3, r7
  4028da:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4028de:	3501      	adds	r5, #1
  4028e0:	3708      	adds	r7, #8
  4028e2:	e7c6      	b.n	402872 <__kernel_rem_pio2+0x2f2>
  4028e4:	4698      	mov	r8, r3
  4028e6:	e6b9      	b.n	40265c <__kernel_rem_pio2+0xdc>
  4028e8:	4630      	mov	r0, r6
  4028ea:	4639      	mov	r1, r7
  4028ec:	4262      	negs	r2, r4
  4028ee:	f000 fadb 	bl	402ea8 <scalbn>
  4028f2:	2200      	movs	r2, #0
  4028f4:	4b9e      	ldr	r3, [pc, #632]	; (402b70 <__kernel_rem_pio2+0x5f0>)
  4028f6:	4606      	mov	r6, r0
  4028f8:	460f      	mov	r7, r1
  4028fa:	f000 ff8f 	bl	40381c <__aeabi_dcmpge>
  4028fe:	b1f8      	cbz	r0, 402940 <__kernel_rem_pio2+0x3c0>
  402900:	2200      	movs	r2, #0
  402902:	4b9c      	ldr	r3, [pc, #624]	; (402b74 <__kernel_rem_pio2+0x5f4>)
  402904:	4630      	mov	r0, r6
  402906:	4639      	mov	r1, r7
  402908:	f000 fd02 	bl	403310 <__aeabi_dmul>
  40290c:	f000 ff9a 	bl	403844 <__aeabi_d2iz>
  402910:	4605      	mov	r5, r0
  402912:	f000 fc97 	bl	403244 <__aeabi_i2d>
  402916:	2200      	movs	r2, #0
  402918:	4b95      	ldr	r3, [pc, #596]	; (402b70 <__kernel_rem_pio2+0x5f0>)
  40291a:	f000 fcf9 	bl	403310 <__aeabi_dmul>
  40291e:	4602      	mov	r2, r0
  402920:	460b      	mov	r3, r1
  402922:	4630      	mov	r0, r6
  402924:	4639      	mov	r1, r7
  402926:	f000 fb3f 	bl	402fa8 <__aeabi_dsub>
  40292a:	f000 ff8b 	bl	403844 <__aeabi_d2iz>
  40292e:	aa0e      	add	r2, sp, #56	; 0x38
  402930:	3418      	adds	r4, #24
  402932:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
  402936:	f108 0801 	add.w	r8, r8, #1
  40293a:	f842 5028 	str.w	r5, [r2, r8, lsl #2]
  40293e:	e006      	b.n	40294e <__kernel_rem_pio2+0x3ce>
  402940:	4630      	mov	r0, r6
  402942:	4639      	mov	r1, r7
  402944:	f000 ff7e 	bl	403844 <__aeabi_d2iz>
  402948:	ab0e      	add	r3, sp, #56	; 0x38
  40294a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
  40294e:	4622      	mov	r2, r4
  402950:	2000      	movs	r0, #0
  402952:	4989      	ldr	r1, [pc, #548]	; (402b78 <__kernel_rem_pio2+0x5f8>)
  402954:	f000 faa8 	bl	402ea8 <scalbn>
  402958:	4604      	mov	r4, r0
  40295a:	460d      	mov	r5, r1
  40295c:	f108 0001 	add.w	r0, r8, #1
  402960:	a972      	add	r1, sp, #456	; 0x1c8
  402962:	9008      	str	r0, [sp, #32]
  402964:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
  402968:	4647      	mov	r7, r8
  40296a:	2f00      	cmp	r7, #0
  40296c:	db16      	blt.n	40299c <__kernel_rem_pio2+0x41c>
  40296e:	aa0e      	add	r2, sp, #56	; 0x38
  402970:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
  402974:	f000 fc66 	bl	403244 <__aeabi_i2d>
  402978:	4602      	mov	r2, r0
  40297a:	460b      	mov	r3, r1
  40297c:	4620      	mov	r0, r4
  40297e:	4629      	mov	r1, r5
  402980:	f000 fcc6 	bl	403310 <__aeabi_dmul>
  402984:	2200      	movs	r2, #0
  402986:	e966 0102 	strd	r0, r1, [r6, #-8]!
  40298a:	4b7a      	ldr	r3, [pc, #488]	; (402b74 <__kernel_rem_pio2+0x5f4>)
  40298c:	4620      	mov	r0, r4
  40298e:	4629      	mov	r1, r5
  402990:	f000 fcbe 	bl	403310 <__aeabi_dmul>
  402994:	3f01      	subs	r7, #1
  402996:	4604      	mov	r4, r0
  402998:	460d      	mov	r5, r1
  40299a:	e7e6      	b.n	40296a <__kernel_rem_pio2+0x3ea>
  40299c:	ac72      	add	r4, sp, #456	; 0x1c8
  40299e:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
  4029a2:	af48      	add	r7, sp, #288	; 0x120
  4029a4:	9409      	str	r4, [sp, #36]	; 0x24
  4029a6:	2500      	movs	r5, #0
  4029a8:	ebc5 0308 	rsb	r3, r5, r8
  4029ac:	2b00      	cmp	r3, #0
  4029ae:	db27      	blt.n	402a00 <__kernel_rem_pio2+0x480>
  4029b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4029b2:	4e72      	ldr	r6, [pc, #456]	; (402b7c <__kernel_rem_pio2+0x5fc>)
  4029b4:	eba4 0cc5 	sub.w	ip, r4, r5, lsl #3
  4029b8:	f04f 0a00 	mov.w	sl, #0
  4029bc:	f04f 0b00 	mov.w	fp, #0
  4029c0:	2400      	movs	r4, #0
  4029c2:	9806      	ldr	r0, [sp, #24]
  4029c4:	4284      	cmp	r4, r0
  4029c6:	dc17      	bgt.n	4029f8 <__kernel_rem_pio2+0x478>
  4029c8:	42ac      	cmp	r4, r5
  4029ca:	dc15      	bgt.n	4029f8 <__kernel_rem_pio2+0x478>
  4029cc:	eb0c 03c4 	add.w	r3, ip, r4, lsl #3
  4029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029d4:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
  4029d8:	f8cd c004 	str.w	ip, [sp, #4]
  4029dc:	f000 fc98 	bl	403310 <__aeabi_dmul>
  4029e0:	4602      	mov	r2, r0
  4029e2:	460b      	mov	r3, r1
  4029e4:	4650      	mov	r0, sl
  4029e6:	4659      	mov	r1, fp
  4029e8:	f000 fae0 	bl	402fac <__adddf3>
  4029ec:	3401      	adds	r4, #1
  4029ee:	4682      	mov	sl, r0
  4029f0:	468b      	mov	fp, r1
  4029f2:	f8dd c004 	ldr.w	ip, [sp, #4]
  4029f6:	e7e4      	b.n	4029c2 <__kernel_rem_pio2+0x442>
  4029f8:	e9e7 ab02 	strd	sl, fp, [r7, #8]!
  4029fc:	3501      	adds	r5, #1
  4029fe:	e7d3      	b.n	4029a8 <__kernel_rem_pio2+0x428>
  402a00:	9da4      	ldr	r5, [sp, #656]	; 0x290
  402a02:	2d03      	cmp	r5, #3
  402a04:	f200 80ee 	bhi.w	402be4 <__kernel_rem_pio2+0x664>
  402a08:	e8df f005 	tbb	[pc, r5]
  402a0c:	02080810 	.word	0x02080810
  402a10:	a94a      	add	r1, sp, #296	; 0x128
  402a12:	eb01 0cc8 	add.w	ip, r1, r8, lsl #3
  402a16:	46e2      	mov	sl, ip
  402a18:	46c3      	mov	fp, r8
  402a1a:	e05a      	b.n	402ad2 <__kernel_rem_pio2+0x552>
  402a1c:	9c08      	ldr	r4, [sp, #32]
  402a1e:	a84a      	add	r0, sp, #296	; 0x128
  402a20:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
  402a24:	2200      	movs	r2, #0
  402a26:	4644      	mov	r4, r8
  402a28:	2300      	movs	r3, #0
  402a2a:	e01c      	b.n	402a66 <__kernel_rem_pio2+0x4e6>
  402a2c:	9d08      	ldr	r5, [sp, #32]
  402a2e:	a84a      	add	r0, sp, #296	; 0x128
  402a30:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
  402a34:	2100      	movs	r1, #0
  402a36:	2000      	movs	r0, #0
  402a38:	f1b8 0f00 	cmp.w	r8, #0
  402a3c:	db06      	blt.n	402a4c <__kernel_rem_pio2+0x4cc>
  402a3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  402a42:	f000 fab3 	bl	402fac <__adddf3>
  402a46:	f108 38ff 	add.w	r8, r8, #4294967295
  402a4a:	e7f5      	b.n	402a38 <__kernel_rem_pio2+0x4b8>
  402a4c:	f1b9 0f00 	cmp.w	r9, #0
  402a50:	d003      	beq.n	402a5a <__kernel_rem_pio2+0x4da>
  402a52:	4602      	mov	r2, r0
  402a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  402a58:	e001      	b.n	402a5e <__kernel_rem_pio2+0x4de>
  402a5a:	4602      	mov	r2, r0
  402a5c:	460b      	mov	r3, r1
  402a5e:	9c05      	ldr	r4, [sp, #20]
  402a60:	e9c4 2300 	strd	r2, r3, [r4]
  402a64:	e0be      	b.n	402be4 <__kernel_rem_pio2+0x664>
  402a66:	2c00      	cmp	r4, #0
  402a68:	db09      	blt.n	402a7e <__kernel_rem_pio2+0x4fe>
  402a6a:	4610      	mov	r0, r2
  402a6c:	4619      	mov	r1, r3
  402a6e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  402a72:	f000 fa9b 	bl	402fac <__adddf3>
  402a76:	3c01      	subs	r4, #1
  402a78:	4602      	mov	r2, r0
  402a7a:	460b      	mov	r3, r1
  402a7c:	e7f3      	b.n	402a66 <__kernel_rem_pio2+0x4e6>
  402a7e:	f1b9 0f00 	cmp.w	r9, #0
  402a82:	d003      	beq.n	402a8c <__kernel_rem_pio2+0x50c>
  402a84:	4610      	mov	r0, r2
  402a86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  402a8a:	e001      	b.n	402a90 <__kernel_rem_pio2+0x510>
  402a8c:	4610      	mov	r0, r2
  402a8e:	4619      	mov	r1, r3
  402a90:	9d05      	ldr	r5, [sp, #20]
  402a92:	ac4a      	add	r4, sp, #296	; 0x128
  402a94:	e9c5 0100 	strd	r0, r1, [r5]
  402a98:	e9d4 0100 	ldrd	r0, r1, [r4]
  402a9c:	f000 fa84 	bl	402fa8 <__aeabi_dsub>
  402aa0:	2401      	movs	r4, #1
  402aa2:	4544      	cmp	r4, r8
  402aa4:	dc08      	bgt.n	402ab8 <__kernel_rem_pio2+0x538>
  402aa6:	ad4a      	add	r5, sp, #296	; 0x128
  402aa8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
  402aac:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ab0:	f000 fa7c 	bl	402fac <__adddf3>
  402ab4:	3401      	adds	r4, #1
  402ab6:	e7f4      	b.n	402aa2 <__kernel_rem_pio2+0x522>
  402ab8:	f1b9 0f00 	cmp.w	r9, #0
  402abc:	d003      	beq.n	402ac6 <__kernel_rem_pio2+0x546>
  402abe:	4602      	mov	r2, r0
  402ac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  402ac4:	e001      	b.n	402aca <__kernel_rem_pio2+0x54a>
  402ac6:	4602      	mov	r2, r0
  402ac8:	460b      	mov	r3, r1
  402aca:	9c05      	ldr	r4, [sp, #20]
  402acc:	e9c4 2302 	strd	r2, r3, [r4, #8]
  402ad0:	e088      	b.n	402be4 <__kernel_rem_pio2+0x664>
  402ad2:	f1bb 0f00 	cmp.w	fp, #0
  402ad6:	dd24      	ble.n	402b22 <__kernel_rem_pio2+0x5a2>
  402ad8:	e95a 4502 	ldrd	r4, r5, [sl, #-8]
  402adc:	e9da 6700 	ldrd	r6, r7, [sl]
  402ae0:	4620      	mov	r0, r4
  402ae2:	4629      	mov	r1, r5
  402ae4:	4632      	mov	r2, r6
  402ae6:	463b      	mov	r3, r7
  402ae8:	f8cd c004 	str.w	ip, [sp, #4]
  402aec:	e9cd 4506 	strd	r4, r5, [sp, #24]
  402af0:	f000 fa5c 	bl	402fac <__adddf3>
  402af4:	4604      	mov	r4, r0
  402af6:	460d      	mov	r5, r1
  402af8:	4622      	mov	r2, r4
  402afa:	462b      	mov	r3, r5
  402afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402b00:	f000 fa52 	bl	402fa8 <__aeabi_dsub>
  402b04:	4602      	mov	r2, r0
  402b06:	460b      	mov	r3, r1
  402b08:	4630      	mov	r0, r6
  402b0a:	4639      	mov	r1, r7
  402b0c:	f000 fa4e 	bl	402fac <__adddf3>
  402b10:	f10b 3bff 	add.w	fp, fp, #4294967295
  402b14:	e9ca 0100 	strd	r0, r1, [sl]
  402b18:	f8dd c004 	ldr.w	ip, [sp, #4]
  402b1c:	e96a 4502 	strd	r4, r5, [sl, #-8]!
  402b20:	e7d7      	b.n	402ad2 <__kernel_rem_pio2+0x552>
  402b22:	46e2      	mov	sl, ip
  402b24:	46c3      	mov	fp, r8
  402b26:	f1bb 0f01 	cmp.w	fp, #1
  402b2a:	dd29      	ble.n	402b80 <__kernel_rem_pio2+0x600>
  402b2c:	e95a 4502 	ldrd	r4, r5, [sl, #-8]
  402b30:	e9da 6700 	ldrd	r6, r7, [sl]
  402b34:	4620      	mov	r0, r4
  402b36:	4629      	mov	r1, r5
  402b38:	4632      	mov	r2, r6
  402b3a:	463b      	mov	r3, r7
  402b3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  402b40:	f000 fa34 	bl	402fac <__adddf3>
  402b44:	4604      	mov	r4, r0
  402b46:	460d      	mov	r5, r1
  402b48:	4622      	mov	r2, r4
  402b4a:	462b      	mov	r3, r5
  402b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402b50:	f000 fa2a 	bl	402fa8 <__aeabi_dsub>
  402b54:	4602      	mov	r2, r0
  402b56:	460b      	mov	r3, r1
  402b58:	4630      	mov	r0, r6
  402b5a:	4639      	mov	r1, r7
  402b5c:	f000 fa26 	bl	402fac <__adddf3>
  402b60:	f10b 3bff 	add.w	fp, fp, #4294967295
  402b64:	e9ca 0100 	strd	r0, r1, [sl]
  402b68:	e96a 4502 	strd	r4, r5, [sl, #-8]!
  402b6c:	e7db      	b.n	402b26 <__kernel_rem_pio2+0x5a6>
  402b6e:	bf00      	nop
  402b70:	41700000 	.word	0x41700000
  402b74:	3e700000 	.word	0x3e700000
  402b78:	3ff00000 	.word	0x3ff00000
  402b7c:	00404158 	.word	0x00404158
  402b80:	9d08      	ldr	r5, [sp, #32]
  402b82:	a84a      	add	r0, sp, #296	; 0x128
  402b84:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
  402b88:	2100      	movs	r1, #0
  402b8a:	2000      	movs	r0, #0
  402b8c:	f1b8 0f01 	cmp.w	r8, #1
  402b90:	dd06      	ble.n	402ba0 <__kernel_rem_pio2+0x620>
  402b92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  402b96:	f000 fa09 	bl	402fac <__adddf3>
  402b9a:	f108 38ff 	add.w	r8, r8, #4294967295
  402b9e:	e7f5      	b.n	402b8c <__kernel_rem_pio2+0x60c>
  402ba0:	f1b9 0f00 	cmp.w	r9, #0
  402ba4:	d10d      	bne.n	402bc2 <__kernel_rem_pio2+0x642>
  402ba6:	ac4a      	add	r4, sp, #296	; 0x128
  402ba8:	e9d4 2300 	ldrd	r2, r3, [r4]
  402bac:	9d05      	ldr	r5, [sp, #20]
  402bae:	ac4c      	add	r4, sp, #304	; 0x130
  402bb0:	e9c5 2300 	strd	r2, r3, [r5]
  402bb4:	e9d4 2300 	ldrd	r2, r3, [r4]
  402bb8:	e9c5 0104 	strd	r0, r1, [r5, #16]
  402bbc:	e9c5 2302 	strd	r2, r3, [r5, #8]
  402bc0:	e010      	b.n	402be4 <__kernel_rem_pio2+0x664>
  402bc2:	9d05      	ldr	r5, [sp, #20]
  402bc4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
  402bc6:	602b      	str	r3, [r5, #0]
  402bc8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
  402bca:	6128      	str	r0, [r5, #16]
  402bcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402bd0:	606b      	str	r3, [r5, #4]
  402bd2:	9b4c      	ldr	r3, [sp, #304]	; 0x130
  402bd4:	60ab      	str	r3, [r5, #8]
  402bd6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
  402bd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402bdc:	60eb      	str	r3, [r5, #12]
  402bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  402be2:	616b      	str	r3, [r5, #20]
  402be4:	9c02      	ldr	r4, [sp, #8]
  402be6:	f004 0007 	and.w	r0, r4, #7
  402bea:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  402bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bf2:	3c18      	subs	r4, #24
  402bf4:	4688      	mov	r8, r1
  402bf6:	a90e      	add	r1, sp, #56	; 0x38
  402bf8:	f851 3028 	ldr.w	r3, [r1, r8, lsl #2]
  402bfc:	2b00      	cmp	r3, #0
  402bfe:	f47f aea6 	bne.w	40294e <__kernel_rem_pio2+0x3ce>
  402c02:	f108 38ff 	add.w	r8, r8, #4294967295
  402c06:	3c18      	subs	r4, #24
  402c08:	e7f5      	b.n	402bf6 <__kernel_rem_pio2+0x676>
  402c0a:	bf00      	nop
  402c0c:	0000      	movs	r0, r0
	...

00402c10 <__kernel_sin>:
  402c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c14:	b085      	sub	sp, #20
  402c16:	e9cd 2300 	strd	r2, r3, [sp]
  402c1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402c1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  402c22:	4604      	mov	r4, r0
  402c24:	460d      	mov	r5, r1
  402c26:	da04      	bge.n	402c32 <__kernel_sin+0x22>
  402c28:	f000 fe0c 	bl	403844 <__aeabi_d2iz>
  402c2c:	2800      	cmp	r0, #0
  402c2e:	f000 808b 	beq.w	402d48 <__kernel_sin+0x138>
  402c32:	4622      	mov	r2, r4
  402c34:	462b      	mov	r3, r5
  402c36:	4620      	mov	r0, r4
  402c38:	4629      	mov	r1, r5
  402c3a:	f000 fb69 	bl	403310 <__aeabi_dmul>
  402c3e:	4622      	mov	r2, r4
  402c40:	462b      	mov	r3, r5
  402c42:	4606      	mov	r6, r0
  402c44:	460f      	mov	r7, r1
  402c46:	f000 fb63 	bl	403310 <__aeabi_dmul>
  402c4a:	a343      	add	r3, pc, #268	; (adr r3, 402d58 <__kernel_sin+0x148>)
  402c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c50:	4682      	mov	sl, r0
  402c52:	468b      	mov	fp, r1
  402c54:	4630      	mov	r0, r6
  402c56:	4639      	mov	r1, r7
  402c58:	f000 fb5a 	bl	403310 <__aeabi_dmul>
  402c5c:	a340      	add	r3, pc, #256	; (adr r3, 402d60 <__kernel_sin+0x150>)
  402c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c62:	f000 f9a1 	bl	402fa8 <__aeabi_dsub>
  402c66:	4602      	mov	r2, r0
  402c68:	460b      	mov	r3, r1
  402c6a:	4630      	mov	r0, r6
  402c6c:	4639      	mov	r1, r7
  402c6e:	f000 fb4f 	bl	403310 <__aeabi_dmul>
  402c72:	a33d      	add	r3, pc, #244	; (adr r3, 402d68 <__kernel_sin+0x158>)
  402c74:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c78:	f000 f998 	bl	402fac <__adddf3>
  402c7c:	4602      	mov	r2, r0
  402c7e:	460b      	mov	r3, r1
  402c80:	4630      	mov	r0, r6
  402c82:	4639      	mov	r1, r7
  402c84:	f000 fb44 	bl	403310 <__aeabi_dmul>
  402c88:	a339      	add	r3, pc, #228	; (adr r3, 402d70 <__kernel_sin+0x160>)
  402c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c8e:	f000 f98b 	bl	402fa8 <__aeabi_dsub>
  402c92:	4602      	mov	r2, r0
  402c94:	460b      	mov	r3, r1
  402c96:	4630      	mov	r0, r6
  402c98:	4639      	mov	r1, r7
  402c9a:	f000 fb39 	bl	403310 <__aeabi_dmul>
  402c9e:	a336      	add	r3, pc, #216	; (adr r3, 402d78 <__kernel_sin+0x168>)
  402ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ca4:	f000 f982 	bl	402fac <__adddf3>
  402ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402caa:	4680      	mov	r8, r0
  402cac:	4689      	mov	r9, r1
  402cae:	b9bb      	cbnz	r3, 402ce0 <__kernel_sin+0xd0>
  402cb0:	4642      	mov	r2, r8
  402cb2:	464b      	mov	r3, r9
  402cb4:	4630      	mov	r0, r6
  402cb6:	4639      	mov	r1, r7
  402cb8:	f000 fb2a 	bl	403310 <__aeabi_dmul>
  402cbc:	a330      	add	r3, pc, #192	; (adr r3, 402d80 <__kernel_sin+0x170>)
  402cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cc2:	f000 f971 	bl	402fa8 <__aeabi_dsub>
  402cc6:	4602      	mov	r2, r0
  402cc8:	460b      	mov	r3, r1
  402cca:	4650      	mov	r0, sl
  402ccc:	4659      	mov	r1, fp
  402cce:	f000 fb1f 	bl	403310 <__aeabi_dmul>
  402cd2:	4602      	mov	r2, r0
  402cd4:	460b      	mov	r3, r1
  402cd6:	4620      	mov	r0, r4
  402cd8:	4629      	mov	r1, r5
  402cda:	f000 f967 	bl	402fac <__adddf3>
  402cde:	e035      	b.n	402d4c <__kernel_sin+0x13c>
  402ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
  402ce4:	2200      	movs	r2, #0
  402ce6:	4b28      	ldr	r3, [pc, #160]	; (402d88 <__kernel_sin+0x178>)
  402ce8:	f000 fb12 	bl	403310 <__aeabi_dmul>
  402cec:	4642      	mov	r2, r8
  402cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402cf2:	464b      	mov	r3, r9
  402cf4:	4650      	mov	r0, sl
  402cf6:	4659      	mov	r1, fp
  402cf8:	f000 fb0a 	bl	403310 <__aeabi_dmul>
  402cfc:	4602      	mov	r2, r0
  402cfe:	460b      	mov	r3, r1
  402d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402d04:	f000 f950 	bl	402fa8 <__aeabi_dsub>
  402d08:	4602      	mov	r2, r0
  402d0a:	460b      	mov	r3, r1
  402d0c:	4630      	mov	r0, r6
  402d0e:	4639      	mov	r1, r7
  402d10:	f000 fafe 	bl	403310 <__aeabi_dmul>
  402d14:	e9dd 2300 	ldrd	r2, r3, [sp]
  402d18:	f000 f946 	bl	402fa8 <__aeabi_dsub>
  402d1c:	a318      	add	r3, pc, #96	; (adr r3, 402d80 <__kernel_sin+0x170>)
  402d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d22:	4606      	mov	r6, r0
  402d24:	460f      	mov	r7, r1
  402d26:	4650      	mov	r0, sl
  402d28:	4659      	mov	r1, fp
  402d2a:	f000 faf1 	bl	403310 <__aeabi_dmul>
  402d2e:	4602      	mov	r2, r0
  402d30:	460b      	mov	r3, r1
  402d32:	4630      	mov	r0, r6
  402d34:	4639      	mov	r1, r7
  402d36:	f000 f939 	bl	402fac <__adddf3>
  402d3a:	4602      	mov	r2, r0
  402d3c:	460b      	mov	r3, r1
  402d3e:	4620      	mov	r0, r4
  402d40:	4629      	mov	r1, r5
  402d42:	f000 f931 	bl	402fa8 <__aeabi_dsub>
  402d46:	e001      	b.n	402d4c <__kernel_sin+0x13c>
  402d48:	4620      	mov	r0, r4
  402d4a:	4629      	mov	r1, r5
  402d4c:	b005      	add	sp, #20
  402d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d52:	bf00      	nop
  402d54:	f3af 8000 	nop.w
  402d58:	5acfd57c 	.word	0x5acfd57c
  402d5c:	3de5d93a 	.word	0x3de5d93a
  402d60:	8a2b9ceb 	.word	0x8a2b9ceb
  402d64:	3e5ae5e6 	.word	0x3e5ae5e6
  402d68:	57b1fe7d 	.word	0x57b1fe7d
  402d6c:	3ec71de3 	.word	0x3ec71de3
  402d70:	19c161d5 	.word	0x19c161d5
  402d74:	3f2a01a0 	.word	0x3f2a01a0
  402d78:	1110f8a6 	.word	0x1110f8a6
  402d7c:	3f811111 	.word	0x3f811111
  402d80:	55555549 	.word	0x55555549
  402d84:	3fc55555 	.word	0x3fc55555
  402d88:	3fe00000 	.word	0x3fe00000
  402d8c:	f3af 8000 	nop.w

00402d90 <fabs>:
  402d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402d94:	4770      	bx	lr
	...

00402d98 <floor>:
  402d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d9c:	f3c1 590a 	ubfx	r9, r1, #20, #11
  402da0:	f2a9 38ff 	subw	r8, r9, #1023	; 0x3ff
  402da4:	f1b8 0f13 	cmp.w	r8, #19
  402da8:	4602      	mov	r2, r0
  402daa:	460b      	mov	r3, r1
  402dac:	4604      	mov	r4, r0
  402dae:	460d      	mov	r5, r1
  402db0:	460e      	mov	r6, r1
  402db2:	4607      	mov	r7, r0
  402db4:	dc36      	bgt.n	402e24 <floor+0x8c>
  402db6:	f1b8 0f00 	cmp.w	r8, #0
  402dba:	da15      	bge.n	402de8 <floor+0x50>
  402dbc:	a336      	add	r3, pc, #216	; (adr r3, 402e98 <floor+0x100>)
  402dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402dc2:	f000 f8f3 	bl	402fac <__adddf3>
  402dc6:	2200      	movs	r2, #0
  402dc8:	2300      	movs	r3, #0
  402dca:	f000 fd31 	bl	403830 <__aeabi_dcmpgt>
  402dce:	2800      	cmp	r0, #0
  402dd0:	d059      	beq.n	402e86 <floor+0xee>
  402dd2:	2d00      	cmp	r5, #0
  402dd4:	da55      	bge.n	402e82 <floor+0xea>
  402dd6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  402dda:	4323      	orrs	r3, r4
  402ddc:	4b30      	ldr	r3, [pc, #192]	; (402ea0 <floor+0x108>)
  402dde:	f04f 0700 	mov.w	r7, #0
  402de2:	bf18      	it	ne
  402de4:	461e      	movne	r6, r3
  402de6:	e04e      	b.n	402e86 <floor+0xee>
  402de8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 402ea4 <floor+0x10c>
  402dec:	fa49 f908 	asr.w	r9, r9, r8
  402df0:	ea09 0c01 	and.w	ip, r9, r1
  402df4:	ea5c 0c00 	orrs.w	ip, ip, r0
  402df8:	d049      	beq.n	402e8e <floor+0xf6>
  402dfa:	a327      	add	r3, pc, #156	; (adr r3, 402e98 <floor+0x100>)
  402dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e00:	f000 f8d4 	bl	402fac <__adddf3>
  402e04:	2200      	movs	r2, #0
  402e06:	2300      	movs	r3, #0
  402e08:	f000 fd12 	bl	403830 <__aeabi_dcmpgt>
  402e0c:	b3d8      	cbz	r0, 402e86 <floor+0xee>
  402e0e:	2d00      	cmp	r5, #0
  402e10:	da04      	bge.n	402e1c <floor+0x84>
  402e12:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  402e16:	fa46 f608 	asr.w	r6, r6, r8
  402e1a:	442e      	add	r6, r5
  402e1c:	ea26 0609 	bic.w	r6, r6, r9
  402e20:	2700      	movs	r7, #0
  402e22:	e030      	b.n	402e86 <floor+0xee>
  402e24:	f1b8 0f33 	cmp.w	r8, #51	; 0x33
  402e28:	dd06      	ble.n	402e38 <floor+0xa0>
  402e2a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
  402e2e:	d12e      	bne.n	402e8e <floor+0xf6>
  402e30:	f000 f8bc 	bl	402fac <__adddf3>
  402e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e38:	f2a9 4c13 	subw	ip, r9, #1043	; 0x413
  402e3c:	f04f 3aff 	mov.w	sl, #4294967295
  402e40:	fa2a fa0c 	lsr.w	sl, sl, ip
  402e44:	ea1a 0f00 	tst.w	sl, r0
  402e48:	d021      	beq.n	402e8e <floor+0xf6>
  402e4a:	a313      	add	r3, pc, #76	; (adr r3, 402e98 <floor+0x100>)
  402e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e50:	f000 f8ac 	bl	402fac <__adddf3>
  402e54:	2200      	movs	r2, #0
  402e56:	2300      	movs	r3, #0
  402e58:	f000 fcea 	bl	403830 <__aeabi_dcmpgt>
  402e5c:	b198      	cbz	r0, 402e86 <floor+0xee>
  402e5e:	2d00      	cmp	r5, #0
  402e60:	da0c      	bge.n	402e7c <floor+0xe4>
  402e62:	f1b8 0f14 	cmp.w	r8, #20
  402e66:	d008      	beq.n	402e7a <floor+0xe2>
  402e68:	f5c9 6986 	rsb	r9, r9, #1072	; 0x430
  402e6c:	f109 0903 	add.w	r9, r9, #3
  402e70:	2701      	movs	r7, #1
  402e72:	fa07 f709 	lsl.w	r7, r7, r9
  402e76:	193f      	adds	r7, r7, r4
  402e78:	d300      	bcc.n	402e7c <floor+0xe4>
  402e7a:	1c6e      	adds	r6, r5, #1
  402e7c:	ea27 070a 	bic.w	r7, r7, sl
  402e80:	e001      	b.n	402e86 <floor+0xee>
  402e82:	2700      	movs	r7, #0
  402e84:	463e      	mov	r6, r7
  402e86:	4631      	mov	r1, r6
  402e88:	4638      	mov	r0, r7
  402e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e8e:	4610      	mov	r0, r2
  402e90:	4619      	mov	r1, r3
  402e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e96:	bf00      	nop
  402e98:	8800759c 	.word	0x8800759c
  402e9c:	7e37e43c 	.word	0x7e37e43c
  402ea0:	bff00000 	.word	0xbff00000
  402ea4:	000fffff 	.word	0x000fffff

00402ea8 <scalbn>:
  402ea8:	f3c1 530a 	ubfx	r3, r1, #20, #11
  402eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402eb0:	468c      	mov	ip, r1
  402eb2:	4604      	mov	r4, r0
  402eb4:	460d      	mov	r5, r1
  402eb6:	4690      	mov	r8, r2
  402eb8:	b98b      	cbnz	r3, 402ede <scalbn+0x36>
  402eba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402ebe:	4303      	orrs	r3, r0
  402ec0:	d051      	beq.n	402f66 <scalbn+0xbe>
  402ec2:	4b2f      	ldr	r3, [pc, #188]	; (402f80 <scalbn+0xd8>)
  402ec4:	2200      	movs	r2, #0
  402ec6:	f000 fa23 	bl	403310 <__aeabi_dmul>
  402eca:	4b2e      	ldr	r3, [pc, #184]	; (402f84 <scalbn+0xdc>)
  402ecc:	4598      	cmp	r8, r3
  402ece:	4604      	mov	r4, r0
  402ed0:	460d      	mov	r5, r1
  402ed2:	db35      	blt.n	402f40 <scalbn+0x98>
  402ed4:	f3c1 530a 	ubfx	r3, r1, #20, #11
  402ed8:	468c      	mov	ip, r1
  402eda:	3b36      	subs	r3, #54	; 0x36
  402edc:	e009      	b.n	402ef2 <scalbn+0x4a>
  402ede:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402ee2:	4293      	cmp	r3, r2
  402ee4:	d105      	bne.n	402ef2 <scalbn+0x4a>
  402ee6:	4602      	mov	r2, r0
  402ee8:	460b      	mov	r3, r1
  402eea:	f000 f85f 	bl	402fac <__adddf3>
  402eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ef2:	4443      	add	r3, r8
  402ef4:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402ef8:	4293      	cmp	r3, r2
  402efa:	dc0f      	bgt.n	402f1c <scalbn+0x74>
  402efc:	2b00      	cmp	r3, #0
  402efe:	dd06      	ble.n	402f0e <scalbn+0x66>
  402f00:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
  402f04:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
  402f08:	ea4c 5503 	orr.w	r5, ip, r3, lsl #20
  402f0c:	e02b      	b.n	402f66 <scalbn+0xbe>
  402f0e:	f113 0f35 	cmn.w	r3, #53	; 0x35
  402f12:	da19      	bge.n	402f48 <scalbn+0xa0>
  402f14:	f24c 3350 	movw	r3, #50000	; 0xc350
  402f18:	4598      	cmp	r8, r3
  402f1a:	dd0a      	ble.n	402f32 <scalbn+0x8a>
  402f1c:	4622      	mov	r2, r4
  402f1e:	462b      	mov	r3, r5
  402f20:	a113      	add	r1, pc, #76	; (adr r1, 402f70 <scalbn+0xc8>)
  402f22:	e9d1 0100 	ldrd	r0, r1, [r1]
  402f26:	f000 f833 	bl	402f90 <copysign>
  402f2a:	a311      	add	r3, pc, #68	; (adr r3, 402f70 <scalbn+0xc8>)
  402f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f30:	e015      	b.n	402f5e <scalbn+0xb6>
  402f32:	a111      	add	r1, pc, #68	; (adr r1, 402f78 <scalbn+0xd0>)
  402f34:	e9d1 0100 	ldrd	r0, r1, [r1]
  402f38:	4622      	mov	r2, r4
  402f3a:	462b      	mov	r3, r5
  402f3c:	f000 f828 	bl	402f90 <copysign>
  402f40:	a30d      	add	r3, pc, #52	; (adr r3, 402f78 <scalbn+0xd0>)
  402f42:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f46:	e00a      	b.n	402f5e <scalbn+0xb6>
  402f48:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
  402f4c:	3336      	adds	r3, #54	; 0x36
  402f4e:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
  402f52:	ea4c 5503 	orr.w	r5, ip, r3, lsl #20
  402f56:	4b0c      	ldr	r3, [pc, #48]	; (402f88 <scalbn+0xe0>)
  402f58:	4620      	mov	r0, r4
  402f5a:	4629      	mov	r1, r5
  402f5c:	2200      	movs	r2, #0
  402f5e:	f000 f9d7 	bl	403310 <__aeabi_dmul>
  402f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f66:	4620      	mov	r0, r4
  402f68:	4629      	mov	r1, r5
  402f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f6e:	bf00      	nop
  402f70:	8800759c 	.word	0x8800759c
  402f74:	7e37e43c 	.word	0x7e37e43c
  402f78:	c2f8f359 	.word	0xc2f8f359
  402f7c:	01a56e1f 	.word	0x01a56e1f
  402f80:	43500000 	.word	0x43500000
  402f84:	ffff3cb0 	.word	0xffff3cb0
  402f88:	3c900000 	.word	0x3c900000
  402f8c:	f3af 8000 	nop.w

00402f90 <copysign>:
  402f90:	b530      	push	{r4, r5, lr}
  402f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402f96:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402f9a:	ea43 0102 	orr.w	r1, r3, r2
  402f9e:	bd30      	pop	{r4, r5, pc}

00402fa0 <__aeabi_drsub>:
  402fa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402fa4:	e002      	b.n	402fac <__adddf3>
  402fa6:	bf00      	nop

00402fa8 <__aeabi_dsub>:
  402fa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402fac <__adddf3>:
  402fac:	b530      	push	{r4, r5, lr}
  402fae:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402fb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402fb6:	ea94 0f05 	teq	r4, r5
  402fba:	bf08      	it	eq
  402fbc:	ea90 0f02 	teqeq	r0, r2
  402fc0:	bf1f      	itttt	ne
  402fc2:	ea54 0c00 	orrsne.w	ip, r4, r0
  402fc6:	ea55 0c02 	orrsne.w	ip, r5, r2
  402fca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402fce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402fd2:	f000 80e2 	beq.w	40319a <__adddf3+0x1ee>
  402fd6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402fda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402fde:	bfb8      	it	lt
  402fe0:	426d      	neglt	r5, r5
  402fe2:	dd0c      	ble.n	402ffe <__adddf3+0x52>
  402fe4:	442c      	add	r4, r5
  402fe6:	ea80 0202 	eor.w	r2, r0, r2
  402fea:	ea81 0303 	eor.w	r3, r1, r3
  402fee:	ea82 0000 	eor.w	r0, r2, r0
  402ff2:	ea83 0101 	eor.w	r1, r3, r1
  402ff6:	ea80 0202 	eor.w	r2, r0, r2
  402ffa:	ea81 0303 	eor.w	r3, r1, r3
  402ffe:	2d36      	cmp	r5, #54	; 0x36
  403000:	bf88      	it	hi
  403002:	bd30      	pophi	{r4, r5, pc}
  403004:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403008:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40300c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403010:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403014:	d002      	beq.n	40301c <__adddf3+0x70>
  403016:	4240      	negs	r0, r0
  403018:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40301c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403020:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403024:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403028:	d002      	beq.n	403030 <__adddf3+0x84>
  40302a:	4252      	negs	r2, r2
  40302c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403030:	ea94 0f05 	teq	r4, r5
  403034:	f000 80a7 	beq.w	403186 <__adddf3+0x1da>
  403038:	f1a4 0401 	sub.w	r4, r4, #1
  40303c:	f1d5 0e20 	rsbs	lr, r5, #32
  403040:	db0d      	blt.n	40305e <__adddf3+0xb2>
  403042:	fa02 fc0e 	lsl.w	ip, r2, lr
  403046:	fa22 f205 	lsr.w	r2, r2, r5
  40304a:	1880      	adds	r0, r0, r2
  40304c:	f141 0100 	adc.w	r1, r1, #0
  403050:	fa03 f20e 	lsl.w	r2, r3, lr
  403054:	1880      	adds	r0, r0, r2
  403056:	fa43 f305 	asr.w	r3, r3, r5
  40305a:	4159      	adcs	r1, r3
  40305c:	e00e      	b.n	40307c <__adddf3+0xd0>
  40305e:	f1a5 0520 	sub.w	r5, r5, #32
  403062:	f10e 0e20 	add.w	lr, lr, #32
  403066:	2a01      	cmp	r2, #1
  403068:	fa03 fc0e 	lsl.w	ip, r3, lr
  40306c:	bf28      	it	cs
  40306e:	f04c 0c02 	orrcs.w	ip, ip, #2
  403072:	fa43 f305 	asr.w	r3, r3, r5
  403076:	18c0      	adds	r0, r0, r3
  403078:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40307c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403080:	d507      	bpl.n	403092 <__adddf3+0xe6>
  403082:	f04f 0e00 	mov.w	lr, #0
  403086:	f1dc 0c00 	rsbs	ip, ip, #0
  40308a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40308e:	eb6e 0101 	sbc.w	r1, lr, r1
  403092:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403096:	d31b      	bcc.n	4030d0 <__adddf3+0x124>
  403098:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40309c:	d30c      	bcc.n	4030b8 <__adddf3+0x10c>
  40309e:	0849      	lsrs	r1, r1, #1
  4030a0:	ea5f 0030 	movs.w	r0, r0, rrx
  4030a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4030a8:	f104 0401 	add.w	r4, r4, #1
  4030ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4030b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4030b4:	f080 809a 	bcs.w	4031ec <__adddf3+0x240>
  4030b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4030bc:	bf08      	it	eq
  4030be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4030c2:	f150 0000 	adcs.w	r0, r0, #0
  4030c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4030ca:	ea41 0105 	orr.w	r1, r1, r5
  4030ce:	bd30      	pop	{r4, r5, pc}
  4030d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4030d4:	4140      	adcs	r0, r0
  4030d6:	eb41 0101 	adc.w	r1, r1, r1
  4030da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4030de:	f1a4 0401 	sub.w	r4, r4, #1
  4030e2:	d1e9      	bne.n	4030b8 <__adddf3+0x10c>
  4030e4:	f091 0f00 	teq	r1, #0
  4030e8:	bf04      	itt	eq
  4030ea:	4601      	moveq	r1, r0
  4030ec:	2000      	moveq	r0, #0
  4030ee:	fab1 f381 	clz	r3, r1
  4030f2:	bf08      	it	eq
  4030f4:	3320      	addeq	r3, #32
  4030f6:	f1a3 030b 	sub.w	r3, r3, #11
  4030fa:	f1b3 0220 	subs.w	r2, r3, #32
  4030fe:	da0c      	bge.n	40311a <__adddf3+0x16e>
  403100:	320c      	adds	r2, #12
  403102:	dd08      	ble.n	403116 <__adddf3+0x16a>
  403104:	f102 0c14 	add.w	ip, r2, #20
  403108:	f1c2 020c 	rsb	r2, r2, #12
  40310c:	fa01 f00c 	lsl.w	r0, r1, ip
  403110:	fa21 f102 	lsr.w	r1, r1, r2
  403114:	e00c      	b.n	403130 <__adddf3+0x184>
  403116:	f102 0214 	add.w	r2, r2, #20
  40311a:	bfd8      	it	le
  40311c:	f1c2 0c20 	rsble	ip, r2, #32
  403120:	fa01 f102 	lsl.w	r1, r1, r2
  403124:	fa20 fc0c 	lsr.w	ip, r0, ip
  403128:	bfdc      	itt	le
  40312a:	ea41 010c 	orrle.w	r1, r1, ip
  40312e:	4090      	lslle	r0, r2
  403130:	1ae4      	subs	r4, r4, r3
  403132:	bfa2      	ittt	ge
  403134:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403138:	4329      	orrge	r1, r5
  40313a:	bd30      	popge	{r4, r5, pc}
  40313c:	ea6f 0404 	mvn.w	r4, r4
  403140:	3c1f      	subs	r4, #31
  403142:	da1c      	bge.n	40317e <__adddf3+0x1d2>
  403144:	340c      	adds	r4, #12
  403146:	dc0e      	bgt.n	403166 <__adddf3+0x1ba>
  403148:	f104 0414 	add.w	r4, r4, #20
  40314c:	f1c4 0220 	rsb	r2, r4, #32
  403150:	fa20 f004 	lsr.w	r0, r0, r4
  403154:	fa01 f302 	lsl.w	r3, r1, r2
  403158:	ea40 0003 	orr.w	r0, r0, r3
  40315c:	fa21 f304 	lsr.w	r3, r1, r4
  403160:	ea45 0103 	orr.w	r1, r5, r3
  403164:	bd30      	pop	{r4, r5, pc}
  403166:	f1c4 040c 	rsb	r4, r4, #12
  40316a:	f1c4 0220 	rsb	r2, r4, #32
  40316e:	fa20 f002 	lsr.w	r0, r0, r2
  403172:	fa01 f304 	lsl.w	r3, r1, r4
  403176:	ea40 0003 	orr.w	r0, r0, r3
  40317a:	4629      	mov	r1, r5
  40317c:	bd30      	pop	{r4, r5, pc}
  40317e:	fa21 f004 	lsr.w	r0, r1, r4
  403182:	4629      	mov	r1, r5
  403184:	bd30      	pop	{r4, r5, pc}
  403186:	f094 0f00 	teq	r4, #0
  40318a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40318e:	bf06      	itte	eq
  403190:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403194:	3401      	addeq	r4, #1
  403196:	3d01      	subne	r5, #1
  403198:	e74e      	b.n	403038 <__adddf3+0x8c>
  40319a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40319e:	bf18      	it	ne
  4031a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4031a4:	d029      	beq.n	4031fa <__adddf3+0x24e>
  4031a6:	ea94 0f05 	teq	r4, r5
  4031aa:	bf08      	it	eq
  4031ac:	ea90 0f02 	teqeq	r0, r2
  4031b0:	d005      	beq.n	4031be <__adddf3+0x212>
  4031b2:	ea54 0c00 	orrs.w	ip, r4, r0
  4031b6:	bf04      	itt	eq
  4031b8:	4619      	moveq	r1, r3
  4031ba:	4610      	moveq	r0, r2
  4031bc:	bd30      	pop	{r4, r5, pc}
  4031be:	ea91 0f03 	teq	r1, r3
  4031c2:	bf1e      	ittt	ne
  4031c4:	2100      	movne	r1, #0
  4031c6:	2000      	movne	r0, #0
  4031c8:	bd30      	popne	{r4, r5, pc}
  4031ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4031ce:	d105      	bne.n	4031dc <__adddf3+0x230>
  4031d0:	0040      	lsls	r0, r0, #1
  4031d2:	4149      	adcs	r1, r1
  4031d4:	bf28      	it	cs
  4031d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4031da:	bd30      	pop	{r4, r5, pc}
  4031dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4031e0:	bf3c      	itt	cc
  4031e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4031e6:	bd30      	popcc	{r4, r5, pc}
  4031e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4031ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4031f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4031f4:	f04f 0000 	mov.w	r0, #0
  4031f8:	bd30      	pop	{r4, r5, pc}
  4031fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4031fe:	bf1a      	itte	ne
  403200:	4619      	movne	r1, r3
  403202:	4610      	movne	r0, r2
  403204:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403208:	bf1c      	itt	ne
  40320a:	460b      	movne	r3, r1
  40320c:	4602      	movne	r2, r0
  40320e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403212:	bf06      	itte	eq
  403214:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403218:	ea91 0f03 	teqeq	r1, r3
  40321c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403220:	bd30      	pop	{r4, r5, pc}
  403222:	bf00      	nop

00403224 <__aeabi_ui2d>:
  403224:	f090 0f00 	teq	r0, #0
  403228:	bf04      	itt	eq
  40322a:	2100      	moveq	r1, #0
  40322c:	4770      	bxeq	lr
  40322e:	b530      	push	{r4, r5, lr}
  403230:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403234:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403238:	f04f 0500 	mov.w	r5, #0
  40323c:	f04f 0100 	mov.w	r1, #0
  403240:	e750      	b.n	4030e4 <__adddf3+0x138>
  403242:	bf00      	nop

00403244 <__aeabi_i2d>:
  403244:	f090 0f00 	teq	r0, #0
  403248:	bf04      	itt	eq
  40324a:	2100      	moveq	r1, #0
  40324c:	4770      	bxeq	lr
  40324e:	b530      	push	{r4, r5, lr}
  403250:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403254:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403258:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40325c:	bf48      	it	mi
  40325e:	4240      	negmi	r0, r0
  403260:	f04f 0100 	mov.w	r1, #0
  403264:	e73e      	b.n	4030e4 <__adddf3+0x138>
  403266:	bf00      	nop

00403268 <__aeabi_f2d>:
  403268:	0042      	lsls	r2, r0, #1
  40326a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40326e:	ea4f 0131 	mov.w	r1, r1, rrx
  403272:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403276:	bf1f      	itttt	ne
  403278:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40327c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403280:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403284:	4770      	bxne	lr
  403286:	f092 0f00 	teq	r2, #0
  40328a:	bf14      	ite	ne
  40328c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403290:	4770      	bxeq	lr
  403292:	b530      	push	{r4, r5, lr}
  403294:	f44f 7460 	mov.w	r4, #896	; 0x380
  403298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40329c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4032a0:	e720      	b.n	4030e4 <__adddf3+0x138>
  4032a2:	bf00      	nop

004032a4 <__aeabi_ul2d>:
  4032a4:	ea50 0201 	orrs.w	r2, r0, r1
  4032a8:	bf08      	it	eq
  4032aa:	4770      	bxeq	lr
  4032ac:	b530      	push	{r4, r5, lr}
  4032ae:	f04f 0500 	mov.w	r5, #0
  4032b2:	e00a      	b.n	4032ca <__aeabi_l2d+0x16>

004032b4 <__aeabi_l2d>:
  4032b4:	ea50 0201 	orrs.w	r2, r0, r1
  4032b8:	bf08      	it	eq
  4032ba:	4770      	bxeq	lr
  4032bc:	b530      	push	{r4, r5, lr}
  4032be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4032c2:	d502      	bpl.n	4032ca <__aeabi_l2d+0x16>
  4032c4:	4240      	negs	r0, r0
  4032c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4032ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4032ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4032d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4032d6:	f43f aedc 	beq.w	403092 <__adddf3+0xe6>
  4032da:	f04f 0203 	mov.w	r2, #3
  4032de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4032e2:	bf18      	it	ne
  4032e4:	3203      	addne	r2, #3
  4032e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4032ea:	bf18      	it	ne
  4032ec:	3203      	addne	r2, #3
  4032ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4032f2:	f1c2 0320 	rsb	r3, r2, #32
  4032f6:	fa00 fc03 	lsl.w	ip, r0, r3
  4032fa:	fa20 f002 	lsr.w	r0, r0, r2
  4032fe:	fa01 fe03 	lsl.w	lr, r1, r3
  403302:	ea40 000e 	orr.w	r0, r0, lr
  403306:	fa21 f102 	lsr.w	r1, r1, r2
  40330a:	4414      	add	r4, r2
  40330c:	e6c1      	b.n	403092 <__adddf3+0xe6>
  40330e:	bf00      	nop

00403310 <__aeabi_dmul>:
  403310:	b570      	push	{r4, r5, r6, lr}
  403312:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403316:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40331a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40331e:	bf1d      	ittte	ne
  403320:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403324:	ea94 0f0c 	teqne	r4, ip
  403328:	ea95 0f0c 	teqne	r5, ip
  40332c:	f000 f8de 	bleq	4034ec <__aeabi_dmul+0x1dc>
  403330:	442c      	add	r4, r5
  403332:	ea81 0603 	eor.w	r6, r1, r3
  403336:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40333a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40333e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403342:	bf18      	it	ne
  403344:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40334c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403350:	d038      	beq.n	4033c4 <__aeabi_dmul+0xb4>
  403352:	fba0 ce02 	umull	ip, lr, r0, r2
  403356:	f04f 0500 	mov.w	r5, #0
  40335a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40335e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403362:	fbe0 e503 	umlal	lr, r5, r0, r3
  403366:	f04f 0600 	mov.w	r6, #0
  40336a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40336e:	f09c 0f00 	teq	ip, #0
  403372:	bf18      	it	ne
  403374:	f04e 0e01 	orrne.w	lr, lr, #1
  403378:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40337c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403380:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403384:	d204      	bcs.n	403390 <__aeabi_dmul+0x80>
  403386:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40338a:	416d      	adcs	r5, r5
  40338c:	eb46 0606 	adc.w	r6, r6, r6
  403390:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403394:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403398:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40339c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4033a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4033a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4033a8:	bf88      	it	hi
  4033aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4033ae:	d81e      	bhi.n	4033ee <__aeabi_dmul+0xde>
  4033b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4033b4:	bf08      	it	eq
  4033b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4033ba:	f150 0000 	adcs.w	r0, r0, #0
  4033be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4033c2:	bd70      	pop	{r4, r5, r6, pc}
  4033c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4033c8:	ea46 0101 	orr.w	r1, r6, r1
  4033cc:	ea40 0002 	orr.w	r0, r0, r2
  4033d0:	ea81 0103 	eor.w	r1, r1, r3
  4033d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4033d8:	bfc2      	ittt	gt
  4033da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4033de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4033e2:	bd70      	popgt	{r4, r5, r6, pc}
  4033e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4033e8:	f04f 0e00 	mov.w	lr, #0
  4033ec:	3c01      	subs	r4, #1
  4033ee:	f300 80ab 	bgt.w	403548 <__aeabi_dmul+0x238>
  4033f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4033f6:	bfde      	ittt	le
  4033f8:	2000      	movle	r0, #0
  4033fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4033fe:	bd70      	pople	{r4, r5, r6, pc}
  403400:	f1c4 0400 	rsb	r4, r4, #0
  403404:	3c20      	subs	r4, #32
  403406:	da35      	bge.n	403474 <__aeabi_dmul+0x164>
  403408:	340c      	adds	r4, #12
  40340a:	dc1b      	bgt.n	403444 <__aeabi_dmul+0x134>
  40340c:	f104 0414 	add.w	r4, r4, #20
  403410:	f1c4 0520 	rsb	r5, r4, #32
  403414:	fa00 f305 	lsl.w	r3, r0, r5
  403418:	fa20 f004 	lsr.w	r0, r0, r4
  40341c:	fa01 f205 	lsl.w	r2, r1, r5
  403420:	ea40 0002 	orr.w	r0, r0, r2
  403424:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40342c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403430:	fa21 f604 	lsr.w	r6, r1, r4
  403434:	eb42 0106 	adc.w	r1, r2, r6
  403438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40343c:	bf08      	it	eq
  40343e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403442:	bd70      	pop	{r4, r5, r6, pc}
  403444:	f1c4 040c 	rsb	r4, r4, #12
  403448:	f1c4 0520 	rsb	r5, r4, #32
  40344c:	fa00 f304 	lsl.w	r3, r0, r4
  403450:	fa20 f005 	lsr.w	r0, r0, r5
  403454:	fa01 f204 	lsl.w	r2, r1, r4
  403458:	ea40 0002 	orr.w	r0, r0, r2
  40345c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403460:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403464:	f141 0100 	adc.w	r1, r1, #0
  403468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40346c:	bf08      	it	eq
  40346e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403472:	bd70      	pop	{r4, r5, r6, pc}
  403474:	f1c4 0520 	rsb	r5, r4, #32
  403478:	fa00 f205 	lsl.w	r2, r0, r5
  40347c:	ea4e 0e02 	orr.w	lr, lr, r2
  403480:	fa20 f304 	lsr.w	r3, r0, r4
  403484:	fa01 f205 	lsl.w	r2, r1, r5
  403488:	ea43 0302 	orr.w	r3, r3, r2
  40348c:	fa21 f004 	lsr.w	r0, r1, r4
  403490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403494:	fa21 f204 	lsr.w	r2, r1, r4
  403498:	ea20 0002 	bic.w	r0, r0, r2
  40349c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4034a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4034a4:	bf08      	it	eq
  4034a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4034aa:	bd70      	pop	{r4, r5, r6, pc}
  4034ac:	f094 0f00 	teq	r4, #0
  4034b0:	d10f      	bne.n	4034d2 <__aeabi_dmul+0x1c2>
  4034b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4034b6:	0040      	lsls	r0, r0, #1
  4034b8:	eb41 0101 	adc.w	r1, r1, r1
  4034bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4034c0:	bf08      	it	eq
  4034c2:	3c01      	subeq	r4, #1
  4034c4:	d0f7      	beq.n	4034b6 <__aeabi_dmul+0x1a6>
  4034c6:	ea41 0106 	orr.w	r1, r1, r6
  4034ca:	f095 0f00 	teq	r5, #0
  4034ce:	bf18      	it	ne
  4034d0:	4770      	bxne	lr
  4034d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4034d6:	0052      	lsls	r2, r2, #1
  4034d8:	eb43 0303 	adc.w	r3, r3, r3
  4034dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4034e0:	bf08      	it	eq
  4034e2:	3d01      	subeq	r5, #1
  4034e4:	d0f7      	beq.n	4034d6 <__aeabi_dmul+0x1c6>
  4034e6:	ea43 0306 	orr.w	r3, r3, r6
  4034ea:	4770      	bx	lr
  4034ec:	ea94 0f0c 	teq	r4, ip
  4034f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4034f4:	bf18      	it	ne
  4034f6:	ea95 0f0c 	teqne	r5, ip
  4034fa:	d00c      	beq.n	403516 <__aeabi_dmul+0x206>
  4034fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403500:	bf18      	it	ne
  403502:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403506:	d1d1      	bne.n	4034ac <__aeabi_dmul+0x19c>
  403508:	ea81 0103 	eor.w	r1, r1, r3
  40350c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403510:	f04f 0000 	mov.w	r0, #0
  403514:	bd70      	pop	{r4, r5, r6, pc}
  403516:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40351a:	bf06      	itte	eq
  40351c:	4610      	moveq	r0, r2
  40351e:	4619      	moveq	r1, r3
  403520:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403524:	d019      	beq.n	40355a <__aeabi_dmul+0x24a>
  403526:	ea94 0f0c 	teq	r4, ip
  40352a:	d102      	bne.n	403532 <__aeabi_dmul+0x222>
  40352c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403530:	d113      	bne.n	40355a <__aeabi_dmul+0x24a>
  403532:	ea95 0f0c 	teq	r5, ip
  403536:	d105      	bne.n	403544 <__aeabi_dmul+0x234>
  403538:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40353c:	bf1c      	itt	ne
  40353e:	4610      	movne	r0, r2
  403540:	4619      	movne	r1, r3
  403542:	d10a      	bne.n	40355a <__aeabi_dmul+0x24a>
  403544:	ea81 0103 	eor.w	r1, r1, r3
  403548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40354c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403554:	f04f 0000 	mov.w	r0, #0
  403558:	bd70      	pop	{r4, r5, r6, pc}
  40355a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40355e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403562:	bd70      	pop	{r4, r5, r6, pc}

00403564 <__aeabi_ddiv>:
  403564:	b570      	push	{r4, r5, r6, lr}
  403566:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40356a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40356e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403572:	bf1d      	ittte	ne
  403574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403578:	ea94 0f0c 	teqne	r4, ip
  40357c:	ea95 0f0c 	teqne	r5, ip
  403580:	f000 f8a7 	bleq	4036d2 <__aeabi_ddiv+0x16e>
  403584:	eba4 0405 	sub.w	r4, r4, r5
  403588:	ea81 0e03 	eor.w	lr, r1, r3
  40358c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403590:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403594:	f000 8088 	beq.w	4036a8 <__aeabi_ddiv+0x144>
  403598:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40359c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4035a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4035a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4035a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4035ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4035b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4035b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4035b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4035bc:	429d      	cmp	r5, r3
  4035be:	bf08      	it	eq
  4035c0:	4296      	cmpeq	r6, r2
  4035c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4035c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4035ca:	d202      	bcs.n	4035d2 <__aeabi_ddiv+0x6e>
  4035cc:	085b      	lsrs	r3, r3, #1
  4035ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4035d2:	1ab6      	subs	r6, r6, r2
  4035d4:	eb65 0503 	sbc.w	r5, r5, r3
  4035d8:	085b      	lsrs	r3, r3, #1
  4035da:	ea4f 0232 	mov.w	r2, r2, rrx
  4035de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4035e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4035e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4035ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4035ee:	bf22      	ittt	cs
  4035f0:	1ab6      	subcs	r6, r6, r2
  4035f2:	4675      	movcs	r5, lr
  4035f4:	ea40 000c 	orrcs.w	r0, r0, ip
  4035f8:	085b      	lsrs	r3, r3, #1
  4035fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4035fe:	ebb6 0e02 	subs.w	lr, r6, r2
  403602:	eb75 0e03 	sbcs.w	lr, r5, r3
  403606:	bf22      	ittt	cs
  403608:	1ab6      	subcs	r6, r6, r2
  40360a:	4675      	movcs	r5, lr
  40360c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403610:	085b      	lsrs	r3, r3, #1
  403612:	ea4f 0232 	mov.w	r2, r2, rrx
  403616:	ebb6 0e02 	subs.w	lr, r6, r2
  40361a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40361e:	bf22      	ittt	cs
  403620:	1ab6      	subcs	r6, r6, r2
  403622:	4675      	movcs	r5, lr
  403624:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403628:	085b      	lsrs	r3, r3, #1
  40362a:	ea4f 0232 	mov.w	r2, r2, rrx
  40362e:	ebb6 0e02 	subs.w	lr, r6, r2
  403632:	eb75 0e03 	sbcs.w	lr, r5, r3
  403636:	bf22      	ittt	cs
  403638:	1ab6      	subcs	r6, r6, r2
  40363a:	4675      	movcs	r5, lr
  40363c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403640:	ea55 0e06 	orrs.w	lr, r5, r6
  403644:	d018      	beq.n	403678 <__aeabi_ddiv+0x114>
  403646:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40364a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40364e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403652:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403656:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40365a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40365e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403662:	d1c0      	bne.n	4035e6 <__aeabi_ddiv+0x82>
  403664:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403668:	d10b      	bne.n	403682 <__aeabi_ddiv+0x11e>
  40366a:	ea41 0100 	orr.w	r1, r1, r0
  40366e:	f04f 0000 	mov.w	r0, #0
  403672:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403676:	e7b6      	b.n	4035e6 <__aeabi_ddiv+0x82>
  403678:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40367c:	bf04      	itt	eq
  40367e:	4301      	orreq	r1, r0
  403680:	2000      	moveq	r0, #0
  403682:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403686:	bf88      	it	hi
  403688:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40368c:	f63f aeaf 	bhi.w	4033ee <__aeabi_dmul+0xde>
  403690:	ebb5 0c03 	subs.w	ip, r5, r3
  403694:	bf04      	itt	eq
  403696:	ebb6 0c02 	subseq.w	ip, r6, r2
  40369a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40369e:	f150 0000 	adcs.w	r0, r0, #0
  4036a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4036a6:	bd70      	pop	{r4, r5, r6, pc}
  4036a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4036ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4036b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4036b4:	bfc2      	ittt	gt
  4036b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4036ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4036be:	bd70      	popgt	{r4, r5, r6, pc}
  4036c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4036c4:	f04f 0e00 	mov.w	lr, #0
  4036c8:	3c01      	subs	r4, #1
  4036ca:	e690      	b.n	4033ee <__aeabi_dmul+0xde>
  4036cc:	ea45 0e06 	orr.w	lr, r5, r6
  4036d0:	e68d      	b.n	4033ee <__aeabi_dmul+0xde>
  4036d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4036d6:	ea94 0f0c 	teq	r4, ip
  4036da:	bf08      	it	eq
  4036dc:	ea95 0f0c 	teqeq	r5, ip
  4036e0:	f43f af3b 	beq.w	40355a <__aeabi_dmul+0x24a>
  4036e4:	ea94 0f0c 	teq	r4, ip
  4036e8:	d10a      	bne.n	403700 <__aeabi_ddiv+0x19c>
  4036ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4036ee:	f47f af34 	bne.w	40355a <__aeabi_dmul+0x24a>
  4036f2:	ea95 0f0c 	teq	r5, ip
  4036f6:	f47f af25 	bne.w	403544 <__aeabi_dmul+0x234>
  4036fa:	4610      	mov	r0, r2
  4036fc:	4619      	mov	r1, r3
  4036fe:	e72c      	b.n	40355a <__aeabi_dmul+0x24a>
  403700:	ea95 0f0c 	teq	r5, ip
  403704:	d106      	bne.n	403714 <__aeabi_ddiv+0x1b0>
  403706:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40370a:	f43f aefd 	beq.w	403508 <__aeabi_dmul+0x1f8>
  40370e:	4610      	mov	r0, r2
  403710:	4619      	mov	r1, r3
  403712:	e722      	b.n	40355a <__aeabi_dmul+0x24a>
  403714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403718:	bf18      	it	ne
  40371a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40371e:	f47f aec5 	bne.w	4034ac <__aeabi_dmul+0x19c>
  403722:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403726:	f47f af0d 	bne.w	403544 <__aeabi_dmul+0x234>
  40372a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40372e:	f47f aeeb 	bne.w	403508 <__aeabi_dmul+0x1f8>
  403732:	e712      	b.n	40355a <__aeabi_dmul+0x24a>

00403734 <__gedf2>:
  403734:	f04f 3cff 	mov.w	ip, #4294967295
  403738:	e006      	b.n	403748 <__cmpdf2+0x4>
  40373a:	bf00      	nop

0040373c <__ledf2>:
  40373c:	f04f 0c01 	mov.w	ip, #1
  403740:	e002      	b.n	403748 <__cmpdf2+0x4>
  403742:	bf00      	nop

00403744 <__cmpdf2>:
  403744:	f04f 0c01 	mov.w	ip, #1
  403748:	f84d cd04 	str.w	ip, [sp, #-4]!
  40374c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403754:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403758:	bf18      	it	ne
  40375a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40375e:	d01b      	beq.n	403798 <__cmpdf2+0x54>
  403760:	b001      	add	sp, #4
  403762:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403766:	bf0c      	ite	eq
  403768:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40376c:	ea91 0f03 	teqne	r1, r3
  403770:	bf02      	ittt	eq
  403772:	ea90 0f02 	teqeq	r0, r2
  403776:	2000      	moveq	r0, #0
  403778:	4770      	bxeq	lr
  40377a:	f110 0f00 	cmn.w	r0, #0
  40377e:	ea91 0f03 	teq	r1, r3
  403782:	bf58      	it	pl
  403784:	4299      	cmppl	r1, r3
  403786:	bf08      	it	eq
  403788:	4290      	cmpeq	r0, r2
  40378a:	bf2c      	ite	cs
  40378c:	17d8      	asrcs	r0, r3, #31
  40378e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403792:	f040 0001 	orr.w	r0, r0, #1
  403796:	4770      	bx	lr
  403798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40379c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4037a0:	d102      	bne.n	4037a8 <__cmpdf2+0x64>
  4037a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4037a6:	d107      	bne.n	4037b8 <__cmpdf2+0x74>
  4037a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4037ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4037b0:	d1d6      	bne.n	403760 <__cmpdf2+0x1c>
  4037b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4037b6:	d0d3      	beq.n	403760 <__cmpdf2+0x1c>
  4037b8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4037bc:	4770      	bx	lr
  4037be:	bf00      	nop

004037c0 <__aeabi_cdrcmple>:
  4037c0:	4684      	mov	ip, r0
  4037c2:	4610      	mov	r0, r2
  4037c4:	4662      	mov	r2, ip
  4037c6:	468c      	mov	ip, r1
  4037c8:	4619      	mov	r1, r3
  4037ca:	4663      	mov	r3, ip
  4037cc:	e000      	b.n	4037d0 <__aeabi_cdcmpeq>
  4037ce:	bf00      	nop

004037d0 <__aeabi_cdcmpeq>:
  4037d0:	b501      	push	{r0, lr}
  4037d2:	f7ff ffb7 	bl	403744 <__cmpdf2>
  4037d6:	2800      	cmp	r0, #0
  4037d8:	bf48      	it	mi
  4037da:	f110 0f00 	cmnmi.w	r0, #0
  4037de:	bd01      	pop	{r0, pc}

004037e0 <__aeabi_dcmpeq>:
  4037e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4037e4:	f7ff fff4 	bl	4037d0 <__aeabi_cdcmpeq>
  4037e8:	bf0c      	ite	eq
  4037ea:	2001      	moveq	r0, #1
  4037ec:	2000      	movne	r0, #0
  4037ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4037f2:	bf00      	nop

004037f4 <__aeabi_dcmplt>:
  4037f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4037f8:	f7ff ffea 	bl	4037d0 <__aeabi_cdcmpeq>
  4037fc:	bf34      	ite	cc
  4037fe:	2001      	movcc	r0, #1
  403800:	2000      	movcs	r0, #0
  403802:	f85d fb08 	ldr.w	pc, [sp], #8
  403806:	bf00      	nop

00403808 <__aeabi_dcmple>:
  403808:	f84d ed08 	str.w	lr, [sp, #-8]!
  40380c:	f7ff ffe0 	bl	4037d0 <__aeabi_cdcmpeq>
  403810:	bf94      	ite	ls
  403812:	2001      	movls	r0, #1
  403814:	2000      	movhi	r0, #0
  403816:	f85d fb08 	ldr.w	pc, [sp], #8
  40381a:	bf00      	nop

0040381c <__aeabi_dcmpge>:
  40381c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403820:	f7ff ffce 	bl	4037c0 <__aeabi_cdrcmple>
  403824:	bf94      	ite	ls
  403826:	2001      	movls	r0, #1
  403828:	2000      	movhi	r0, #0
  40382a:	f85d fb08 	ldr.w	pc, [sp], #8
  40382e:	bf00      	nop

00403830 <__aeabi_dcmpgt>:
  403830:	f84d ed08 	str.w	lr, [sp, #-8]!
  403834:	f7ff ffc4 	bl	4037c0 <__aeabi_cdrcmple>
  403838:	bf34      	ite	cc
  40383a:	2001      	movcc	r0, #1
  40383c:	2000      	movcs	r0, #0
  40383e:	f85d fb08 	ldr.w	pc, [sp], #8
  403842:	bf00      	nop

00403844 <__aeabi_d2iz>:
  403844:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403848:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40384c:	d215      	bcs.n	40387a <__aeabi_d2iz+0x36>
  40384e:	d511      	bpl.n	403874 <__aeabi_d2iz+0x30>
  403850:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403854:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403858:	d912      	bls.n	403880 <__aeabi_d2iz+0x3c>
  40385a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40385e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403862:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403866:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40386a:	fa23 f002 	lsr.w	r0, r3, r2
  40386e:	bf18      	it	ne
  403870:	4240      	negne	r0, r0
  403872:	4770      	bx	lr
  403874:	f04f 0000 	mov.w	r0, #0
  403878:	4770      	bx	lr
  40387a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40387e:	d105      	bne.n	40388c <__aeabi_d2iz+0x48>
  403880:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403884:	bf08      	it	eq
  403886:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40388a:	4770      	bx	lr
  40388c:	f04f 0000 	mov.w	r0, #0
  403890:	4770      	bx	lr
  403892:	bf00      	nop

00403894 <__aeabi_d2uiz>:
  403894:	004a      	lsls	r2, r1, #1
  403896:	d211      	bcs.n	4038bc <__aeabi_d2uiz+0x28>
  403898:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40389c:	d211      	bcs.n	4038c2 <__aeabi_d2uiz+0x2e>
  40389e:	d50d      	bpl.n	4038bc <__aeabi_d2uiz+0x28>
  4038a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4038a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4038a8:	d40e      	bmi.n	4038c8 <__aeabi_d2uiz+0x34>
  4038aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4038ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4038b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4038b6:	fa23 f002 	lsr.w	r0, r3, r2
  4038ba:	4770      	bx	lr
  4038bc:	f04f 0000 	mov.w	r0, #0
  4038c0:	4770      	bx	lr
  4038c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4038c6:	d102      	bne.n	4038ce <__aeabi_d2uiz+0x3a>
  4038c8:	f04f 30ff 	mov.w	r0, #4294967295
  4038cc:	4770      	bx	lr
  4038ce:	f04f 0000 	mov.w	r0, #0
  4038d2:	4770      	bx	lr

004038d4 <__aeabi_uldivmod>:
  4038d4:	b94b      	cbnz	r3, 4038ea <__aeabi_uldivmod+0x16>
  4038d6:	b942      	cbnz	r2, 4038ea <__aeabi_uldivmod+0x16>
  4038d8:	2900      	cmp	r1, #0
  4038da:	bf08      	it	eq
  4038dc:	2800      	cmpeq	r0, #0
  4038de:	d002      	beq.n	4038e6 <__aeabi_uldivmod+0x12>
  4038e0:	f04f 31ff 	mov.w	r1, #4294967295
  4038e4:	4608      	mov	r0, r1
  4038e6:	f000 b83b 	b.w	403960 <__aeabi_idiv0>
  4038ea:	b082      	sub	sp, #8
  4038ec:	46ec      	mov	ip, sp
  4038ee:	e92d 5000 	stmdb	sp!, {ip, lr}
  4038f2:	f000 f81d 	bl	403930 <__gnu_uldivmod_helper>
  4038f6:	f8dd e004 	ldr.w	lr, [sp, #4]
  4038fa:	b002      	add	sp, #8
  4038fc:	bc0c      	pop	{r2, r3}
  4038fe:	4770      	bx	lr

00403900 <__gnu_ldivmod_helper>:
  403900:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  403904:	9e06      	ldr	r6, [sp, #24]
  403906:	4614      	mov	r4, r2
  403908:	461d      	mov	r5, r3
  40390a:	4680      	mov	r8, r0
  40390c:	4689      	mov	r9, r1
  40390e:	f000 f829 	bl	403964 <__divdi3>
  403912:	fb04 f301 	mul.w	r3, r4, r1
  403916:	fb00 3305 	mla	r3, r0, r5, r3
  40391a:	fba4 4500 	umull	r4, r5, r4, r0
  40391e:	441d      	add	r5, r3
  403920:	ebb8 0404 	subs.w	r4, r8, r4
  403924:	eb69 0505 	sbc.w	r5, r9, r5
  403928:	e9c6 4500 	strd	r4, r5, [r6]
  40392c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00403930 <__gnu_uldivmod_helper>:
  403930:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  403934:	9e06      	ldr	r6, [sp, #24]
  403936:	4614      	mov	r4, r2
  403938:	4680      	mov	r8, r0
  40393a:	4689      	mov	r9, r1
  40393c:	461d      	mov	r5, r3
  40393e:	f000 f95d 	bl	403bfc <__udivdi3>
  403942:	fb00 f505 	mul.w	r5, r0, r5
  403946:	fb04 5301 	mla	r3, r4, r1, r5
  40394a:	fba0 4504 	umull	r4, r5, r0, r4
  40394e:	441d      	add	r5, r3
  403950:	ebb8 0404 	subs.w	r4, r8, r4
  403954:	eb69 0505 	sbc.w	r5, r9, r5
  403958:	e9c6 4500 	strd	r4, r5, [r6]
  40395c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00403960 <__aeabi_idiv0>:
  403960:	4770      	bx	lr
  403962:	bf00      	nop

00403964 <__divdi3>:
  403964:	2900      	cmp	r1, #0
  403966:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40396a:	f2c0 809f 	blt.w	403aac <__divdi3+0x148>
  40396e:	2400      	movs	r4, #0
  403970:	2b00      	cmp	r3, #0
  403972:	f2c0 8096 	blt.w	403aa2 <__divdi3+0x13e>
  403976:	4615      	mov	r5, r2
  403978:	4606      	mov	r6, r0
  40397a:	460f      	mov	r7, r1
  40397c:	2b00      	cmp	r3, #0
  40397e:	d13e      	bne.n	4039fe <__divdi3+0x9a>
  403980:	428a      	cmp	r2, r1
  403982:	d957      	bls.n	403a34 <__divdi3+0xd0>
  403984:	fab2 f382 	clz	r3, r2
  403988:	b14b      	cbz	r3, 40399e <__divdi3+0x3a>
  40398a:	f1c3 0220 	rsb	r2, r3, #32
  40398e:	fa01 f703 	lsl.w	r7, r1, r3
  403992:	fa20 f202 	lsr.w	r2, r0, r2
  403996:	409d      	lsls	r5, r3
  403998:	4317      	orrs	r7, r2
  40399a:	fa00 f603 	lsl.w	r6, r0, r3
  40399e:	0c29      	lsrs	r1, r5, #16
  4039a0:	fbb7 f2f1 	udiv	r2, r7, r1
  4039a4:	0c33      	lsrs	r3, r6, #16
  4039a6:	fb01 7c12 	mls	ip, r1, r2, r7
  4039aa:	b2a8      	uxth	r0, r5
  4039ac:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  4039b0:	fb00 f302 	mul.w	r3, r0, r2
  4039b4:	42bb      	cmp	r3, r7
  4039b6:	d909      	bls.n	4039cc <__divdi3+0x68>
  4039b8:	197f      	adds	r7, r7, r5
  4039ba:	f102 3cff 	add.w	ip, r2, #4294967295
  4039be:	f080 8101 	bcs.w	403bc4 <__divdi3+0x260>
  4039c2:	42bb      	cmp	r3, r7
  4039c4:	f240 80fe 	bls.w	403bc4 <__divdi3+0x260>
  4039c8:	3a02      	subs	r2, #2
  4039ca:	442f      	add	r7, r5
  4039cc:	1aff      	subs	r7, r7, r3
  4039ce:	fbb7 f3f1 	udiv	r3, r7, r1
  4039d2:	b2b6      	uxth	r6, r6
  4039d4:	fb01 7113 	mls	r1, r1, r3, r7
  4039d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  4039dc:	fb00 f003 	mul.w	r0, r0, r3
  4039e0:	4288      	cmp	r0, r1
  4039e2:	d908      	bls.n	4039f6 <__divdi3+0x92>
  4039e4:	1949      	adds	r1, r1, r5
  4039e6:	f103 37ff 	add.w	r7, r3, #4294967295
  4039ea:	f080 80ed 	bcs.w	403bc8 <__divdi3+0x264>
  4039ee:	4288      	cmp	r0, r1
  4039f0:	f240 80ea 	bls.w	403bc8 <__divdi3+0x264>
  4039f4:	3b02      	subs	r3, #2
  4039f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4039fa:	2300      	movs	r3, #0
  4039fc:	e003      	b.n	403a06 <__divdi3+0xa2>
  4039fe:	428b      	cmp	r3, r1
  403a00:	d90a      	bls.n	403a18 <__divdi3+0xb4>
  403a02:	2300      	movs	r3, #0
  403a04:	461a      	mov	r2, r3
  403a06:	4610      	mov	r0, r2
  403a08:	4619      	mov	r1, r3
  403a0a:	b114      	cbz	r4, 403a12 <__divdi3+0xae>
  403a0c:	4240      	negs	r0, r0
  403a0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403a12:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403a16:	4770      	bx	lr
  403a18:	fab3 f883 	clz	r8, r3
  403a1c:	f1b8 0f00 	cmp.w	r8, #0
  403a20:	f040 8084 	bne.w	403b2c <__divdi3+0x1c8>
  403a24:	428b      	cmp	r3, r1
  403a26:	d302      	bcc.n	403a2e <__divdi3+0xca>
  403a28:	4282      	cmp	r2, r0
  403a2a:	f200 80de 	bhi.w	403bea <__divdi3+0x286>
  403a2e:	2300      	movs	r3, #0
  403a30:	2201      	movs	r2, #1
  403a32:	e7e8      	b.n	403a06 <__divdi3+0xa2>
  403a34:	b912      	cbnz	r2, 403a3c <__divdi3+0xd8>
  403a36:	2301      	movs	r3, #1
  403a38:	fbb3 f5f2 	udiv	r5, r3, r2
  403a3c:	fab5 f285 	clz	r2, r5
  403a40:	2a00      	cmp	r2, #0
  403a42:	d139      	bne.n	403ab8 <__divdi3+0x154>
  403a44:	1b7f      	subs	r7, r7, r5
  403a46:	0c28      	lsrs	r0, r5, #16
  403a48:	fa1f fc85 	uxth.w	ip, r5
  403a4c:	2301      	movs	r3, #1
  403a4e:	fbb7 f1f0 	udiv	r1, r7, r0
  403a52:	0c32      	lsrs	r2, r6, #16
  403a54:	fb00 7711 	mls	r7, r0, r1, r7
  403a58:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  403a5c:	fb0c f201 	mul.w	r2, ip, r1
  403a60:	42ba      	cmp	r2, r7
  403a62:	d907      	bls.n	403a74 <__divdi3+0x110>
  403a64:	197f      	adds	r7, r7, r5
  403a66:	f101 38ff 	add.w	r8, r1, #4294967295
  403a6a:	d202      	bcs.n	403a72 <__divdi3+0x10e>
  403a6c:	42ba      	cmp	r2, r7
  403a6e:	f200 80c1 	bhi.w	403bf4 <__divdi3+0x290>
  403a72:	4641      	mov	r1, r8
  403a74:	1abf      	subs	r7, r7, r2
  403a76:	fbb7 f2f0 	udiv	r2, r7, r0
  403a7a:	b2b6      	uxth	r6, r6
  403a7c:	fb00 7012 	mls	r0, r0, r2, r7
  403a80:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  403a84:	fb0c fc02 	mul.w	ip, ip, r2
  403a88:	4584      	cmp	ip, r0
  403a8a:	d907      	bls.n	403a9c <__divdi3+0x138>
  403a8c:	1940      	adds	r0, r0, r5
  403a8e:	f102 37ff 	add.w	r7, r2, #4294967295
  403a92:	d202      	bcs.n	403a9a <__divdi3+0x136>
  403a94:	4584      	cmp	ip, r0
  403a96:	f200 80ab 	bhi.w	403bf0 <__divdi3+0x28c>
  403a9a:	463a      	mov	r2, r7
  403a9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  403aa0:	e7b1      	b.n	403a06 <__divdi3+0xa2>
  403aa2:	43e4      	mvns	r4, r4
  403aa4:	4252      	negs	r2, r2
  403aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403aaa:	e764      	b.n	403976 <__divdi3+0x12>
  403aac:	4240      	negs	r0, r0
  403aae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403ab2:	f04f 34ff 	mov.w	r4, #4294967295
  403ab6:	e75b      	b.n	403970 <__divdi3+0xc>
  403ab8:	4095      	lsls	r5, r2
  403aba:	f1c2 0320 	rsb	r3, r2, #32
  403abe:	fa27 f103 	lsr.w	r1, r7, r3
  403ac2:	0c28      	lsrs	r0, r5, #16
  403ac4:	fa26 f303 	lsr.w	r3, r6, r3
  403ac8:	4097      	lsls	r7, r2
  403aca:	fbb1 f8f0 	udiv	r8, r1, r0
  403ace:	431f      	orrs	r7, r3
  403ad0:	0c3b      	lsrs	r3, r7, #16
  403ad2:	fb00 1118 	mls	r1, r0, r8, r1
  403ad6:	fa1f fc85 	uxth.w	ip, r5
  403ada:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403ade:	fb0c f308 	mul.w	r3, ip, r8
  403ae2:	428b      	cmp	r3, r1
  403ae4:	fa06 f602 	lsl.w	r6, r6, r2
  403ae8:	d908      	bls.n	403afc <__divdi3+0x198>
  403aea:	1949      	adds	r1, r1, r5
  403aec:	f108 32ff 	add.w	r2, r8, #4294967295
  403af0:	d279      	bcs.n	403be6 <__divdi3+0x282>
  403af2:	428b      	cmp	r3, r1
  403af4:	d977      	bls.n	403be6 <__divdi3+0x282>
  403af6:	f1a8 0802 	sub.w	r8, r8, #2
  403afa:	4429      	add	r1, r5
  403afc:	1ac9      	subs	r1, r1, r3
  403afe:	fbb1 f3f0 	udiv	r3, r1, r0
  403b02:	b2bf      	uxth	r7, r7
  403b04:	fb00 1113 	mls	r1, r0, r3, r1
  403b08:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  403b0c:	fb0c f203 	mul.w	r2, ip, r3
  403b10:	42ba      	cmp	r2, r7
  403b12:	d907      	bls.n	403b24 <__divdi3+0x1c0>
  403b14:	197f      	adds	r7, r7, r5
  403b16:	f103 31ff 	add.w	r1, r3, #4294967295
  403b1a:	d260      	bcs.n	403bde <__divdi3+0x27a>
  403b1c:	42ba      	cmp	r2, r7
  403b1e:	d95e      	bls.n	403bde <__divdi3+0x27a>
  403b20:	3b02      	subs	r3, #2
  403b22:	442f      	add	r7, r5
  403b24:	1abf      	subs	r7, r7, r2
  403b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403b2a:	e790      	b.n	403a4e <__divdi3+0xea>
  403b2c:	f1c8 0220 	rsb	r2, r8, #32
  403b30:	fa03 fc08 	lsl.w	ip, r3, r8
  403b34:	fa25 f302 	lsr.w	r3, r5, r2
  403b38:	ea43 0c0c 	orr.w	ip, r3, ip
  403b3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
  403b40:	fa21 f302 	lsr.w	r3, r1, r2
  403b44:	fa01 f708 	lsl.w	r7, r1, r8
  403b48:	fa20 f202 	lsr.w	r2, r0, r2
  403b4c:	fbb3 f1f9 	udiv	r1, r3, r9
  403b50:	4317      	orrs	r7, r2
  403b52:	fb09 3311 	mls	r3, r9, r1, r3
  403b56:	0c3a      	lsrs	r2, r7, #16
  403b58:	fa1f fb8c 	uxth.w	fp, ip
  403b5c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  403b60:	fb0b fa01 	mul.w	sl, fp, r1
  403b64:	459a      	cmp	sl, r3
  403b66:	fa05 f008 	lsl.w	r0, r5, r8
  403b6a:	d908      	bls.n	403b7e <__divdi3+0x21a>
  403b6c:	eb13 030c 	adds.w	r3, r3, ip
  403b70:	f101 32ff 	add.w	r2, r1, #4294967295
  403b74:	d235      	bcs.n	403be2 <__divdi3+0x27e>
  403b76:	459a      	cmp	sl, r3
  403b78:	d933      	bls.n	403be2 <__divdi3+0x27e>
  403b7a:	3902      	subs	r1, #2
  403b7c:	4463      	add	r3, ip
  403b7e:	ebca 0303 	rsb	r3, sl, r3
  403b82:	fbb3 f2f9 	udiv	r2, r3, r9
  403b86:	fb09 3312 	mls	r3, r9, r2, r3
  403b8a:	b2bf      	uxth	r7, r7
  403b8c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  403b90:	fb0b f902 	mul.w	r9, fp, r2
  403b94:	45b9      	cmp	r9, r7
  403b96:	d908      	bls.n	403baa <__divdi3+0x246>
  403b98:	eb17 070c 	adds.w	r7, r7, ip
  403b9c:	f102 33ff 	add.w	r3, r2, #4294967295
  403ba0:	d21b      	bcs.n	403bda <__divdi3+0x276>
  403ba2:	45b9      	cmp	r9, r7
  403ba4:	d919      	bls.n	403bda <__divdi3+0x276>
  403ba6:	3a02      	subs	r2, #2
  403ba8:	4467      	add	r7, ip
  403baa:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  403bae:	fba5 0100 	umull	r0, r1, r5, r0
  403bb2:	ebc9 0707 	rsb	r7, r9, r7
  403bb6:	428f      	cmp	r7, r1
  403bb8:	f04f 0300 	mov.w	r3, #0
  403bbc:	d30a      	bcc.n	403bd4 <__divdi3+0x270>
  403bbe:	d005      	beq.n	403bcc <__divdi3+0x268>
  403bc0:	462a      	mov	r2, r5
  403bc2:	e720      	b.n	403a06 <__divdi3+0xa2>
  403bc4:	4662      	mov	r2, ip
  403bc6:	e701      	b.n	4039cc <__divdi3+0x68>
  403bc8:	463b      	mov	r3, r7
  403bca:	e714      	b.n	4039f6 <__divdi3+0x92>
  403bcc:	fa06 f608 	lsl.w	r6, r6, r8
  403bd0:	4286      	cmp	r6, r0
  403bd2:	d2f5      	bcs.n	403bc0 <__divdi3+0x25c>
  403bd4:	1e6a      	subs	r2, r5, #1
  403bd6:	2300      	movs	r3, #0
  403bd8:	e715      	b.n	403a06 <__divdi3+0xa2>
  403bda:	461a      	mov	r2, r3
  403bdc:	e7e5      	b.n	403baa <__divdi3+0x246>
  403bde:	460b      	mov	r3, r1
  403be0:	e7a0      	b.n	403b24 <__divdi3+0x1c0>
  403be2:	4611      	mov	r1, r2
  403be4:	e7cb      	b.n	403b7e <__divdi3+0x21a>
  403be6:	4690      	mov	r8, r2
  403be8:	e788      	b.n	403afc <__divdi3+0x198>
  403bea:	4643      	mov	r3, r8
  403bec:	4642      	mov	r2, r8
  403bee:	e70a      	b.n	403a06 <__divdi3+0xa2>
  403bf0:	3a02      	subs	r2, #2
  403bf2:	e753      	b.n	403a9c <__divdi3+0x138>
  403bf4:	3902      	subs	r1, #2
  403bf6:	442f      	add	r7, r5
  403bf8:	e73c      	b.n	403a74 <__divdi3+0x110>
  403bfa:	bf00      	nop

00403bfc <__udivdi3>:
  403bfc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403c00:	4614      	mov	r4, r2
  403c02:	4605      	mov	r5, r0
  403c04:	460e      	mov	r6, r1
  403c06:	2b00      	cmp	r3, #0
  403c08:	d143      	bne.n	403c92 <__udivdi3+0x96>
  403c0a:	428a      	cmp	r2, r1
  403c0c:	d953      	bls.n	403cb6 <__udivdi3+0xba>
  403c0e:	fab2 f782 	clz	r7, r2
  403c12:	b157      	cbz	r7, 403c2a <__udivdi3+0x2e>
  403c14:	f1c7 0620 	rsb	r6, r7, #32
  403c18:	fa20 f606 	lsr.w	r6, r0, r6
  403c1c:	fa01 f307 	lsl.w	r3, r1, r7
  403c20:	fa02 f407 	lsl.w	r4, r2, r7
  403c24:	431e      	orrs	r6, r3
  403c26:	fa00 f507 	lsl.w	r5, r0, r7
  403c2a:	0c21      	lsrs	r1, r4, #16
  403c2c:	fbb6 f2f1 	udiv	r2, r6, r1
  403c30:	0c2b      	lsrs	r3, r5, #16
  403c32:	fb01 6712 	mls	r7, r1, r2, r6
  403c36:	b2a0      	uxth	r0, r4
  403c38:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  403c3c:	fb00 f302 	mul.w	r3, r0, r2
  403c40:	42b3      	cmp	r3, r6
  403c42:	d909      	bls.n	403c58 <__udivdi3+0x5c>
  403c44:	1936      	adds	r6, r6, r4
  403c46:	f102 37ff 	add.w	r7, r2, #4294967295
  403c4a:	f080 80f6 	bcs.w	403e3a <__udivdi3+0x23e>
  403c4e:	42b3      	cmp	r3, r6
  403c50:	f240 80f3 	bls.w	403e3a <__udivdi3+0x23e>
  403c54:	3a02      	subs	r2, #2
  403c56:	4426      	add	r6, r4
  403c58:	1af6      	subs	r6, r6, r3
  403c5a:	fbb6 f3f1 	udiv	r3, r6, r1
  403c5e:	b2ad      	uxth	r5, r5
  403c60:	fb01 6113 	mls	r1, r1, r3, r6
  403c64:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  403c68:	fb00 f003 	mul.w	r0, r0, r3
  403c6c:	4288      	cmp	r0, r1
  403c6e:	d908      	bls.n	403c82 <__udivdi3+0x86>
  403c70:	1909      	adds	r1, r1, r4
  403c72:	f103 36ff 	add.w	r6, r3, #4294967295
  403c76:	f080 80e2 	bcs.w	403e3e <__udivdi3+0x242>
  403c7a:	4288      	cmp	r0, r1
  403c7c:	f240 80df 	bls.w	403e3e <__udivdi3+0x242>
  403c80:	3b02      	subs	r3, #2
  403c82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  403c86:	2300      	movs	r3, #0
  403c88:	4610      	mov	r0, r2
  403c8a:	4619      	mov	r1, r3
  403c8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403c90:	4770      	bx	lr
  403c92:	428b      	cmp	r3, r1
  403c94:	d84a      	bhi.n	403d2c <__udivdi3+0x130>
  403c96:	fab3 f683 	clz	r6, r3
  403c9a:	2e00      	cmp	r6, #0
  403c9c:	d14d      	bne.n	403d3a <__udivdi3+0x13e>
  403c9e:	428b      	cmp	r3, r1
  403ca0:	d302      	bcc.n	403ca8 <__udivdi3+0xac>
  403ca2:	4282      	cmp	r2, r0
  403ca4:	f200 80d6 	bhi.w	403e54 <__udivdi3+0x258>
  403ca8:	2300      	movs	r3, #0
  403caa:	2201      	movs	r2, #1
  403cac:	4610      	mov	r0, r2
  403cae:	4619      	mov	r1, r3
  403cb0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403cb4:	4770      	bx	lr
  403cb6:	b912      	cbnz	r2, 403cbe <__udivdi3+0xc2>
  403cb8:	2401      	movs	r4, #1
  403cba:	fbb4 f4f2 	udiv	r4, r4, r2
  403cbe:	fab4 f284 	clz	r2, r4
  403cc2:	2a00      	cmp	r2, #0
  403cc4:	d17c      	bne.n	403dc0 <__udivdi3+0x1c4>
  403cc6:	1b09      	subs	r1, r1, r4
  403cc8:	0c26      	lsrs	r6, r4, #16
  403cca:	b2a7      	uxth	r7, r4
  403ccc:	2301      	movs	r3, #1
  403cce:	fbb1 f0f6 	udiv	r0, r1, r6
  403cd2:	0c2a      	lsrs	r2, r5, #16
  403cd4:	fb06 1110 	mls	r1, r6, r0, r1
  403cd8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  403cdc:	fb07 f200 	mul.w	r2, r7, r0
  403ce0:	428a      	cmp	r2, r1
  403ce2:	d907      	bls.n	403cf4 <__udivdi3+0xf8>
  403ce4:	1909      	adds	r1, r1, r4
  403ce6:	f100 3cff 	add.w	ip, r0, #4294967295
  403cea:	d202      	bcs.n	403cf2 <__udivdi3+0xf6>
  403cec:	428a      	cmp	r2, r1
  403cee:	f200 80c3 	bhi.w	403e78 <__udivdi3+0x27c>
  403cf2:	4660      	mov	r0, ip
  403cf4:	1a89      	subs	r1, r1, r2
  403cf6:	fbb1 f2f6 	udiv	r2, r1, r6
  403cfa:	b2ad      	uxth	r5, r5
  403cfc:	fb06 1112 	mls	r1, r6, r2, r1
  403d00:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  403d04:	fb07 f702 	mul.w	r7, r7, r2
  403d08:	42af      	cmp	r7, r5
  403d0a:	d908      	bls.n	403d1e <__udivdi3+0x122>
  403d0c:	192c      	adds	r4, r5, r4
  403d0e:	f102 31ff 	add.w	r1, r2, #4294967295
  403d12:	f080 8096 	bcs.w	403e42 <__udivdi3+0x246>
  403d16:	42a7      	cmp	r7, r4
  403d18:	f240 8093 	bls.w	403e42 <__udivdi3+0x246>
  403d1c:	3a02      	subs	r2, #2
  403d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  403d22:	4610      	mov	r0, r2
  403d24:	4619      	mov	r1, r3
  403d26:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403d2a:	4770      	bx	lr
  403d2c:	2300      	movs	r3, #0
  403d2e:	461a      	mov	r2, r3
  403d30:	4610      	mov	r0, r2
  403d32:	4619      	mov	r1, r3
  403d34:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403d38:	4770      	bx	lr
  403d3a:	f1c6 0520 	rsb	r5, r6, #32
  403d3e:	fa22 f405 	lsr.w	r4, r2, r5
  403d42:	40b3      	lsls	r3, r6
  403d44:	431c      	orrs	r4, r3
  403d46:	ea4f 4814 	mov.w	r8, r4, lsr #16
  403d4a:	fa21 f305 	lsr.w	r3, r1, r5
  403d4e:	fa01 f706 	lsl.w	r7, r1, r6
  403d52:	fa20 f505 	lsr.w	r5, r0, r5
  403d56:	fbb3 fcf8 	udiv	ip, r3, r8
  403d5a:	432f      	orrs	r7, r5
  403d5c:	fb08 331c 	mls	r3, r8, ip, r3
  403d60:	0c3d      	lsrs	r5, r7, #16
  403d62:	fa1f fa84 	uxth.w	sl, r4
  403d66:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  403d6a:	fb0a f90c 	mul.w	r9, sl, ip
  403d6e:	4599      	cmp	r9, r3
  403d70:	fa02 fb06 	lsl.w	fp, r2, r6
  403d74:	d904      	bls.n	403d80 <__udivdi3+0x184>
  403d76:	191b      	adds	r3, r3, r4
  403d78:	f10c 32ff 	add.w	r2, ip, #4294967295
  403d7c:	d36d      	bcc.n	403e5a <__udivdi3+0x25e>
  403d7e:	4694      	mov	ip, r2
  403d80:	ebc9 0303 	rsb	r3, r9, r3
  403d84:	fbb3 f5f8 	udiv	r5, r3, r8
  403d88:	fb08 3315 	mls	r3, r8, r5, r3
  403d8c:	b2bf      	uxth	r7, r7
  403d8e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  403d92:	fb0a f805 	mul.w	r8, sl, r5
  403d96:	45b8      	cmp	r8, r7
  403d98:	d904      	bls.n	403da4 <__udivdi3+0x1a8>
  403d9a:	193f      	adds	r7, r7, r4
  403d9c:	f105 33ff 	add.w	r3, r5, #4294967295
  403da0:	d361      	bcc.n	403e66 <__udivdi3+0x26a>
  403da2:	461d      	mov	r5, r3
  403da4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  403da8:	fbac 230b 	umull	r2, r3, ip, fp
  403dac:	ebc8 0707 	rsb	r7, r8, r7
  403db0:	429f      	cmp	r7, r3
  403db2:	f04f 0500 	mov.w	r5, #0
  403db6:	d349      	bcc.n	403e4c <__udivdi3+0x250>
  403db8:	d045      	beq.n	403e46 <__udivdi3+0x24a>
  403dba:	4662      	mov	r2, ip
  403dbc:	462b      	mov	r3, r5
  403dbe:	e763      	b.n	403c88 <__udivdi3+0x8c>
  403dc0:	4094      	lsls	r4, r2
  403dc2:	f1c2 0320 	rsb	r3, r2, #32
  403dc6:	fa21 fc03 	lsr.w	ip, r1, r3
  403dca:	0c26      	lsrs	r6, r4, #16
  403dcc:	fa20 f303 	lsr.w	r3, r0, r3
  403dd0:	fa01 f502 	lsl.w	r5, r1, r2
  403dd4:	fbbc f8f6 	udiv	r8, ip, r6
  403dd8:	ea43 0105 	orr.w	r1, r3, r5
  403ddc:	0c0b      	lsrs	r3, r1, #16
  403dde:	fb06 cc18 	mls	ip, r6, r8, ip
  403de2:	b2a7      	uxth	r7, r4
  403de4:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  403de8:	fb07 f308 	mul.w	r3, r7, r8
  403dec:	4563      	cmp	r3, ip
  403dee:	fa00 f502 	lsl.w	r5, r0, r2
  403df2:	d909      	bls.n	403e08 <__udivdi3+0x20c>
  403df4:	eb1c 0c04 	adds.w	ip, ip, r4
  403df8:	f108 32ff 	add.w	r2, r8, #4294967295
  403dfc:	d23a      	bcs.n	403e74 <__udivdi3+0x278>
  403dfe:	4563      	cmp	r3, ip
  403e00:	d938      	bls.n	403e74 <__udivdi3+0x278>
  403e02:	f1a8 0802 	sub.w	r8, r8, #2
  403e06:	44a4      	add	ip, r4
  403e08:	ebc3 0c0c 	rsb	ip, r3, ip
  403e0c:	fbbc f3f6 	udiv	r3, ip, r6
  403e10:	b289      	uxth	r1, r1
  403e12:	fb06 cc13 	mls	ip, r6, r3, ip
  403e16:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  403e1a:	fb07 f203 	mul.w	r2, r7, r3
  403e1e:	428a      	cmp	r2, r1
  403e20:	d907      	bls.n	403e32 <__udivdi3+0x236>
  403e22:	1909      	adds	r1, r1, r4
  403e24:	f103 30ff 	add.w	r0, r3, #4294967295
  403e28:	d222      	bcs.n	403e70 <__udivdi3+0x274>
  403e2a:	428a      	cmp	r2, r1
  403e2c:	d920      	bls.n	403e70 <__udivdi3+0x274>
  403e2e:	3b02      	subs	r3, #2
  403e30:	4421      	add	r1, r4
  403e32:	1a89      	subs	r1, r1, r2
  403e34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403e38:	e749      	b.n	403cce <__udivdi3+0xd2>
  403e3a:	463a      	mov	r2, r7
  403e3c:	e70c      	b.n	403c58 <__udivdi3+0x5c>
  403e3e:	4633      	mov	r3, r6
  403e40:	e71f      	b.n	403c82 <__udivdi3+0x86>
  403e42:	460a      	mov	r2, r1
  403e44:	e76b      	b.n	403d1e <__udivdi3+0x122>
  403e46:	40b0      	lsls	r0, r6
  403e48:	4290      	cmp	r0, r2
  403e4a:	d2b6      	bcs.n	403dba <__udivdi3+0x1be>
  403e4c:	f10c 32ff 	add.w	r2, ip, #4294967295
  403e50:	2300      	movs	r3, #0
  403e52:	e719      	b.n	403c88 <__udivdi3+0x8c>
  403e54:	4633      	mov	r3, r6
  403e56:	4632      	mov	r2, r6
  403e58:	e716      	b.n	403c88 <__udivdi3+0x8c>
  403e5a:	4599      	cmp	r9, r3
  403e5c:	d98f      	bls.n	403d7e <__udivdi3+0x182>
  403e5e:	f1ac 0c02 	sub.w	ip, ip, #2
  403e62:	4423      	add	r3, r4
  403e64:	e78c      	b.n	403d80 <__udivdi3+0x184>
  403e66:	45b8      	cmp	r8, r7
  403e68:	d99b      	bls.n	403da2 <__udivdi3+0x1a6>
  403e6a:	3d02      	subs	r5, #2
  403e6c:	4427      	add	r7, r4
  403e6e:	e799      	b.n	403da4 <__udivdi3+0x1a8>
  403e70:	4603      	mov	r3, r0
  403e72:	e7de      	b.n	403e32 <__udivdi3+0x236>
  403e74:	4690      	mov	r8, r2
  403e76:	e7c7      	b.n	403e08 <__udivdi3+0x20c>
  403e78:	3802      	subs	r0, #2
  403e7a:	4421      	add	r1, r4
  403e7c:	e73a      	b.n	403cf4 <__udivdi3+0xf8>
  403e7e:	bf00      	nop

00403e80 <__libc_init_array>:
  403e80:	b570      	push	{r4, r5, r6, lr}
  403e82:	4b0e      	ldr	r3, [pc, #56]	; (403ebc <__libc_init_array+0x3c>)
  403e84:	4d0e      	ldr	r5, [pc, #56]	; (403ec0 <__libc_init_array+0x40>)
  403e86:	1aed      	subs	r5, r5, r3
  403e88:	10ad      	asrs	r5, r5, #2
  403e8a:	2400      	movs	r4, #0
  403e8c:	461e      	mov	r6, r3
  403e8e:	42ac      	cmp	r4, r5
  403e90:	d004      	beq.n	403e9c <__libc_init_array+0x1c>
  403e92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403e96:	4790      	blx	r2
  403e98:	3401      	adds	r4, #1
  403e9a:	e7f8      	b.n	403e8e <__libc_init_array+0xe>
  403e9c:	f000 f984 	bl	4041a8 <_init>
  403ea0:	4d08      	ldr	r5, [pc, #32]	; (403ec4 <__libc_init_array+0x44>)
  403ea2:	4b09      	ldr	r3, [pc, #36]	; (403ec8 <__libc_init_array+0x48>)
  403ea4:	1aed      	subs	r5, r5, r3
  403ea6:	10ad      	asrs	r5, r5, #2
  403ea8:	2400      	movs	r4, #0
  403eaa:	461e      	mov	r6, r3
  403eac:	42ac      	cmp	r4, r5
  403eae:	d004      	beq.n	403eba <__libc_init_array+0x3a>
  403eb0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403eb4:	4790      	blx	r2
  403eb6:	3401      	adds	r4, #1
  403eb8:	e7f8      	b.n	403eac <__libc_init_array+0x2c>
  403eba:	bd70      	pop	{r4, r5, r6, pc}
  403ebc:	004041b4 	.word	0x004041b4
  403ec0:	004041b4 	.word	0x004041b4
  403ec4:	004041bc 	.word	0x004041bc
  403ec8:	004041b4 	.word	0x004041b4

00403ecc <register_fini>:
  403ecc:	4b02      	ldr	r3, [pc, #8]	; (403ed8 <register_fini+0xc>)
  403ece:	b113      	cbz	r3, 403ed6 <register_fini+0xa>
  403ed0:	4802      	ldr	r0, [pc, #8]	; (403edc <register_fini+0x10>)
  403ed2:	f000 b805 	b.w	403ee0 <atexit>
  403ed6:	4770      	bx	lr
  403ed8:	00000000 	.word	0x00000000
  403edc:	00403eed 	.word	0x00403eed

00403ee0 <atexit>:
  403ee0:	4601      	mov	r1, r0
  403ee2:	2000      	movs	r0, #0
  403ee4:	4602      	mov	r2, r0
  403ee6:	4603      	mov	r3, r0
  403ee8:	f000 b816 	b.w	403f18 <__register_exitproc>

00403eec <__libc_fini_array>:
  403eec:	b538      	push	{r3, r4, r5, lr}
  403eee:	4d08      	ldr	r5, [pc, #32]	; (403f10 <__libc_fini_array+0x24>)
  403ef0:	4c08      	ldr	r4, [pc, #32]	; (403f14 <__libc_fini_array+0x28>)
  403ef2:	1b64      	subs	r4, r4, r5
  403ef4:	10a4      	asrs	r4, r4, #2
  403ef6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  403efa:	b124      	cbz	r4, 403f06 <__libc_fini_array+0x1a>
  403efc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403f00:	3c01      	subs	r4, #1
  403f02:	4798      	blx	r3
  403f04:	e7f9      	b.n	403efa <__libc_fini_array+0xe>
  403f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403f0a:	f000 b957 	b.w	4041bc <_fini>
  403f0e:	bf00      	nop
  403f10:	004041c8 	.word	0x004041c8
  403f14:	004041cc 	.word	0x004041cc

00403f18 <__register_exitproc>:
  403f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403f1c:	4698      	mov	r8, r3
  403f1e:	4b22      	ldr	r3, [pc, #136]	; (403fa8 <__register_exitproc+0x90>)
  403f20:	681c      	ldr	r4, [r3, #0]
  403f22:	4606      	mov	r6, r0
  403f24:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  403f28:	460f      	mov	r7, r1
  403f2a:	4691      	mov	r9, r2
  403f2c:	b918      	cbnz	r0, 403f36 <__register_exitproc+0x1e>
  403f2e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  403f32:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403f36:	6843      	ldr	r3, [r0, #4]
  403f38:	2b1f      	cmp	r3, #31
  403f3a:	dd16      	ble.n	403f6a <__register_exitproc+0x52>
  403f3c:	4b1b      	ldr	r3, [pc, #108]	; (403fac <__register_exitproc+0x94>)
  403f3e:	b91b      	cbnz	r3, 403f48 <__register_exitproc+0x30>
  403f40:	f04f 30ff 	mov.w	r0, #4294967295
  403f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f48:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403f4c:	f3af 8000 	nop.w
  403f50:	2800      	cmp	r0, #0
  403f52:	d0f5      	beq.n	403f40 <__register_exitproc+0x28>
  403f54:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  403f58:	6001      	str	r1, [r0, #0]
  403f5a:	2500      	movs	r5, #0
  403f5c:	6045      	str	r5, [r0, #4]
  403f5e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403f62:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  403f66:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  403f6a:	6844      	ldr	r4, [r0, #4]
  403f6c:	b19e      	cbz	r6, 403f96 <__register_exitproc+0x7e>
  403f6e:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  403f72:	2201      	movs	r2, #1
  403f74:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  403f78:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  403f7c:	40a2      	lsls	r2, r4
  403f7e:	4311      	orrs	r1, r2
  403f80:	2e02      	cmp	r6, #2
  403f82:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403f86:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  403f8a:	d104      	bne.n	403f96 <__register_exitproc+0x7e>
  403f8c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  403f90:	431a      	orrs	r2, r3
  403f92:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  403f96:	1c63      	adds	r3, r4, #1
  403f98:	3402      	adds	r4, #2
  403f9a:	6043      	str	r3, [r0, #4]
  403f9c:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  403fa0:	2000      	movs	r0, #0
  403fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403fa6:	bf00      	nop
  403fa8:	004041a0 	.word	0x004041a0
  403fac:	00000000 	.word	0x00000000
  403fb0:	656d6f73 	.word	0x656d6f73
  403fb4:	6e696874 	.word	0x6e696874
  403fb8:	000d0a67 	.word	0x000d0a67
  403fbc:	65683a30 	.word	0x65683a30
  403fc0:	2e6f6c6c 	.word	0x2e6f6c6c
  403fc4:	00747874 	.word	0x00747874

00403fc8 <npio2_hw>:
  403fc8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  403fd8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  403fe8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  403ff8:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  404008:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  404018:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  404028:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  404038:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00404048 <two_over_pi>:
  404048:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  404058:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  404068:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  404078:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  404088:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  404098:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  4040a8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  4040b8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  4040c8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  4040d8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  4040e8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  4040f8:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  404108:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  404118:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  404128:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  404138:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  404148:	0060e27b 00c08c6b                       {.`.k...

00404150 <init_jk>:
  404150:	00000002 00000003 00000004 00000006     ................

00404160 <PIo2>:
  404160:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  404170:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  404180:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  404190:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

004041a0 <_global_impure_ptr>:
  4041a0:	20000050 00000043                       P.. C...

004041a8 <_init>:
  4041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041aa:	bf00      	nop
  4041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4041ae:	bc08      	pop	{r3}
  4041b0:	469e      	mov	lr, r3
  4041b2:	4770      	bx	lr

004041b4 <__init_array_start>:
  4041b4:	00403ecd 	.word	0x00403ecd

004041b8 <__frame_dummy_init_array_entry>:
  4041b8:	00400139                                9.@.

004041bc <_fini>:
  4041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041be:	bf00      	nop
  4041c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4041c2:	bc08      	pop	{r3}
  4041c4:	469e      	mov	lr, r3
  4041c6:	4770      	bx	lr

004041c8 <__fini_array_start>:
  4041c8:	00400111 	.word	0x00400111

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <sd_mmc_cards>:
	...
20000024:	001a 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000040 <SystemCoreClock>:
20000040:	0900 003d 0000 0000                         ..=.....

20000048 <_impure_ptr>:
20000048:	0050 2000 0000 0000                         P.. ....

20000050 <impure_data>:
20000050:	0000 0000 033c 2000 03a4 2000 040c 2000     ....<.. ... ... 
	...
20000084:	41a4 0040 0000 0000 0000 0000 0000 0000     .A@.............
	...
200000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
